(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/cdk/platform'), require('moment-timezone'), require('@angular/animations'), require('rxjs/operators'), require('@angular/cdk/keycodes'), require('@angular/cdk/bidi'), require('@angular/cdk/coercion'), require('@angular/cdk/overlay'), require('@angular/cdk/portal'), require('@angular/common'), require('@angular/material/dialog'), require('@angular/forms'), require('@angular/material/input'), require('@angular/material/form-field'), require('@angular/cdk/a11y'), require('@angular/material/button'), require('@angular/material/icon')) :
    typeof define === 'function' && define.amd ? define('@coachcare/datepicker', ['exports', '@angular/core', 'rxjs', '@angular/cdk/platform', 'moment-timezone', '@angular/animations', 'rxjs/operators', '@angular/cdk/keycodes', '@angular/cdk/bidi', '@angular/cdk/coercion', '@angular/cdk/overlay', '@angular/cdk/portal', '@angular/common', '@angular/material/dialog', '@angular/forms', '@angular/material/input', '@angular/material/form-field', '@angular/cdk/a11y', '@angular/material/button', '@angular/material/icon'], factory) :
    (factory((global.coachcare = global.coachcare || {}, global.coachcare.datepicker = {}),global.ng.core,global.rxjs,global.ng.cdk.platform,global.moment,global.ng.animations,global.rxjs.operators,global.ng.cdk.keycodes,global.ng.cdk.bidi,global.ng.cdk.coercion,global.ng.cdk.overlay,global.ng.cdk.portal,global.ng.common,global.ng.material.dialog,global.ng.forms,global.ng.material.input,global.ng.material['form-field'],global.ng.cdk.a11y,global.ng.material.button,global.ng.material.icon));
}(this, (function (exports,i0,rxjs,platform,momentNs,animations,operators,keycodes,bidi,coercion,overlay,portal,common,dialog,forms,input,formField,a11y,button,icon) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * InjectionToken for datepicker that can be used to override default locale code.
     * @type {?}
     */
    var MAT_DATE_LOCALE = new i0.InjectionToken('MAT_DATE_LOCALE', {
        providedIn: 'root',
        factory: MAT_DATE_LOCALE_FACTORY
    });
    /**
     * \@docs-private
     * @return {?}
     */
    function MAT_DATE_LOCALE_FACTORY() {
        return i0.inject(i0.LOCALE_ID);
    }
    /**
     * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.
     * If you are importing and providing this in your code you can simply remove it.
     * @deprecated
     * \@deletion-target 7.0.0
     * @type {?}
     */
    var MAT_DATE_LOCALE_PROVIDER = { provide: MAT_DATE_LOCALE, useExisting: i0.LOCALE_ID };
    /**
     * Adapts type `D` to be usable as a date by cdk-based components that work with dates.
     * @abstract
     * @template D
     */
    var /**
     * Adapts type `D` to be usable as a date by cdk-based components that work with dates.
     * @abstract
     * @template D
     */ DateAdapter = /** @class */ (function () {
        /** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */
        function DateAdapter() {
            this._localeChanges = new rxjs.Subject();
        }
        Object.defineProperty(DateAdapter.prototype, "localeChanges", {
            /** A stream that emits when the locale changes. */
            get: /**
             * A stream that emits when the locale changes.
             * @return {?}
             */ function () {
                return this._localeChanges;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Attempts to deserialize a value to a valid date object. This is different from parsing in that
         * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601
         * string). The default implementation does not allow any deserialization, it simply checks that
         * the given value is already a valid date object or null. The `<mat-datepicker>` will call this
         * method on all of it's `@Input()` properties that accept dates. It is therefore possible to
         * support passing values from your backend directly to these properties by overriding this method
         * to also deserialize the format used by your backend.
         * @param value The value to be deserialized into a date object.
         * @returns The deserialized date object, either a valid date, null if the value can be
         *     deserialized into a null date (e.g. the empty string), or an invalid date.
         */
        /**
         * Attempts to deserialize a value to a valid date object. This is different from parsing in that
         * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601
         * string). The default implementation does not allow any deserialization, it simply checks that
         * the given value is already a valid date object or null. The `<mat-datepicker>` will call this
         * method on all of it's `\@Input()` properties that accept dates. It is therefore possible to
         * support passing values from your backend directly to these properties by overriding this method
         * to also deserialize the format used by your backend.
         * @param {?} value The value to be deserialized into a date object.
         * @return {?} The deserialized date object, either a valid date, null if the value can be
         *     deserialized into a null date (e.g. the empty string), or an invalid date.
         */
        DateAdapter.prototype.deserialize = /**
         * Attempts to deserialize a value to a valid date object. This is different from parsing in that
         * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601
         * string). The default implementation does not allow any deserialization, it simply checks that
         * the given value is already a valid date object or null. The `<mat-datepicker>` will call this
         * method on all of it's `\@Input()` properties that accept dates. It is therefore possible to
         * support passing values from your backend directly to these properties by overriding this method
         * to also deserialize the format used by your backend.
         * @param {?} value The value to be deserialized into a date object.
         * @return {?} The deserialized date object, either a valid date, null if the value can be
         *     deserialized into a null date (e.g. the empty string), or an invalid date.
         */
            function (value) {
                if (value == null || (this.isDateInstance(value) && this.isValid(value))) {
                    return value;
                }
                return this.invalid();
            };
        /**
         * Sets the locale used for all dates.
         * @param locale The new locale.
         */
        /**
         * Sets the locale used for all dates.
         * @param {?} locale The new locale.
         * @return {?}
         */
        DateAdapter.prototype.setLocale = /**
         * Sets the locale used for all dates.
         * @param {?} locale The new locale.
         * @return {?}
         */
            function (locale) {
                this.locale = locale;
                this._localeChanges.next();
            };
        /**
         * Compares two dates.
         * @param first The first date to compare.
         * @param second The second date to compare.
         * @param unit Unit deep of the comparision.
         * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,
         *     a number greater than 0 if the first date is later.
         */
        /**
         * Compares two dates.
         * @param {?} first The first date to compare.
         * @param {?} second The second date to compare.
         * @param {?=} unit Unit deep of the comparision.
         * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,
         *     a number greater than 0 if the first date is later.
         */
        DateAdapter.prototype.compareDate = /**
         * Compares two dates.
         * @param {?} first The first date to compare.
         * @param {?} second The second date to compare.
         * @param {?=} unit Unit deep of the comparision.
         * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,
         *     a number greater than 0 if the first date is later.
         */
            function (first, second, unit) {
                if (unit === void 0) {
                    unit = 'minute';
                }
                /** @type {?} */
                var f = this.getYear(first).toString();
                /** @type {?} */
                var s = this.getYear(second).toString();
                if (['y', 'year', 'years'].indexOf(unit) >= 0) {
                    return Number(f) - Number(s);
                }
                else {
                    f = f.concat(('00' + this.getMonth(first)).slice(-2));
                    s = s.concat(('00' + this.getMonth(second)).slice(-2));
                }
                if (['M', 'month', 'months'].indexOf(unit) >= 0) {
                    return Number(f) - Number(s);
                }
                else {
                    f = f.concat(('00' + this.getDate(first)).slice(-2));
                    s = s.concat(('00' + this.getDate(second)).slice(-2));
                }
                if (['d', 'day', 'days'].indexOf(unit) >= 0) {
                    return Number(f) - Number(s);
                }
                else {
                    f = f.concat(('00' + this.getHours(first)).slice(-2));
                    s = s.concat(('00' + this.getHours(second)).slice(-2));
                }
                if (['h', 'hour', 'hours'].indexOf(unit) >= 0) {
                    return Number(f) - Number(s);
                }
                else {
                    f = f.concat(('00' + this.getMinutes(first)).slice(-2));
                    s = s.concat(('00' + this.getMinutes(second)).slice(-2));
                }
                return Number(f) - Number(s);
            };
        /**
         * Checks if two dates are equal.
         * @param first The first date to check.
         * @param second The second date to check.
         * @param unit Unit deep of the comparision.
         * @returns Whether the two dates are equal.
         *     Null dates are considered equal to other null dates.
         */
        /**
         * Checks if two dates are equal.
         * @param {?} first The first date to check.
         * @param {?} second The second date to check.
         * @param {?=} unit Unit deep of the comparision.
         * @return {?} Whether the two dates are equal.
         *     Null dates are considered equal to other null dates.
         */
        DateAdapter.prototype.sameDate = /**
         * Checks if two dates are equal.
         * @param {?} first The first date to check.
         * @param {?} second The second date to check.
         * @param {?=} unit Unit deep of the comparision.
         * @return {?} Whether the two dates are equal.
         *     Null dates are considered equal to other null dates.
         */
            function (first, second, unit) {
                if (unit === void 0) {
                    unit = 'minute';
                }
                return first && second ? !this.compareDate(first, second, unit) : first === second;
            };
        /**
         * Clamp the given date between min and max dates.
         * @param date The date to clamp.
         * @param min The minimum value to allow. If null or omitted no min is enforced.
         * @param max The maximum value to allow. If null or omitted no max is enforced.
         * @param unit Unit deep of the comparision.
         * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,
         *     otherwise `date`.
         */
        /**
         * Clamp the given date between min and max dates.
         * @param {?} date The date to clamp.
         * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.
         * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.
         * @param {?=} unit Unit deep of the comparision.
         * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,
         *     otherwise `date`.
         */
        DateAdapter.prototype.clampDate = /**
         * Clamp the given date between min and max dates.
         * @param {?} date The date to clamp.
         * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.
         * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.
         * @param {?=} unit Unit deep of the comparision.
         * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,
         *     otherwise `date`.
         */
            function (date, min, max, unit) {
                if (unit === void 0) {
                    unit = 'minute';
                }
                if (min && this.compareDate(date, min, unit) < 0) {
                    return min;
                }
                if (max && this.compareDate(date, max, unit) > 0) {
                    return max;
                }
                return date;
            };
        return DateAdapter;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MAT_DATE_FORMATS = new i0.InjectionToken('mat-date-formats');

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    // TODO(mmalerba): Remove when we no longer support safari 9.
    /**
     * Whether the browser supports the Intl API.
     * @type {?}
     */
    var SUPPORTS_INTL_API = typeof Intl !== 'undefined';
    /**
     * The default month names to use if Intl API is not available.
     * @type {?}
     */
    var DEFAULT_MONTH_NAMES = {
        long: [
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December'
        ],
        short: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']
    };
    var ɵ0 = function (i) { return String(i + 1); };
    /**
     * The default date names to use if Intl API is not available.
     * @type {?}
     */
    var DEFAULT_DATE_NAMES = range(31, ɵ0);
    /**
     * The default hour names to use if Intl API is not available.
     * @type {?}
     */
    var DEFAULT_HOUR_NAMES = range(24, String);
    /**
     * The default minute names to use if Intl API is not available.
     * @type {?}
     */
    var DEFAULT_MINUTE_NAMES = range(60, String);
    /**
     * The default day of the week names to use if Intl API is not available.
     * @type {?}
     */
    var DEFAULT_DAY_OF_WEEK_NAMES = {
        long: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
        short: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
        narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S']
    };
    /**
     * Matches strings that have the form of a valid RFC 3339 string
     * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date
     * because the regex will match strings an with out of bounds month, date, etc.
     * @type {?}
     */
    var ISO_8601_REGEX = /^\d{4}-\d{2}-\d{2}(?:T\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:Z|(?:(?:\+|-)\d{2}:\d{2}))?)?$/;
    /**
     * Creates an array and fills it with values.
     * @template T
     * @param {?} length
     * @param {?} valueFunction
     * @return {?}
     */
    function range(length, valueFunction) {
        /** @type {?} */
        var valuesArray = Array(length);
        for (var i = 0; i < length; i++) {
            valuesArray[i] = valueFunction(i);
        }
        return valuesArray;
    }
    /**
     * Adapts the native JS Date for use with cdk-based components that work with dates.
     */
    var NativeDateAdapter = /** @class */ (function (_super) {
        __extends(NativeDateAdapter, _super);
        function NativeDateAdapter(platform$$1, matDateLocale) {
            var _this = _super.call(this) || this;
            /**
             * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.
             * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off
             * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`
             * will produce `'8/13/1800'`.
             *
             * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now
             * getting the string representation of a Date object from it's utc representation. We're keeping
             * it here for sometime, just for precaution, in case we decide to revert some of these changes
             * though.
             */
            _this.useUtcForDisplay = true;
            _super.prototype.setLocale.call(_this, matDateLocale);
            // IE does its own time zone correction, so we disable this on IE.
            _this.useUtcForDisplay = !platform$$1.TRIDENT;
            _this._clampDate = platform$$1.TRIDENT || platform$$1.EDGE;
            return _this;
        }
        /**
         * @param {?} date
         * @return {?}
         */
        NativeDateAdapter.prototype.getYear = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return date.getFullYear();
            };
        /**
         * @param {?} date
         * @return {?}
         */
        NativeDateAdapter.prototype.getMonth = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return date.getMonth();
            };
        /**
         * @param {?} date
         * @return {?}
         */
        NativeDateAdapter.prototype.getDate = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return date.getDate();
            };
        /**
         * @param {?} date
         * @return {?}
         */
        NativeDateAdapter.prototype.getHours = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return date.getHours();
            };
        /**
         * @param {?} date
         * @param {?} value
         * @return {?}
         */
        NativeDateAdapter.prototype.setHours = /**
         * @param {?} date
         * @param {?} value
         * @return {?}
         */
            function (date, value) {
                date.setHours(value);
            };
        /**
         * @param {?} date
         * @return {?}
         */
        NativeDateAdapter.prototype.getMinutes = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return date.getMinutes();
            };
        /**
         * @param {?} date
         * @param {?} value
         * @return {?}
         */
        NativeDateAdapter.prototype.setMinutes = /**
         * @param {?} date
         * @param {?} value
         * @return {?}
         */
            function (date, value) {
                date.setMinutes(value);
            };
        /**
         * @param {?} date
         * @param {?} value
         * @param {?=} ms
         * @return {?}
         */
        NativeDateAdapter.prototype.setSeconds = /**
         * @param {?} date
         * @param {?} value
         * @param {?=} ms
         * @return {?}
         */
            function (date, value, ms) {
                date.setSeconds(value, ms);
            };
        /**
         * @param {?} date
         * @return {?}
         */
        NativeDateAdapter.prototype.getDayOfWeek = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return date.getDay();
            };
        /**
         * @param {?} style
         * @return {?}
         */
        NativeDateAdapter.prototype.getMonthNames = /**
         * @param {?} style
         * @return {?}
         */
            function (style) {
                var _this = this;
                if (SUPPORTS_INTL_API) {
                    /** @type {?} */
                    var dtf_1 = new Intl.DateTimeFormat(this.locale, { month: style, timeZone: 'utc' });
                    return range(12, function (i) { return _this._stripDirectionalityCharacters(_this._format(dtf_1, new Date(2017, i, 1))); });
                }
                return DEFAULT_MONTH_NAMES[style];
            };
        /**
         * @return {?}
         */
        NativeDateAdapter.prototype.getDateNames = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (SUPPORTS_INTL_API) {
                    /** @type {?} */
                    var dtf_2 = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });
                    return range(31, function (i) { return _this._stripDirectionalityCharacters(_this._format(dtf_2, new Date(2017, 0, i + 1))); });
                }
                return DEFAULT_DATE_NAMES;
            };
        /**
         * @return {?}
         */
        NativeDateAdapter.prototype.getHourNames = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (SUPPORTS_INTL_API) {
                    /** @type {?} */
                    var dtf_3 = new Intl.DateTimeFormat(this.locale, { hour: 'numeric', timeZone: 'utc' });
                    return range(24, function (i) { return _this._stripDirectionalityCharacters(dtf_3.format(new Date(2017, 0, 0, i))); });
                }
                return DEFAULT_HOUR_NAMES;
            };
        /**
         * @return {?}
         */
        NativeDateAdapter.prototype.getMinuteNames = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (SUPPORTS_INTL_API) {
                    /** @type {?} */
                    var dtf_4 = new Intl.DateTimeFormat(this.locale, { minute: 'numeric', timeZone: 'utc' });
                    return range(60, function (i) { return _this._stripDirectionalityCharacters(dtf_4.format(new Date(2017, 0, 0, 0, i))); });
                }
                return DEFAULT_MINUTE_NAMES;
            };
        /**
         * @param {?} style
         * @return {?}
         */
        NativeDateAdapter.prototype.getDayOfWeekNames = /**
         * @param {?} style
         * @return {?}
         */
            function (style) {
                var _this = this;
                if (SUPPORTS_INTL_API) {
                    /** @type {?} */
                    var dtf_5 = new Intl.DateTimeFormat(this.locale, { weekday: style, timeZone: 'utc' });
                    return range(7, function (i) { return _this._stripDirectionalityCharacters(_this._format(dtf_5, new Date(2017, 0, i + 1))); });
                }
                return DEFAULT_DAY_OF_WEEK_NAMES[style];
            };
        /**
         * @param {?} date
         * @return {?}
         */
        NativeDateAdapter.prototype.getYearName = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                if (SUPPORTS_INTL_API) {
                    /** @type {?} */
                    var dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });
                    return this._stripDirectionalityCharacters(this._format(dtf, date));
                }
                return String(this.getYear(date));
            };
        /**
         * @return {?}
         */
        NativeDateAdapter.prototype.getFirstDayOfWeek = /**
         * @return {?}
         */
            function () {
                // We can't tell using native JS Date what the first day of the week is, we default to Sunday.
                return 0;
            };
        /**
         * @param {?} date
         * @return {?}
         */
        NativeDateAdapter.prototype.getNumDaysInMonth = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));
            };
        /**
         * @param {?} date
         * @return {?}
         */
        NativeDateAdapter.prototype.clone = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date), this.getHours(date), this.getMinutes(date));
            };
        /**
         * @param {?} year
         * @param {?} month
         * @param {?} date
         * @param {?=} hours
         * @param {?=} minutes
         * @return {?}
         */
        NativeDateAdapter.prototype.createDate = /**
         * @param {?} year
         * @param {?} month
         * @param {?} date
         * @param {?=} hours
         * @param {?=} minutes
         * @return {?}
         */
            function (year, month, date, hours, minutes) {
                // Check for invalid month and date (except upper bound on date which we have to check after
                // creating the Date).
                if (month < 0 || month > 11) {
                    throw Error("Invalid month index \"" + month + "\". Month index has to be between 0 and 11.");
                }
                if (date < 1) {
                    throw Error("Invalid date \"" + date + "\". Date has to be greater than 0.");
                }
                /** @type {?} */
                var result = this._createDateWithOverflow(year, month, date, hours, minutes);
                // Check that the date wasn't above the upper bound for the month, causing the month to overflow
                if (result.getMonth() !== month) {
                    throw Error("Invalid date \"" + date + "\" for month with index \"" + month + "\".");
                }
                return result;
            };
        /**
         * @return {?}
         */
        NativeDateAdapter.prototype.today = /**
         * @return {?}
         */
            function () {
                return new Date();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NativeDateAdapter.prototype.parse = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                // We have no way using the native JS Date to set the parse format or locale, so we ignore these
                // parameters.
                if (typeof value === 'number') {
                    return new Date(value);
                }
                return value ? new Date(Date.parse(value)) : null;
            };
        /**
         * @param {?} date
         * @param {?} displayFormat
         * @return {?}
         */
        NativeDateAdapter.prototype.format = /**
         * @param {?} date
         * @param {?} displayFormat
         * @return {?}
         */
            function (date, displayFormat) {
                if (!this.isValid(date)) {
                    throw Error('NativeDateAdapter: Cannot format invalid date.');
                }
                if (SUPPORTS_INTL_API) {
                    // On IE and Edge the i18n API will throw a hard error that can crash the entire app
                    // if we attempt to format a date whose year is less than 1 or greater than 9999.
                    if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {
                        date = this.clone(date);
                        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));
                    }
                    displayFormat = __assign({}, displayFormat, { timeZone: 'utc' });
                    /** @type {?} */
                    var dtf = new Intl.DateTimeFormat(this.locale, displayFormat);
                    return this._stripDirectionalityCharacters(this._format(dtf, date));
                }
                return this._stripDirectionalityCharacters(date.toDateString());
            };
        /**
         * @param {?} date
         * @param {?} years
         * @return {?}
         */
        NativeDateAdapter.prototype.addCalendarYears = /**
         * @param {?} date
         * @param {?} years
         * @return {?}
         */
            function (date, years) {
                return this.addCalendarMonths(date, years * 12);
            };
        /**
         * @param {?} date
         * @param {?} months
         * @return {?}
         */
        NativeDateAdapter.prototype.addCalendarMonths = /**
         * @param {?} date
         * @param {?} months
         * @return {?}
         */
            function (date, months) {
                /** @type {?} */
                var newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date), this.getHours(date), this.getMinutes(date));
                // It's possible to wind up in the wrong month if the original month has more days than the new
                // month. In this case we want to go to the last day of the desired month.
                // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't
                // guarantee this.
                if (this.getMonth(newDate) !== ((this.getMonth(date) + months) % 12 + 12) % 12) {
                    newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);
                }
                return newDate;
            };
        /**
         * @param {?} date
         * @param {?} days
         * @return {?}
         */
        NativeDateAdapter.prototype.addCalendarDays = /**
         * @param {?} date
         * @param {?} days
         * @return {?}
         */
            function (date, days) {
                return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days, this.getHours(date), this.getMinutes(date));
            };
        /**
         * @param {?} date
         * @param {?} hours
         * @return {?}
         */
        NativeDateAdapter.prototype.addCalendarHours = /**
         * @param {?} date
         * @param {?} hours
         * @return {?}
         */
            function (date, hours) {
                return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date), this.getHours(date) + hours, this.getMinutes(date));
            };
        /**
         * @param {?} date
         * @param {?} minutes
         * @return {?}
         */
        NativeDateAdapter.prototype.addCalendarMinutes = /**
         * @param {?} date
         * @param {?} minutes
         * @return {?}
         */
            function (date, minutes) {
                return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date), this.getHours(date), this.getMinutes(date) + minutes);
            };
        /**
         * @param {?} date
         * @return {?}
         */
        NativeDateAdapter.prototype.toIso8601 = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return [date.getUTCFullYear(), this._2digit(date.getUTCMonth() + 1), this._2digit(date.getUTCDate())].join('-');
            };
        /**
         * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings
         * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an
         * invalid date for all other values.
         */
        /**
         * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings
         * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an
         * invalid date for all other values.
         * @param {?} value
         * @return {?}
         */
        NativeDateAdapter.prototype.deserialize = /**
         * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings
         * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an
         * invalid date for all other values.
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (typeof value === 'string') {
                    if (!value) {
                        return null;
                    }
                    // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the
                    // string is the right format first.
                    if (ISO_8601_REGEX.test(value)) {
                        /** @type {?} */
                        var date = new Date(value);
                        if (this.isValid(date)) {
                            return date;
                        }
                    }
                }
                return _super.prototype.deserialize.call(this, value);
            };
        /**
         * @param {?} obj
         * @return {?}
         */
        NativeDateAdapter.prototype.isDateInstance = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                return obj instanceof Date;
            };
        /**
         * @param {?} date
         * @return {?}
         */
        NativeDateAdapter.prototype.isValid = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return date && date.getTime ? !isNaN(date.getTime()) : false;
            };
        /**
         * @return {?}
         */
        NativeDateAdapter.prototype.invalid = /**
         * @return {?}
         */
            function () {
                return new Date(NaN);
            };
        /** Creates a date but allows the month and date to overflow. */
        /**
         * Creates a date but allows the month and date to overflow.
         * @param {?} year
         * @param {?} month
         * @param {?} date
         * @param {?=} hours
         * @param {?=} minutes
         * @return {?}
         */
        NativeDateAdapter.prototype._createDateWithOverflow = /**
         * Creates a date but allows the month and date to overflow.
         * @param {?} year
         * @param {?} month
         * @param {?} date
         * @param {?=} hours
         * @param {?=} minutes
         * @return {?}
         */
            function (year, month, date, hours, minutes) {
                /** @type {?} */
                var result = new Date(year, month, date, hours, minutes, 0);
                // We need to correct for the fact that JS native Date treats years in range [0, 99] as
                // abbreviations for 19xx.
                if (year >= 0 && year < 100) {
                    result.setFullYear(this.getYear(result) - 1900);
                }
                return result;
            };
        /**
         * Pads a number to make it two digits.
         * @param n The number to pad.
         * @returns The padded number.
         */
        /**
         * Pads a number to make it two digits.
         * @param {?} n The number to pad.
         * @return {?} The padded number.
         */
        NativeDateAdapter.prototype._2digit = /**
         * Pads a number to make it two digits.
         * @param {?} n The number to pad.
         * @return {?} The padded number.
         */
            function (n) {
                return ('00' + n).slice(-2);
            };
        /**
         * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while
         * other browsers do not. We remove them to make output consistent and because they interfere with
         * date parsing.
         * @param str The string to strip direction characters from.
         * @returns The stripped string.
         */
        /**
         * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while
         * other browsers do not. We remove them to make output consistent and because they interfere with
         * date parsing.
         * @param {?} str The string to strip direction characters from.
         * @return {?} The stripped string.
         */
        NativeDateAdapter.prototype._stripDirectionalityCharacters = /**
         * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while
         * other browsers do not. We remove them to make output consistent and because they interfere with
         * date parsing.
         * @param {?} str The string to strip direction characters from.
         * @return {?} The stripped string.
         */
            function (str) {
                return str.replace(/[\u200e\u200f]/g, '');
            };
        /**
         * When converting Date object to string, javascript built-in functions may return wrong
         * results because it applies its internal DST rules. The DST rules around the world change
         * very frequently, and the current valid rule is not always valid in previous years though.
         * We work around this problem building a new Date object which has its internal UTC
         * representation with the local date and time.
         * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have
         *    timeZone set to 'utc' to work fine.
         * @param date Date from which we want to get the string representation according to dtf
         * @returns A Date object with its UTC representation based on the passed in date info
         */
        /**
         * When converting Date object to string, javascript built-in functions may return wrong
         * results because it applies its internal DST rules. The DST rules around the world change
         * very frequently, and the current valid rule is not always valid in previous years though.
         * We work around this problem building a new Date object which has its internal UTC
         * representation with the local date and time.
         * @param {?} dtf Intl.DateTimeFormat object, containg the desired string format. It must have
         *    timeZone set to 'utc' to work fine.
         * @param {?} date Date from which we want to get the string representation according to dtf
         * @return {?} A Date object with its UTC representation based on the passed in date info
         */
        NativeDateAdapter.prototype._format = /**
         * When converting Date object to string, javascript built-in functions may return wrong
         * results because it applies its internal DST rules. The DST rules around the world change
         * very frequently, and the current valid rule is not always valid in previous years though.
         * We work around this problem building a new Date object which has its internal UTC
         * representation with the local date and time.
         * @param {?} dtf Intl.DateTimeFormat object, containg the desired string format. It must have
         *    timeZone set to 'utc' to work fine.
         * @param {?} date Date from which we want to get the string representation according to dtf
         * @return {?} A Date object with its UTC representation based on the passed in date info
         */
            function (dtf, date) {
                /** @type {?} */
                var d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
                return dtf.format(d);
            };
        NativeDateAdapter.decorators = [
            { type: i0.Injectable },
        ];
        NativeDateAdapter.ctorParameters = function () {
            return [
                { type: platform.Platform },
                { type: String, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [MAT_DATE_LOCALE,] }] }
            ];
        };
        return NativeDateAdapter;
    }(DateAdapter));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /** @type {?} */
    var MAT_NATIVE_DATE_FORMATS = {
        parse: {
            date: null,
            datetime: null,
            time: null
        },
        display: {
            date: { year: 'numeric', month: 'numeric', day: 'numeric' },
            datetime: {
                year: 'numeric',
                month: 'numeric',
                day: 'numeric',
                hours: 'numeric',
                minutes: 'numeric'
            },
            time: { hours: 'numeric', minutes: 'numeric' },
            dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },
            monthDayLabel: { month: 'short', day: 'numeric' },
            monthDayA11yLabel: { month: 'long', day: 'numeric' },
            monthYearLabel: { year: 'numeric', month: 'short' },
            monthYearA11yLabel: { year: 'numeric', month: 'long' },
            timeLabel: { hours: 'numeric', minutes: 'numeric' }
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NativeDateModule = /** @class */ (function () {
        function NativeDateModule() {
        }
        NativeDateModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [platform.PlatformModule],
                        providers: [{ provide: DateAdapter, useClass: NativeDateAdapter }]
                    },] },
        ];
        return NativeDateModule;
    }());
    var ɵ0$1 = MAT_NATIVE_DATE_FORMATS;
    var MatNativeDateModule = /** @class */ (function () {
        function MatNativeDateModule() {
        }
        MatNativeDateModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [NativeDateModule],
                        providers: [{ provide: MAT_DATE_FORMATS, useValue: ɵ0$1 }]
                    },] },
        ];
        return MatNativeDateModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var moment = momentNs;
    /**
     * Creates an array and fills it with values.
     * @template T
     * @param {?} length
     * @param {?} valueFunction
     * @return {?}
     */
    function range$1(length, valueFunction) {
        /** @type {?} */
        var valuesArray = Array(length);
        for (var i = 0; i < length; i++) {
            valuesArray[i] = valueFunction(i);
        }
        return valuesArray;
    }
    /**
     * Adapts Moment.js Dates for use with Angular Material.
     */
    var MomentDateAdapter = /** @class */ (function (_super) {
        __extends(MomentDateAdapter, _super);
        function MomentDateAdapter(dateLocale) {
            var _this = _super.call(this) || this;
            _this.setLocale(dateLocale || moment.locale());
            return _this;
        }
        /**
         * @param {?} locale
         * @return {?}
         */
        MomentDateAdapter.prototype.setLocale = /**
         * @param {?} locale
         * @return {?}
         */
            function (locale) {
                var _this = this;
                _super.prototype.setLocale.call(this, locale);
                /** @type {?} */
                var momentLocaleData = moment.localeData(locale);
                this._localeData = {
                    firstDayOfWeek: momentLocaleData.firstDayOfWeek(),
                    longMonths: momentLocaleData.months(),
                    shortMonths: momentLocaleData.monthsShort(),
                    dates: range$1(31, function (i) { return _this.createDate(2017, 0, i + 1).format('D'); }),
                    longDaysOfWeek: momentLocaleData.weekdays(),
                    shortDaysOfWeek: momentLocaleData.weekdaysShort(),
                    narrowDaysOfWeek: momentLocaleData.weekdaysMin()
                };
            };
        /**
         * @param {?} date
         * @return {?}
         */
        MomentDateAdapter.prototype.getYear = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return this.clone(date).year();
            };
        /**
         * @param {?} date
         * @return {?}
         */
        MomentDateAdapter.prototype.getMonth = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return this.clone(date).month();
            };
        /**
         * @param {?} date
         * @return {?}
         */
        MomentDateAdapter.prototype.getDate = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return this.clone(date).date();
            };
        /**
         * @param {?} date
         * @return {?}
         */
        MomentDateAdapter.prototype.getHours = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return this.clone(date).hours();
            };
        /**
         * @param {?} date
         * @param {?} value
         * @return {?}
         */
        MomentDateAdapter.prototype.setHours = /**
         * @param {?} date
         * @param {?} value
         * @return {?}
         */
            function (date, value) {
                date.hours(value);
            };
        /**
         * @param {?} date
         * @return {?}
         */
        MomentDateAdapter.prototype.getMinutes = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return this.clone(date).minutes();
            };
        /**
         * @param {?} date
         * @param {?} value
         * @return {?}
         */
        MomentDateAdapter.prototype.setMinutes = /**
         * @param {?} date
         * @param {?} value
         * @return {?}
         */
            function (date, value) {
                date.minutes(value);
            };
        /**
         * @param {?} date
         * @param {?} value
         * @param {?=} ms
         * @return {?}
         */
        MomentDateAdapter.prototype.setSeconds = /**
         * @param {?} date
         * @param {?} value
         * @param {?=} ms
         * @return {?}
         */
            function (date, value, ms) {
                date.seconds(value);
                if (ms) {
                    date.milliseconds(ms);
                }
            };
        /**
         * @param {?} date
         * @return {?}
         */
        MomentDateAdapter.prototype.getDayOfWeek = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return this.clone(date).day();
            };
        /**
         * @param {?} style
         * @return {?}
         */
        MomentDateAdapter.prototype.getMonthNames = /**
         * @param {?} style
         * @return {?}
         */
            function (style) {
                // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.
                return style === 'long' ? this._localeData.longMonths : this._localeData.shortMonths;
            };
        /**
         * @return {?}
         */
        MomentDateAdapter.prototype.getDateNames = /**
         * @return {?}
         */
            function () {
                return this._localeData.dates;
            };
        /**
         * @return {?}
         */
        MomentDateAdapter.prototype.getHourNames = /**
         * @return {?}
         */
            function () {
                // TODO SUPPORTS_INTL_API
                return range$1(24, String);
            };
        /**
         * @return {?}
         */
        MomentDateAdapter.prototype.getMinuteNames = /**
         * @return {?}
         */
            function () {
                // TODO SUPPORTS_INTL_API
                return range$1(60, String);
            };
        /**
         * @param {?} style
         * @return {?}
         */
        MomentDateAdapter.prototype.getDayOfWeekNames = /**
         * @param {?} style
         * @return {?}
         */
            function (style) {
                if (style === 'long') {
                    return this._localeData.longDaysOfWeek;
                }
                if (style === 'short') {
                    return this._localeData.shortDaysOfWeek;
                }
                return this._localeData.narrowDaysOfWeek;
            };
        /**
         * @param {?} date
         * @return {?}
         */
        MomentDateAdapter.prototype.getYearName = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return this.clone(date).format('YYYY');
            };
        /**
         * @return {?}
         */
        MomentDateAdapter.prototype.getFirstDayOfWeek = /**
         * @return {?}
         */
            function () {
                return this._localeData.firstDayOfWeek;
            };
        /**
         * @param {?} date
         * @return {?}
         */
        MomentDateAdapter.prototype.getNumDaysInMonth = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return this.clone(date).daysInMonth();
            };
        /**
         * @param {?} date
         * @return {?}
         */
        MomentDateAdapter.prototype.clone = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                /** @type {?} */
                var obj = date ? moment(date) : moment();
                return obj.locale(this.locale);
            };
        /**
         * @param {?} year
         * @param {?} month
         * @param {?} date
         * @param {?=} hours
         * @param {?=} minutes
         * @return {?}
         */
        MomentDateAdapter.prototype.createDate = /**
         * @param {?} year
         * @param {?} month
         * @param {?} date
         * @param {?=} hours
         * @param {?=} minutes
         * @return {?}
         */
            function (year, month, date, hours, minutes) {
                // Moment.js will create an invalid date if any of the components are out of bounds, but we
                // explicitly check each case so we can throw more descriptive errors.
                if (month < 0 || month > 11) {
                    throw Error("Invalid month index \"" + month + "\". Month index has to be between 0 and 11.");
                }
                if (date < 1) {
                    throw Error("Invalid date \"" + date + "\". Date has to be greater than 0.");
                }
                /** @type {?} */
                var result = moment({ year: year, month: month, date: date, hours: hours, minutes: minutes, seconds: 0 });
                // If the result isn't valid, the date must have been out of bounds for this month.
                if (!result.isValid()) {
                    throw Error("Invalid date \"" + date + "\" for month with index \"" + month + "\".");
                }
                return result.locale(this.locale);
            };
        /**
         * @return {?}
         */
        MomentDateAdapter.prototype.today = /**
         * @return {?}
         */
            function () {
                return moment().locale(this.locale);
            };
        /**
         * @param {?} value
         * @param {?} parseFormat
         * @return {?}
         */
        MomentDateAdapter.prototype.parse = /**
         * @param {?} value
         * @param {?} parseFormat
         * @return {?}
         */
            function (value, parseFormat) {
                if (parseFormat && value && typeof value === 'string') {
                    return moment(value, parseFormat, this.locale, true);
                }
                return value ? moment(value).locale(this.locale) : null;
            };
        /**
         * @param {?} date
         * @param {?} displayFormat
         * @return {?}
         */
        MomentDateAdapter.prototype.format = /**
         * @param {?} date
         * @param {?} displayFormat
         * @return {?}
         */
            function (date, displayFormat) {
                date = this.clone(date);
                if (!this.isValid(date)) {
                    throw Error('MomentDateAdapter: Cannot format invalid date.');
                }
                return date.format(displayFormat);
            };
        /**
         * @param {?} date
         * @param {?} years
         * @return {?}
         */
        MomentDateAdapter.prototype.addCalendarYears = /**
         * @param {?} date
         * @param {?} years
         * @return {?}
         */
            function (date, years) {
                return this.clone(date).add({ years: years });
            };
        /**
         * @param {?} date
         * @param {?} months
         * @return {?}
         */
        MomentDateAdapter.prototype.addCalendarMonths = /**
         * @param {?} date
         * @param {?} months
         * @return {?}
         */
            function (date, months) {
                return this.clone(date).add({ months: months });
            };
        /**
         * @param {?} date
         * @param {?} days
         * @return {?}
         */
        MomentDateAdapter.prototype.addCalendarDays = /**
         * @param {?} date
         * @param {?} days
         * @return {?}
         */
            function (date, days) {
                return this.clone(date).add({ days: days });
            };
        /**
         * @param {?} date
         * @param {?} hours
         * @return {?}
         */
        MomentDateAdapter.prototype.addCalendarHours = /**
         * @param {?} date
         * @param {?} hours
         * @return {?}
         */
            function (date, hours) {
                return this.clone(date).add({ hours: hours });
            };
        /**
         * @param {?} date
         * @param {?} minutes
         * @return {?}
         */
        MomentDateAdapter.prototype.addCalendarMinutes = /**
         * @param {?} date
         * @param {?} minutes
         * @return {?}
         */
            function (date, minutes) {
                return this.clone(date).add({ minutes: minutes });
            };
        /**
         * @param {?} date
         * @return {?}
         */
        MomentDateAdapter.prototype.toIso8601 = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return this.clone(date).format();
            };
        /**
         * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings
         * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty
         * string into null. Returns an invalid date for all other values.
         */
        /**
         * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings
         * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty
         * string into null. Returns an invalid date for all other values.
         * @param {?} value
         * @return {?}
         */
        MomentDateAdapter.prototype.deserialize = /**
         * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings
         * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty
         * string into null. Returns an invalid date for all other values.
         * @param {?} value
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var date;
                if (value instanceof Date) {
                    date = moment(value);
                }
                if (typeof value === 'string') {
                    if (!value) {
                        return null;
                    }
                    date = moment(value, moment.ISO_8601).locale(this.locale);
                }
                if (date && this.isValid(date)) {
                    return date;
                }
                return _super.prototype.deserialize.call(this, value);
            };
        /**
         * @param {?} obj
         * @return {?}
         */
        MomentDateAdapter.prototype.isDateInstance = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                return moment.isMoment(obj) ? obj.isValid(obj) : moment(obj).isValid();
            };
        /**
         * @param {?} date
         * @return {?}
         */
        MomentDateAdapter.prototype.isValid = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return date ? this.clone(date).isValid() : false;
            };
        /**
         * @return {?}
         */
        MomentDateAdapter.prototype.invalid = /**
         * @return {?}
         */
            function () {
                return moment.invalid();
            };
        MomentDateAdapter.decorators = [
            { type: i0.Injectable },
        ];
        MomentDateAdapter.ctorParameters = function () {
            return [
                { type: String, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [MAT_DATE_LOCALE,] }] }
            ];
        };
        return MomentDateAdapter;
    }(DateAdapter));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /** @type {?} */
    var MAT_MOMENT_DATE_FORMATS = {
        // accepted manual input formats
        parse: {
            date: ['YYYY-MM-DD', 'YYYY/MM/DD', 'll'],
            datetime: ['YYYY-MM-DD HH:mm', 'YYYY/MM/DD HH:mm', 'll h:mma'],
            time: ['H:mm', 'HH:mm', 'h:mm a', 'hh:mm a']
        },
        // display format
        display: {
            date: 'll',
            datetime: 'll h:mma',
            time: 'h:mm a',
            dateA11yLabel: 'LL',
            monthDayLabel: 'MMM D',
            monthDayA11yLabel: 'MMMM D',
            monthYearLabel: 'MMMM YYYY',
            monthYearA11yLabel: 'MMMM YYYY',
            timeLabel: 'HH:mm'
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var MomentDateModule = /** @class */ (function () {
        function MomentDateModule() {
        }
        MomentDateModule.decorators = [
            { type: i0.NgModule, args: [{
                        providers: [{ provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE] }]
                    },] },
        ];
        return MomentDateModule;
    }());
    var ɵ0$2 = MAT_MOMENT_DATE_FORMATS;
    var MatMomentDateModule = /** @class */ (function () {
        function MatMomentDateModule() {
        }
        MatMomentDateModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [MomentDateModule],
                        providers: [{ provide: MAT_DATE_FORMATS, useValue: ɵ0$2 }]
                    },] },
        ];
        return MatMomentDateModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@docs-private
     * @param {?} provider
     * @return {?}
     */
    function createMissingDateImplError(provider) {
        return Error("MatDatepicker: No provider found for " + provider + ". You must import one of the following " +
            "modules at your application root: MatNativeDateModule, MatMomentDateModule " +
            "or provide a custom implementation.");
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CLOCK_RADIUS = 50;
    /** @type {?} */
    var CLOCK_INNER_RADIUS = 27.5;
    /** @type {?} */
    var CLOCK_OUTER_RADIUS = 41.25;
    /** @type {?} */
    var CLOCK_TICK_RADIUS = 7.0833;
    /**
     * A clock that is used as part of the datepicker.
     * \@docs-private
     * @template D
     */
    var MatClockView = /** @class */ (function () {
        function MatClockView(_changeDetectorRef, _element, _dateAdapter, _dateFormats) {
            var _this = this;
            this._changeDetectorRef = _changeDetectorRef;
            this._element = _element;
            this._dateAdapter = _dateAdapter;
            this._dateFormats = _dateFormats;
            this.clockStep = 1;
            this.twelveHour = false;
            // Whether the clock is in hour view.
            this.hourView = true;
            // Emits when the final time was selected.
            this.selectedTime = new i0.EventEmitter();
            // Emits when the currently selected date changes.
            this.selectedChange = new i0.EventEmitter();
            // Emits when the currently selected date changes.
            this.changeView = new i0.EventEmitter();
            // Hours and Minutes representing the clock view.
            this._hours = [];
            this._minutes = [];
            if (!this._dateAdapter) {
                throw createMissingDateImplError('DateAdapter');
            }
            if (!this._dateFormats) {
                throw createMissingDateImplError('MAT_DATE_FORMATS');
            }
            this.mouseMoveListener = function (event) {
                _this._handleMousemove(event);
            };
            this.mouseUpListener = function () {
                _this._handleMouseup();
            };
        }
        Object.defineProperty(MatClockView.prototype, "activeDate", {
            /**
             * The time to display in this clock view. (the rest is ignored)
             */
            get: /**
             * The time to display in this clock view. (the rest is ignored)
             * @return {?}
             */ function () {
                return this._activeDate;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                /** @type {?} */
                var oldActiveDate = this._activeDate;
                /** @type {?} */
                var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();
                this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
                if (oldActiveDate && this._dateAdapter.compareDate(oldActiveDate, this._activeDate, 'minute')) {
                    this._init();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatClockView.prototype, "selected", {
            // The currently selected date.
            get: 
            // The currently selected date.
            /**
             * @return {?}
             */
            function () {
                return this._selected;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatClockView.prototype, "minDate", {
            /** The minimum selectable date. */
            get: /**
             * The minimum selectable date.
             * @return {?}
             */ function () {
                return this._minDate;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatClockView.prototype, "maxDate", {
            /** The maximum selectable date. */
            get: /**
             * The maximum selectable date.
             * @return {?}
             */ function () {
                return this._maxDate;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatClockView.prototype, "_hand", {
            get: /**
             * @return {?}
             */ function () {
                this._selectedHour = this._dateAdapter.getHours(this.activeDate);
                this._selectedMinute = this._dateAdapter.getMinutes(this.activeDate);
                /** @type {?} */
                var radius = CLOCK_OUTER_RADIUS;
                /** @type {?} */
                var deg = 0;
                if (this.twelveHour) {
                    this._selectedHour = this._selectedHour < 12 ? this._selectedHour : this._selectedHour - 12;
                    this._selectedHour = this._selectedHour === 0 ? 12 : this._selectedHour;
                }
                if (this.hourView) {
                    /** @type {?} */
                    var outer = this._selectedHour > 0 && this._selectedHour < 13;
                    radius = outer ? CLOCK_OUTER_RADIUS : CLOCK_INNER_RADIUS;
                    if (this.twelveHour) {
                        radius = CLOCK_OUTER_RADIUS;
                    }
                    deg = Math.round(this._selectedHour * (360 / (24 / 2)));
                }
                else {
                    deg = Math.round(this._selectedMinute * (360 / 60));
                }
                return {
                    transform: "rotate(" + deg + "deg)",
                    height: radius + "%",
                    'margin-top': 50 - radius + "%"
                };
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MatClockView.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this._init();
            };
        // Handles mousedown events on the clock body.
        // Handles mousedown events on the clock body.
        /**
         * @param {?} event
         * @return {?}
         */
        MatClockView.prototype._handleMousedown =
            // Handles mousedown events on the clock body.
            /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                this.setTime(event);
                document.addEventListener('mousemove', this.mouseMoveListener);
                document.addEventListener('touchmove', this.mouseMoveListener);
                document.addEventListener('mouseup', this.mouseUpListener);
                document.addEventListener('touchend', this.mouseUpListener);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        MatClockView.prototype._handleMousemove = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                this.setTime(event);
            };
        /**
         * @return {?}
         */
        MatClockView.prototype._handleMouseup = /**
         * @return {?}
         */
            function () {
                document.removeEventListener('mousemove', this.mouseMoveListener);
                document.removeEventListener('touchmove', this.mouseMoveListener);
                document.removeEventListener('mouseup', this.mouseUpListener);
                document.removeEventListener('touchend', this.mouseUpListener);
            };
        // Initializes this clock view.
        // Initializes this clock view.
        /**
         * @return {?}
         */
        MatClockView.prototype._init =
            // Initializes this clock view.
            /**
             * @return {?}
             */
            function () {
                this._hours.length = 0;
                this._minutes.length = 0;
                /** @type {?} */
                var hourNames = this._dateAdapter.getHourNames();
                /** @type {?} */
                var minuteNames = this._dateAdapter.getMinuteNames();
                if (this.twelveHour) {
                    this._anteMeridian = this._dateAdapter.getHours(this.activeDate) < 12;
                    for (var i = 0; i < hourNames.length / 2; i++) {
                        /** @type {?} */
                        var radian = i / 6 * Math.PI;
                        /** @type {?} */
                        var radius = CLOCK_OUTER_RADIUS;
                        /** @type {?} */
                        var date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), this._dateAdapter.getDate(this.activeDate), this._anteMeridian ? i : i + 12);
                        this._hours.push({
                            value: i,
                            displayValue: i === 0 ? '12' : hourNames[i],
                            enabled: !this.dateFilter || this.dateFilter(date, 'hour'),
                            top: CLOCK_RADIUS - Math.cos(radian) * radius - CLOCK_TICK_RADIUS,
                            left: CLOCK_RADIUS + Math.sin(radian) * radius - CLOCK_TICK_RADIUS
                        });
                    }
                }
                else {
                    for (var i = 0; i < hourNames.length; i++) {
                        /** @type {?} */
                        var radian = i / 6 * Math.PI;
                        /** @type {?} */
                        var outer = i > 0 && i < 13;
                        /** @type {?} */
                        var radius = outer ? CLOCK_OUTER_RADIUS : CLOCK_INNER_RADIUS;
                        /** @type {?} */
                        var date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), this._dateAdapter.getDate(this.activeDate), i);
                        this._hours.push({
                            value: i,
                            displayValue: i === 0 ? '12' : hourNames[i],
                            enabled: !this.dateFilter || this.dateFilter(date, 'hour'),
                            top: CLOCK_RADIUS - Math.cos(radian) * radius - CLOCK_TICK_RADIUS,
                            left: CLOCK_RADIUS + Math.sin(radian) * radius - CLOCK_TICK_RADIUS,
                            fontSize: i > 0 && i < 13 ? '' : '80%'
                        });
                    }
                }
                for (var i = 0; i < minuteNames.length; i += 5) {
                    /** @type {?} */
                    var radian = i / 30 * Math.PI;
                    /** @type {?} */
                    var date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), this._dateAdapter.getDate(this.activeDate), this._dateAdapter.getHours(this.activeDate), i);
                    this._minutes.push({
                        value: i,
                        displayValue: i === 0 ? '00' : minuteNames[i],
                        enabled: !this.dateFilter || this.dateFilter(date, 'minute'),
                        top: CLOCK_RADIUS - Math.cos(radian) * CLOCK_OUTER_RADIUS - CLOCK_TICK_RADIUS,
                        left: CLOCK_RADIUS + Math.sin(radian) * CLOCK_OUTER_RADIUS - CLOCK_TICK_RADIUS
                    });
                }
                this._changeDetectorRef.markForCheck();
            };
        // Set Time
        // Set Time
        /**
         * @param {?} event
         * @return {?}
         */
        MatClockView.prototype.setTime =
            // Set Time
            /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                /** @type {?} */
                var trigger = this._element.nativeElement;
                /** @type {?} */
                var triggerRect = trigger.getBoundingClientRect();
                /** @type {?} */
                var width = trigger.offsetWidth;
                /** @type {?} */
                var height = trigger.offsetHeight;
                /** @type {?} */
                var pageX = event.pageX !== undefined ? event.pageX : event.touches[0].pageX;
                /** @type {?} */
                var pageY = event.pageY !== undefined ? event.pageY : event.touches[0].pageY;
                /** @type {?} */
                var x = width / 2 - (pageX - triggerRect.left - window.pageXOffset);
                /** @type {?} */
                var y = height / 2 - (pageY - triggerRect.top - window.pageYOffset);
                /** @type {?} */
                var unit = Math.PI / (this.hourView ? 6 : this.clockStep ? 30 / this.clockStep : 30);
                /** @type {?} */
                var z = Math.sqrt(x * x + y * y);
                /** @type {?} */
                var outer = this.hourView && z > (width * (CLOCK_OUTER_RADIUS / 100) + width * (CLOCK_INNER_RADIUS / 100)) / 2;
                /** @type {?} */
                var radian = Math.atan2(-x, y);
                if (radian < 0) {
                    radian = Math.PI * 2 + radian;
                }
                /** @type {?} */
                var value = Math.round(radian / unit);
                /** @type {?} */
                var date = this._dateAdapter.clone(this.activeDate);
                if (this.hourView) {
                    if (value === 12) {
                        value = 0;
                    }
                    value = this.twelveHour
                        ? this._anteMeridian ? value : value + 12
                        : outer ? (value === 0 ? 12 : value) : value === 0 ? 0 : value + 12;
                    this._dateAdapter.setHours(date, value);
                }
                else {
                    if (this.clockStep) {
                        value *= this.clockStep;
                    }
                    if (value === 60) {
                        value = 0;
                    }
                    this._dateAdapter.setMinutes(date, value);
                }
                // validate if the resulting value is disabled and do not take action
                if (this.dateFilter && !this.dateFilter(date, this.hourView ? 'hour' : 'minute')) {
                    return;
                }
                this.activeDate = date;
                if (this.hourView) {
                    this.changeView.emit();
                    this.selectedChange.emit(this.activeDate);
                }
                else {
                    this.selectedTime.emit(this.activeDate);
                }
            };
        /**
         * @return {?}
         */
        MatClockView.prototype._focusActiveCell = /**
         * @return {?}
         */
            function () { };
        /**
         * @param obj The object to check.
         * @returns The given object if it is both a date instance and valid, otherwise null.
         */
        /**
         * @param {?} obj The object to check.
         * @return {?} The given object if it is both a date instance and valid, otherwise null.
         */
        MatClockView.prototype._getValidDateOrNull = /**
         * @param {?} obj The object to check.
         * @return {?} The given object if it is both a date instance and valid, otherwise null.
         */
            function (obj) {
                return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;
            };
        MatClockView.decorators = [
            { type: i0.Component, args: [{
                        selector: 'mat-clock-view',
                        template: "<div class=\"mat-clock\">\n  <div class=\"mat-clock-center\"></div>\n  <div class=\"mat-clock-hand\" [ngStyle]=\"_hand\"></div>\n\n  <div class=\"mat-clock-hours\" [class.active]=\"hourView\">\n    <div *ngFor=\"let item of _hours\"\n      class=\"mat-clock-cell\"\n      [class.mat-clock-cell-selected]=\"_selectedHour == item.value\"\n      [class.mat-clock-cell-disabled]=\"!item.enabled\"\n      [style.top.%]=\"item.top\"\n      [style.left.%]=\"item.left\"\n      [style.fontSize]=\"item.fontSize\">\n      {{ item.displayValue }}\n    </div>\n  </div>\n\n  <div class=\"mat-clock-minutes\" [class.active]=\"!hourView\">\n    <div *ngFor=\"let item of _minutes\"\n      class=\"mat-clock-cell\"\n      [class.mat-clock-cell-selected]=\"_selectedMinute == item.value\"\n      [class.mat-clock-cell-disabled]=\"!item.enabled\"\n      [style.top.%]=\"item.top\"\n      [style.left.%]=\"item.left\">\n      {{ item.displayValue }}\n    </div>\n  </div>\n</div>\n",
                        exportAs: 'matClockView',
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: {
                            role: 'clock',
                            '(mousedown)': '_handleMousedown($event)'
                        },
                        preserveWhitespaces: false
                    },] },
        ];
        MatClockView.ctorParameters = function () {
            return [
                { type: i0.ChangeDetectorRef },
                { type: i0.ElementRef },
                { type: DateAdapter, decorators: [{ type: i0.Optional }] },
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [MAT_DATE_FORMATS,] }] }
            ];
        };
        MatClockView.propDecorators = {
            activeDate: [{ type: i0.Input }],
            selected: [{ type: i0.Input }],
            minDate: [{ type: i0.Input }],
            maxDate: [{ type: i0.Input }],
            dateFilter: [{ type: i0.Input }],
            clockStep: [{ type: i0.Input }],
            twelveHour: [{ type: i0.Input }],
            hourView: [{ type: i0.Input }],
            selectedTime: [{ type: i0.Output }],
            selectedChange: [{ type: i0.Output }],
            changeView: [{ type: i0.Output }]
        };
        return MatClockView;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Animations used by the Material datepicker.
     * @type {?}
     */
    var matDatepickerAnimations = {
        /* Month view slide */
        slideCalendar: animations.trigger('slideCalendar', [
            animations.transition('* => left', [
                animations.animate(180, animations.keyframes([
                    animations.style({ transform: 'translateX(50%)', offset: 0.5, opacity: 0 }),
                    animations.style({ transform: 'translateX(-50%)', offset: 0.51, opacity: 0 }),
                    animations.style({ transform: 'translateX(0)', offset: 1, opacity: 1 })
                ]))
            ]),
            animations.transition('* => right', [
                animations.animate(180, animations.keyframes([
                    animations.style({ transform: 'translateX(-50%)', offset: 0.5, opacity: 0 }),
                    animations.style({ transform: 'translateX(50%)', offset: 0.51, opacity: 0 }),
                    animations.style({ transform: 'translateX(0)', offset: 1, opacity: 1 })
                ]))
            ])
        ]),
        /* Active control */
        controlActive: animations.trigger('controlActive', [
            animations.transition('* => active', [
                animations.animate('0.4s linear', animations.keyframes([
                    animations.style({ transform: 'scale(0.9)' }),
                    animations.style({ transform: 'scale(1.1)' }),
                    animations.style({ transform: 'scale(1)' })
                ]))
            ])
        ]),
        /**
         * Transforms the height of the datepicker's calendar.
         */
        transformPanel: animations.trigger('transformPanel', [
            animations.state('void', animations.style({
                opacity: 0,
                transform: 'scale(1, 0.8)'
            })),
            animations.transition('void => enter', animations.animate('120ms cubic-bezier(0, 0, 0.2, 1)', animations.style({
                opacity: 1,
                transform: 'scale(1, 1)'
            }))),
            animations.transition('* => void', animations.animate('100ms linear', animations.style({ opacity: 0 })))
        ]),
        /**
         * Fades in the content of the calendar.
         */
        fadeInCalendar: animations.trigger('fadeInCalendar', [
            animations.state('void', animations.style({ opacity: 0 })),
            animations.state('enter', animations.style({ opacity: 1 })),
            // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we
            // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.
            animations.transition('void => *', animations.animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))
        ])
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Datepicker data that requires internationalization.
     */
    var MatDatepickerIntl = /** @class */ (function () {
        /** Datepicker data that requires internationalization. */
        function MatDatepickerIntl() {
            /**
             * Stream that emits whenever the labels here are changed. Use this to notify
             * components if the labels have changed after initialization.
             */
            this.changes = new rxjs.Subject();
            /** A label for the calendar popup (used by screen readers). */
            this.calendarLabel = 'Calendar';
            /** A label for the button used to open the calendar popup (used by screen readers). */
            this.openCalendarLabel = 'Open calendar';
            /** A label for the previous month button (used by screen readers). */
            this.prevMonthLabel = 'Previous month';
            /** A label for the next month button (used by screen readers). */
            this.nextMonthLabel = 'Next month';
            /** A label for the previous year button (used by screen readers). */
            this.prevYearLabel = 'Previous year';
            /** A label for the next year button (used by screen readers). */
            this.nextYearLabel = 'Next year';
            /** A label for the 'AM' button (used by screen readers). */
            this.setToAMLabel = 'Set date to AM';
            /** A label for the 'PM' button (used by screen readers). */
            this.setToPMLabel = 'Set date to PM';
            /** A label for the 'switch to minute view' button (used by screen readers). */
            this.switchToMinuteViewLabel = 'Change to minute view';
            /** A label for the 'switch to hour view' button (used by screen readers). */
            this.switchToHourViewLabel = 'Change to hour view';
            /** A label for the 'switch to month view' button (used by screen readers). */
            this.switchToMonthViewLabel = 'Change to month view';
            /** A label for the 'switch to year view' button (used by screen readers). */
            this.switchToYearViewLabel = 'Change to year view';
            /** A label for the 'switch to years view' button (used by screen readers). */
            this.switchToYearsViewLabel = 'Change to years view';
            /** Text for the 'submit' button. */
            this.buttonSubmitText = 'Ok';
            /** A label for the 'submit' button (used by screen readers). */
            this.buttonSubmitLabel = 'Choose the current date';
            /** Text for the 'cancel' button. */
            this.buttonCancelText = 'Cancel';
            /** A label for the 'cancel' button (used by screen readers). */
            this.buttonCancelLabel = 'Cancel the date selection';
        }
        MatDatepickerIntl.decorators = [
            { type: i0.Injectable, args: [{ providedIn: 'root' },] },
        ];
        /** @nocollapse */ MatDatepickerIntl.ngInjectableDef = i0.defineInjectable({ factory: function MatDatepickerIntl_Factory() { return new MatDatepickerIntl(); }, token: MatDatepickerIntl, providedIn: "root" });
        return MatDatepickerIntl;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * An internal class that represents the data corresponding to a single calendar cell.
     * \@docs-private
     */
    var /**
     * An internal class that represents the data corresponding to a single calendar cell.
     * \@docs-private
     */ MatCalendarCell = /** @class */ (function () {
        function MatCalendarCell(value, displayValue, ariaLabel, enabled) {
            this.value = value;
            this.displayValue = displayValue;
            this.ariaLabel = ariaLabel;
            this.enabled = enabled;
        }
        return MatCalendarCell;
    }());
    /**
     * An internal component used to display calendar data in a table.
     * \@docs-private
     */
    var MatCalendarBody = /** @class */ (function () {
        function MatCalendarBody(_elementRef, _ngZone) {
            this._elementRef = _elementRef;
            this._ngZone = _ngZone;
            /** The number of columns in the table. */
            this.numCols = 7;
            /** Whether to allow selection of disabled cells. */
            this.allowDisabledSelection = false;
            /** The cell number of the active cell in the table. */
            this.activeCell = 0;
            /**
             * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be
             * maintained even as the table resizes.
             */
            this.cellAspectRatio = 0.55;
            /** Emits when a new value is selected. */
            this.selectedValueChange = new i0.EventEmitter();
        }
        /**
         * @param {?} cell
         * @return {?}
         */
        MatCalendarBody.prototype._cellClicked = /**
         * @param {?} cell
         * @return {?}
         */
            function (cell) {
                if (!this.allowDisabledSelection && !cell.enabled) {
                    return;
                }
                this.selectedValueChange.emit(cell.value);
            };
        Object.defineProperty(MatCalendarBody.prototype, "_firstRowOffset", {
            /** The number of blank cells to put at the beginning for the first row. */
            get: /**
             * The number of blank cells to put at the beginning for the first row.
             * @return {?}
             */ function () {
                return this.rows && this.rows.length && this.rows[0].length
                    ? this.numCols - this.rows[0].length
                    : 0;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} rowIndex
         * @param {?} colIndex
         * @return {?}
         */
        MatCalendarBody.prototype._isActiveCell = /**
         * @param {?} rowIndex
         * @param {?} colIndex
         * @return {?}
         */
            function (rowIndex, colIndex) {
                /** @type {?} */
                var cellNumber = rowIndex * this.numCols + colIndex;
                // Account for the fact that the first row may not have as many cells.
                if (rowIndex) {
                    cellNumber -= this._firstRowOffset;
                }
                return cellNumber === this.activeCell;
            };
        /** Focuses the active cell after the microtask queue is empty. */
        /**
         * Focuses the active cell after the microtask queue is empty.
         * @return {?}
         */
        MatCalendarBody.prototype._focusActiveCell = /**
         * Focuses the active cell after the microtask queue is empty.
         * @return {?}
         */
            function () {
                var _this = this;
                this._ngZone.runOutsideAngular(function () {
                    _this._ngZone.onStable
                        .asObservable()
                        .pipe(operators.take(1))
                        .subscribe(function () {
                        /** @type {?} */
                        var activeCell = _this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');
                        if (activeCell) {
                            activeCell.focus();
                        }
                    });
                });
            };
        MatCalendarBody.decorators = [
            { type: i0.Component, args: [{
                        selector: '[mat-calendar-body]',
                        template: "<!--\n  If there's not enough space in the first row, create a separate label row. We mark this row as\n  aria-hidden because we don't want it to be read out as one of the weeks in the month.\n-->\n<tr *ngIf=\"label && _firstRowOffset < labelMinRequiredCells\" aria-hidden=\"true\">\n  <td class=\"mat-calendar-body-label\"\n      [attr.colspan]=\"numCols\"\n      [style.paddingTop.%]=\"50 * cellAspectRatio / numCols\"\n      [style.paddingBottom.%]=\"50 * cellAspectRatio / numCols\">\n    {{ label }}\n  </td>\n</tr>\n\n<!-- Create the first row separately so we can include a special spacer cell. -->\n<tr *ngFor=\"let row of rows; let rowIndex = index\" role=\"row\">\n  <!--\n    We mark this cell as aria-hidden so it doesn't get read out as one of the days in the week.\n    The aspect ratio of the table cells is maintained by setting the top and bottom padding as a\n    percentage of the width (a variant of the trick described here:\n    https://www.w3schools.com/howto/howto_css_aspect_ratio.asp).\n  -->\n  <td *ngIf=\"rowIndex === 0 && _firstRowOffset\"\n      aria-hidden=\"true\"\n      class=\"mat-calendar-body-label\"\n      [attr.colspan]=\"_firstRowOffset\"\n      [style.paddingTop.%]=\"50 * cellAspectRatio / numCols\"\n      [style.paddingBottom.%]=\"50 * cellAspectRatio / numCols\">\n    {{ _firstRowOffset >= labelMinRequiredCells ? label : '' }}\n  </td>\n  <td *ngFor=\"let item of row; let colIndex = index\"\n      role=\"gridcell\"\n      class=\"mat-calendar-body-cell\"\n      [tabindex]=\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\"\n      [class.mat-calendar-body-disabled]=\"!item.enabled\"\n      [class.mat-calendar-body-active]=\"_isActiveCell(rowIndex, colIndex)\"\n      [attr.aria-label]=\"item.ariaLabel\"\n      [attr.aria-disabled]=\"!item.enabled || null\"\n      (click)=\"_cellClicked(item)\"\n      [style.width.%]=\"100 / numCols\"\n      [style.paddingTop.%]=\"50 * cellAspectRatio / numCols\"\n      [style.paddingBottom.%]=\"50 * cellAspectRatio / numCols\">\n    <div class=\"mat-calendar-body-cell-background\"\n         [class.mat-calendar-body-selected]=\"selectedValue === item.value\"\n         [class.mat-calendar-body-active]=\"activeValue === item.value\"\n         [class.mat-calendar-body-today]=\"todayValue === item.value\">\n    </div>\n    <span class=\"mat-calendar-body-cell-content\">{{ item.displayValue }}</span>\n  </td>\n</tr>\n",
                        // styleUrls: ['calendar-body.scss'],
                        host: {
                            class: 'mat-calendar-body',
                            role: 'grid',
                            'aria-readonly': 'true'
                        },
                        exportAs: 'matCalendarBody',
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false
                    },] },
        ];
        MatCalendarBody.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.NgZone }
            ];
        };
        MatCalendarBody.propDecorators = {
            label: [{ type: i0.Input }],
            rows: [{ type: i0.Input }],
            todayValue: [{ type: i0.Input }],
            activeValue: [{ type: i0.Input }],
            selectedValue: [{ type: i0.Input }],
            labelMinRequiredCells: [{ type: i0.Input }],
            numCols: [{ type: i0.Input }],
            allowDisabledSelection: [{ type: i0.Input }],
            activeCell: [{ type: i0.Input }],
            cellAspectRatio: [{ type: i0.Input }],
            selectedValueChange: [{ type: i0.Output }]
        };
        return MatCalendarBody;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DAYS_PER_WEEK = 7;
    /**
     * An internal component used to display a single month in the datepicker.
     * \@docs-private
     * @template D
     */
    var MatMonthView = /** @class */ (function () {
        function MatMonthView(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {
            this._changeDetectorRef = _changeDetectorRef;
            this._dateFormats = _dateFormats;
            this._dateAdapter = _dateAdapter;
            this._dir = _dir;
            /** Emits when a new date is selected. */
            this.selectedChange = new i0.EventEmitter();
            /** Emits when any date is selected. */
            this._userSelection = new i0.EventEmitter();
            /** Emits when any date is activated. */
            this.activeDateChange = new i0.EventEmitter();
            if (!this._dateAdapter) {
                throw createMissingDateImplError('DateAdapter');
            }
            if (!this._dateFormats) {
                throw createMissingDateImplError('MAT_DATE_FORMATS');
            }
            /** @type {?} */
            var firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();
            /** @type {?} */
            var narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');
            /** @type {?} */
            var longWeekdays = this._dateAdapter.getDayOfWeekNames('long');
            // Rotate the labels for days of the week based on the configured first day of the week.
            /** @type {?} */
            var weekdays = longWeekdays.map(function (long, i) {
                return { long: long, narrow: narrowWeekdays[i].slice(0, 1) };
            });
            this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));
        }
        Object.defineProperty(MatMonthView.prototype, "activeDate", {
            /**
             * The date to display in this month view (everything other than the month and year is ignored).
             */
            get: /**
             * The date to display in this month view (everything other than the month and year is ignored).
             * @return {?}
             */ function () {
                return this._activeDate;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                /** @type {?} */
                var oldActiveDate = this._activeDate;
                /** @type {?} */
                var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();
                this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
                this._activeValue = this._getDateInCurrentMonth(this.activeDate);
                if (oldActiveDate && !this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {
                    this._init();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatMonthView.prototype, "selected", {
            /** The currently selected date. */
            get: /**
             * The currently selected date.
             * @return {?}
             */ function () {
                return this._selected;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                this._selectedDate = this._getDateInCurrentMonth(this._selected);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatMonthView.prototype, "minDate", {
            /** The minimum selectable date. */
            get: /**
             * The minimum selectable date.
             * @return {?}
             */ function () {
                return this._minDate;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatMonthView.prototype, "maxDate", {
            /** The maximum selectable date. */
            get: /**
             * The maximum selectable date.
             * @return {?}
             */ function () {
                return this._maxDate;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MatMonthView.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this._init();
            };
        /** Handles when a new date is selected. */
        /**
         * Handles when a new date is selected.
         * @param {?} date
         * @return {?}
         */
        MatMonthView.prototype._dateSelected = /**
         * Handles when a new date is selected.
         * @param {?} date
         * @return {?}
         */
            function (date) {
                if (this._selectedDate !== date) {
                    /** @type {?} */
                    var selectedYear = this._dateAdapter.getYear(this.activeDate);
                    /** @type {?} */
                    var selectedMonth = this._dateAdapter.getMonth(this.activeDate);
                    /** @type {?} */
                    var selectedHours = this._dateAdapter.getHours(this.activeDate);
                    /** @type {?} */
                    var selectedMinutes = this._dateAdapter.getMinutes(this.activeDate);
                    /** @type {?} */
                    var selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date, selectedHours, selectedMinutes);
                    this.selectedChange.emit(selectedDate);
                }
                this._userSelection.emit();
            };
        /** Handles keydown events on the calendar body when calendar is in month view. */
        /**
         * Handles keydown events on the calendar body when calendar is in month view.
         * @param {?} event
         * @return {?}
         */
        MatMonthView.prototype._handleCalendarBodyKeydown = /**
         * Handles keydown events on the calendar body when calendar is in month view.
         * @param {?} event
         * @return {?}
         */
            function (event) {
                // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
                // disabled ones from being selected. This may not be ideal, we should look into whether
                // navigation should skip over disabled dates, and if so, how to implement that efficiently.
                // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
                // disabled ones from being selected. This may not be ideal, we should look into whether
                // navigation should skip over disabled dates, and if so, how to implement that efficiently.
                /** @type {?} */
                var oldActiveDate = this._activeDate;
                /** @type {?} */
                var isRtl = this._isRtl();
                switch (event.keyCode) {
                    case keycodes.LEFT_ARROW:
                        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);
                        break;
                    case keycodes.RIGHT_ARROW:
                        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);
                        break;
                    case keycodes.UP_ARROW:
                        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);
                        break;
                    case keycodes.DOWN_ARROW:
                        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);
                        break;
                    case keycodes.HOME:
                        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));
                        break;
                    case keycodes.END:
                        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, this._dateAdapter.getNumDaysInMonth(this._activeDate) - this._dateAdapter.getDate(this._activeDate));
                        break;
                    case keycodes.PAGE_UP:
                        this.activeDate = event.altKey
                            ? this._dateAdapter.addCalendarYears(this._activeDate, -1)
                            : this._dateAdapter.addCalendarMonths(this._activeDate, -1);
                        break;
                    case keycodes.PAGE_DOWN:
                        this.activeDate = event.altKey
                            ? this._dateAdapter.addCalendarYears(this._activeDate, 1)
                            : this._dateAdapter.addCalendarMonths(this._activeDate, 1);
                        break;
                    case keycodes.ENTER:
                    case keycodes.SPACE:
                        if (!this.dateFilter || this.dateFilter(this._activeDate)) {
                            this._dateSelected(this._dateAdapter.getDate(this._activeDate));
                            this._userSelection.emit();
                            // Prevent unexpected default actions such as form submission.
                            event.preventDefault();
                        }
                        return;
                    default:
                        // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                        return;
                }
                if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
                    this.activeDateChange.emit(this.activeDate);
                }
                this._focusActiveCell();
                // Prevent unexpected default actions such as form submission.
                event.preventDefault();
            };
        /** Initializes this month view. */
        /**
         * Initializes this month view.
         * @return {?}
         */
        MatMonthView.prototype._init = /**
         * Initializes this month view.
         * @return {?}
         */
            function () {
                this._activeValue = this._getDateInCurrentMonth(this.activeDate);
                this._selectedDate = this._getDateInCurrentMonth(this.selected);
                this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());
                this._monthLabel = this._dateAdapter
                    .getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)].toLocaleUpperCase();
                /** @type {?} */
                var firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);
                this._firstWeekOffset =
                    (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) - this._dateAdapter.getFirstDayOfWeek()) %
                        DAYS_PER_WEEK;
                this._createWeekCells();
                this._changeDetectorRef.markForCheck();
            };
        /** Focuses the active cell after the microtask queue is empty. */
        /**
         * Focuses the active cell after the microtask queue is empty.
         * @return {?}
         */
        MatMonthView.prototype._focusActiveCell = /**
         * Focuses the active cell after the microtask queue is empty.
         * @return {?}
         */
            function () {
                this._matCalendarBody._focusActiveCell();
            };
        /** Creates MatCalendarCells for the dates in this month. */
        /**
         * Creates MatCalendarCells for the dates in this month.
         * @return {?}
         */
        MatMonthView.prototype._createWeekCells = /**
         * Creates MatCalendarCells for the dates in this month.
         * @return {?}
         */
            function () {
                /** @type {?} */
                var daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);
                /** @type {?} */
                var dateNames = this._dateAdapter.getDateNames();
                this._weeks = [[]];
                for (var i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {
                    if (cell === DAYS_PER_WEEK) {
                        this._weeks.push([]);
                        cell = 0;
                    }
                    /** @type {?} */
                    var date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);
                    /** @type {?} */
                    var enabled = this._shouldEnableDate(date);
                    /** @type {?} */
                    var ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);
                    this._weeks[this._weeks.length - 1].push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));
                }
            };
        /** Date filter for the month */
        /**
         * Date filter for the month
         * @param {?} date
         * @return {?}
         */
        MatMonthView.prototype._shouldEnableDate = /**
         * Date filter for the month
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return (!!date &&
                    (!this.dateFilter || this.dateFilter(date, 'day')) &&
                    (!this.minDate || this._dateAdapter.compareDate(date, this.minDate, 'day') >= 0) &&
                    (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate, 'day') <= 0));
            };
        /**
         * Gets the date in this month that the given Date falls on.
         * Returns null if the given Date is in another month.
         */
        /**
         * Gets the date in this month that the given Date falls on.
         * Returns null if the given Date is in another month.
         * @param {?} date
         * @return {?}
         */
        MatMonthView.prototype._getDateInCurrentMonth = /**
         * Gets the date in this month that the given Date falls on.
         * Returns null if the given Date is in another month.
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return date && this._hasSameMonthAndYear(date, this.activeDate) ? this._dateAdapter.getDate(date) : null;
            };
        /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */
        /**
         * Checks whether the 2 dates are non-null and fall within the same month of the same year.
         * @param {?} d1
         * @param {?} d2
         * @return {?}
         */
        MatMonthView.prototype._hasSameMonthAndYear = /**
         * Checks whether the 2 dates are non-null and fall within the same month of the same year.
         * @param {?} d1
         * @param {?} d2
         * @return {?}
         */
            function (d1, d2) {
                return !!(d1 && d2 && this._dateAdapter.compareDate(d1, d2, 'month') === 0);
            };
        /**
         * @param obj The object to check.
         * @returns The given object if it is both a date instance and valid, otherwise null.
         */
        /**
         * @param {?} obj The object to check.
         * @return {?} The given object if it is both a date instance and valid, otherwise null.
         */
        MatMonthView.prototype._getValidDateOrNull = /**
         * @param {?} obj The object to check.
         * @return {?} The given object if it is both a date instance and valid, otherwise null.
         */
            function (obj) {
                return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;
            };
        /** Determines whether the user has the RTL layout direction. */
        /**
         * Determines whether the user has the RTL layout direction.
         * @return {?}
         */
        MatMonthView.prototype._isRtl = /**
         * Determines whether the user has the RTL layout direction.
         * @return {?}
         */
            function () {
                return this._dir && this._dir.value === 'rtl';
            };
        MatMonthView.decorators = [
            { type: i0.Component, args: [{
                        selector: 'mat-month-view',
                        template: "<table class=\"mat-calendar-table\">\n  <thead class=\"mat-calendar-table-header\">\n    <tr><th *ngFor=\"let day of _weekdays\" [attr.aria-label]=\"day.long\">{{ day.narrow }}</th></tr>\n  </thead>\n  <tbody mat-calendar-body\n    [@slideCalendar]=\"animationDir\"\n    role=\"grid\"\n    [rows]=\"_weeks\"\n    [todayValue]=\"_todayDate\"\n    [activeValue]=\"_activeValue\"\n    [selectedValue]=\"_selectedDate\"\n    [labelMinRequiredCells]=\"3\"\n    [activeCell]=\"_dateAdapter.getDate(activeDate) - 1\"\n    (selectedValueChange)=\"_dateSelected($event)\"\n    (keydown)=\"_handleCalendarBodyKeydown($event)\">\n  </tbody>\n</table>\n",
                        exportAs: 'matMonthView',
                        animations: [matDatepickerAnimations.slideCalendar],
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false
                    },] },
        ];
        MatMonthView.ctorParameters = function () {
            return [
                { type: i0.ChangeDetectorRef },
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [MAT_DATE_FORMATS,] }] },
                { type: DateAdapter, decorators: [{ type: i0.Optional }] },
                { type: bidi.Directionality, decorators: [{ type: i0.Optional }] }
            ];
        };
        MatMonthView.propDecorators = {
            activeDate: [{ type: i0.Input }],
            selected: [{ type: i0.Input }],
            minDate: [{ type: i0.Input }],
            maxDate: [{ type: i0.Input }],
            dateFilter: [{ type: i0.Input }],
            animationDir: [{ type: i0.Input }],
            selectedChange: [{ type: i0.Output }],
            _userSelection: [{ type: i0.Output }],
            activeDateChange: [{ type: i0.Output }],
            _matCalendarBody: [{ type: i0.ViewChild, args: [MatCalendarBody,] }]
        };
        return MatMonthView;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * An internal component used to display a single year in the datepicker.
     * \@docs-private
     * @template D
     */
    var MatYearView = /** @class */ (function () {
        function MatYearView(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {
            this._changeDetectorRef = _changeDetectorRef;
            this._dateFormats = _dateFormats;
            this._dateAdapter = _dateAdapter;
            this._dir = _dir;
            /** Emits when a new month is selected. */
            this.selectedChange = new i0.EventEmitter();
            /** Emits when any date is activated. */
            this.activeDateChange = new i0.EventEmitter();
            if (!this._dateAdapter) {
                throw createMissingDateImplError('DateAdapter');
            }
            if (!this._dateFormats) {
                throw createMissingDateImplError('MAT_DATE_FORMATS');
            }
        }
        Object.defineProperty(MatYearView.prototype, "activeDate", {
            /** The date to display in this year view (everything other than the year is ignored). */
            get: /**
             * The date to display in this year view (everything other than the year is ignored).
             * @return {?}
             */ function () {
                return this._activeDate;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                /** @type {?} */
                var oldActiveDate = this._activeDate;
                /** @type {?} */
                var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();
                this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
                if (oldActiveDate &&
                    this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {
                    this._init();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatYearView.prototype, "selected", {
            /** The currently selected date. */
            get: /**
             * The currently selected date.
             * @return {?}
             */ function () {
                return this._selected;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                this._selectedMonth = this._getMonthInCurrentYear(this._selected);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatYearView.prototype, "minDate", {
            /** The minimum selectable date. */
            get: /**
             * The minimum selectable date.
             * @return {?}
             */ function () {
                return this._minDate;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatYearView.prototype, "maxDate", {
            /** The maximum selectable date. */
            get: /**
             * The maximum selectable date.
             * @return {?}
             */ function () {
                return this._maxDate;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MatYearView.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this._init();
            };
        /** Handles when a new month is selected. */
        /**
         * Handles when a new month is selected.
         * @param {?} month
         * @return {?}
         */
        MatYearView.prototype._monthSelected = /**
         * Handles when a new month is selected.
         * @param {?} month
         * @return {?}
         */
            function (month) {
                /** @type {?} */
                var daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));
                /** @type {?} */
                var selectedYear = this._dateAdapter.getYear(this.activeDate);
                /** @type {?} */
                var selectedDay = this._dateAdapter.getDate(this.activeDate);
                /** @type {?} */
                var selectedHours = this._dateAdapter.getHours(this.activeDate);
                /** @type {?} */
                var selectedMinutes = this._dateAdapter.getMinutes(this.activeDate);
                /** @type {?} */
                var date = this._dateAdapter.createDate(selectedYear, month, Math.min(selectedDay, daysInMonth), selectedHours, selectedMinutes);
                this.selectedChange.emit(date);
            };
        /** Initializes this year view. */
        /**
         * Initializes this year view.
         * @return {?}
         */
        MatYearView.prototype._init = /**
         * Initializes this year view.
         * @return {?}
         */
            function () {
                var _this = this;
                this._selectedMonth = this._getMonthInCurrentYear(this.selected);
                this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());
                this._yearLabel = this._dateAdapter.getYearName(this.activeDate);
                /** @type {?} */
                var monthNames = this._dateAdapter.getMonthNames('short');
                // First row of months only contains 5 elements so we can fit the year label on the same row.
                this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(function (row) {
                    return row.map(function (month) { return _this._createCellForMonth(month, monthNames[month]); });
                });
                this._changeDetectorRef.markForCheck();
            };
        /**
         * Gets the month in this year that the given Date falls on.
         * Returns null if the given Date is in another year.
         */
        /**
         * Gets the month in this year that the given Date falls on.
         * Returns null if the given Date is in another year.
         * @param {?} date
         * @return {?}
         */
        MatYearView.prototype._getMonthInCurrentYear = /**
         * Gets the month in this year that the given Date falls on.
         * Returns null if the given Date is in another year.
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return date && this._dateAdapter.getYear(date) === this._dateAdapter.getYear(this.activeDate)
                    ? this._dateAdapter.getMonth(date)
                    : null;
            };
        /** Creates an MatCalendarCell for the given month. */
        /**
         * Creates an MatCalendarCell for the given month.
         * @param {?} month
         * @param {?} monthName
         * @return {?}
         */
        MatYearView.prototype._createCellForMonth = /**
         * Creates an MatCalendarCell for the given month.
         * @param {?} month
         * @param {?} monthName
         * @return {?}
         */
            function (month, monthName) {
                /** @type {?} */
                var ariaLabel = this._dateAdapter.format(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1), this._dateFormats.display.monthYearA11yLabel);
                return new MatCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));
            };
        /** Whether the given month is enabled. */
        /**
         * Whether the given month is enabled.
         * @param {?} month
         * @return {?}
         */
        MatYearView.prototype._shouldEnableMonth = /**
         * Whether the given month is enabled.
         * @param {?} month
         * @return {?}
         */
            function (month) {
                /** @type {?} */
                var activeYear = this._dateAdapter.getYear(this.activeDate);
                if (month === undefined ||
                    month === null ||
                    this._isYearAndMonthAfterMaxDate(activeYear, month) ||
                    this._isYearAndMonthBeforeMinDate(activeYear, month)) {
                    return false;
                }
                if (!this.dateFilter) {
                    return true;
                }
                /** @type {?} */
                var firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);
                // If any date in the month is enabled count the month as enabled.
                for (var d = firstOfMonth; this._dateAdapter.getMonth(d) == month; d = this._dateAdapter.addCalendarDays(d, 1)) {
                    if (this.dateFilter(d, 'day')) {
                        return true;
                    }
                }
                return false;
            };
        /**
         * Tests whether the combination month/year is after this.maxDate, considering
         * just the month and year of this.maxDate
         */
        /**
         * Tests whether the combination month/year is after this.maxDate, considering
         * just the month and year of this.maxDate
         * @param {?} year
         * @param {?} month
         * @return {?}
         */
        MatYearView.prototype._isYearAndMonthAfterMaxDate = /**
         * Tests whether the combination month/year is after this.maxDate, considering
         * just the month and year of this.maxDate
         * @param {?} year
         * @param {?} month
         * @return {?}
         */
            function (year, month) {
                if (this.maxDate) {
                    /** @type {?} */
                    var maxYear = this._dateAdapter.getYear(this.maxDate);
                    /** @type {?} */
                    var maxMonth = this._dateAdapter.getMonth(this.maxDate);
                    return year > maxYear || (year === maxYear && month > maxMonth);
                }
                return false;
            };
        /**
         * Tests whether the combination month/year is before this.minDate, considering
         * just the month and year of this.minDate
         */
        /**
         * Tests whether the combination month/year is before this.minDate, considering
         * just the month and year of this.minDate
         * @param {?} year
         * @param {?} month
         * @return {?}
         */
        MatYearView.prototype._isYearAndMonthBeforeMinDate = /**
         * Tests whether the combination month/year is before this.minDate, considering
         * just the month and year of this.minDate
         * @param {?} year
         * @param {?} month
         * @return {?}
         */
            function (year, month) {
                if (this.minDate) {
                    /** @type {?} */
                    var minYear = this._dateAdapter.getYear(this.minDate);
                    /** @type {?} */
                    var minMonth = this._dateAdapter.getMonth(this.minDate);
                    return year < minYear || (year === minYear && month < minMonth);
                }
            };
        /** Handles keydown events on the calendar body when calendar is in year view. */
        /**
         * Handles keydown events on the calendar body when calendar is in year view.
         * @param {?} event
         * @return {?}
         */
        MatYearView.prototype._handleCalendarBodyKeydown = /**
         * Handles keydown events on the calendar body when calendar is in year view.
         * @param {?} event
         * @return {?}
         */
            function (event) {
                // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
                // disabled ones from being selected. This may not be ideal, we should look into whether
                // navigation should skip over disabled dates, and if so, how to implement that efficiently.
                // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
                // disabled ones from being selected. This may not be ideal, we should look into whether
                // navigation should skip over disabled dates, and if so, how to implement that efficiently.
                /** @type {?} */
                var oldActiveDate = this._activeDate;
                /** @type {?} */
                var isRtl = this._isRtl();
                switch (event.keyCode) {
                    case keycodes.LEFT_ARROW:
                        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);
                        break;
                    case keycodes.RIGHT_ARROW:
                        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);
                        break;
                    case keycodes.UP_ARROW:
                        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);
                        break;
                    case keycodes.DOWN_ARROW:
                        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);
                        break;
                    case keycodes.HOME:
                        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, this._dateAdapter.getMonth(this._activeDate));
                        break;
                    case keycodes.END:
                        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));
                        break;
                    case keycodes.PAGE_UP:
                        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);
                        break;
                    case keycodes.PAGE_DOWN:
                        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);
                        break;
                    case keycodes.ENTER:
                    case keycodes.SPACE:
                        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));
                        break;
                    default:
                        // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                        return;
                }
                if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
                    this.activeDateChange.emit(this.activeDate);
                }
                this._focusActiveCell();
                // Prevent unexpected default actions such as form submission.
                event.preventDefault();
            };
        /**
         * @return {?}
         */
        MatYearView.prototype._focusActiveCell = /**
         * @return {?}
         */
            function () {
                this._matCalendarBody._focusActiveCell();
            };
        /**
         * @param obj The object to check.
         * @returns The given object if it is both a date instance and valid, otherwise null.
         */
        /**
         * @param {?} obj The object to check.
         * @return {?} The given object if it is both a date instance and valid, otherwise null.
         */
        MatYearView.prototype._getValidDateOrNull = /**
         * @param {?} obj The object to check.
         * @return {?} The given object if it is both a date instance and valid, otherwise null.
         */
            function (obj) {
                return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;
            };
        /** Determines whether the user has the RTL layout direction. */
        /**
         * Determines whether the user has the RTL layout direction.
         * @return {?}
         */
        MatYearView.prototype._isRtl = /**
         * Determines whether the user has the RTL layout direction.
         * @return {?}
         */
            function () {
                return this._dir && this._dir.value === 'rtl';
            };
        MatYearView.decorators = [
            { type: i0.Component, args: [{
                        selector: 'mat-year-view',
                        template: "<table class=\"mat-calendar-table\">\n  <tbody mat-calendar-body\n    [@slideCalendar]=\"animationDir\"\n    role=\"grid\"\n    allowDisabledSelection=\"true\"\n    [rows]=\"_months\"\n    [todayValue]=\"_todayMonth\"\n    [selectedValue]=\"_selectedMonth\"\n    [labelMinRequiredCells]=\"2\"\n    [numCols]=\"4\"\n    [cellAspectRatio]=\"4 / 7\"\n    [activeCell]=\"_dateAdapter.getMonth(activeDate)\"\n    (selectedValueChange)=\"_monthSelected($event)\"\n    (keydown)=\"_handleCalendarBodyKeydown($event)\">\n  </tbody>\n</table>\n",
                        exportAs: 'matYearView',
                        animations: [matDatepickerAnimations.slideCalendar],
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false
                    },] },
        ];
        MatYearView.ctorParameters = function () {
            return [
                { type: i0.ChangeDetectorRef },
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [MAT_DATE_FORMATS,] }] },
                { type: DateAdapter, decorators: [{ type: i0.Optional }] },
                { type: bidi.Directionality, decorators: [{ type: i0.Optional }] }
            ];
        };
        MatYearView.propDecorators = {
            activeDate: [{ type: i0.Input }],
            selected: [{ type: i0.Input }],
            minDate: [{ type: i0.Input }],
            maxDate: [{ type: i0.Input }],
            dateFilter: [{ type: i0.Input }],
            animationDir: [{ type: i0.Input }],
            selectedChange: [{ type: i0.Output }],
            activeDateChange: [{ type: i0.Output }],
            _matCalendarBody: [{ type: i0.ViewChild, args: [MatCalendarBody,] }]
        };
        return MatYearView;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var YEAR_LINE_HEIGHT = 35;
    /** @type {?} */
    var YEAR_SIZE = 40;
    /**
     * An internal component used to display a year selector in the datepicker.
     * \@docs-private
     * @template D
     */
    var MatYearsView = /** @class */ (function () {
        function MatYearsView(_changeDetectorRef, element, _dateAdapter, _dateFormats) {
            this._changeDetectorRef = _changeDetectorRef;
            this.element = element;
            this._dateAdapter = _dateAdapter;
            this._dateFormats = _dateFormats;
            /** Emits when a new month is selected. */
            this.selectedChange = new i0.EventEmitter();
            /** List of years. */
            this._years = [];
            if (!this._dateAdapter) {
                throw createMissingDateImplError('DateAdapter');
            }
            if (!this._dateFormats) {
                throw createMissingDateImplError('MAT_DATE_FORMATS');
            }
        }
        Object.defineProperty(MatYearsView.prototype, "activeDate", {
            /** The date to display in this view (everything other than the year is ignored). */
            get: /**
             * The date to display in this view (everything other than the year is ignored).
             * @return {?}
             */ function () {
                return this._activeDate;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                /** @type {?} */
                var oldActiveDate = this._activeDate;
                /** @type {?} */
                var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();
                this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
                if (oldActiveDate &&
                    this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {
                    this._init();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatYearsView.prototype, "selected", {
            /** The currently selected date. */
            get: /**
             * The currently selected date.
             * @return {?}
             */ function () {
                return this._selected;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                this._selectedYear = this._dateAdapter.getYear(this.selected ? this.selected : this.activeDate);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatYearsView.prototype, "minDate", {
            /** The minimum selectable date. */
            get: /**
             * The minimum selectable date.
             * @return {?}
             */ function () {
                return this._minDate;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatYearsView.prototype, "maxDate", {
            /** The maximum selectable date. */
            get: /**
             * The maximum selectable date.
             * @return {?}
             */ function () {
                return this._maxDate;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MatYearsView.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var lastPosition = { scrolled: 0 };
                this._disposeScroller = rxjs.fromEvent(this.element.nativeElement, 'scroll')
                    .pipe(operators.sampleTime(300), operators.mergeMap(function (ev) { return rxjs.of(_this._calculatePoints()); }))
                    .subscribe(function (pos) { return _this._handleScroll(pos, lastPosition); });
                this._init();
            };
        /**
         * @return {?}
         */
        MatYearsView.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this._disposeScroller.unsubscribe();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        MatYearsView.prototype.abs = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return Math.abs(value);
            };
        /** Initializes this year view. */
        /**
         * Initializes this year view.
         * @return {?}
         */
        MatYearsView.prototype._init = /**
         * Initializes this year view.
         * @return {?}
         */
            function () {
                var _this = this;
                this._selectedYear = this._dateAdapter.getYear(this.selected ? this.selected : this.activeDate);
                /** @type {?} */
                var date = this._dateAdapter.createDate(this._selectedYear, this._dateAdapter.getMonth(this.activeDate), this._dateAdapter.getDate(this.activeDate), this._dateAdapter.getHours(this.activeDate), this._dateAdapter.getMinutes(this.activeDate));
                this._years = [
                    {
                        value: this._selectedYear,
                        enabled: !this.dateFilter || this.dateFilter(date, 'minute')
                    }
                ];
                this._populateYears();
                setTimeout(function () {
                    _this.element.nativeElement.scrollTop -=
                        _this.element.nativeElement.offsetHeight / 2 - YEAR_LINE_HEIGHT / 2;
                }, 20);
            };
        /**
         * @param {?=} down
         * @return {?}
         */
        MatYearsView.prototype._populateYears = /**
         * @param {?=} down
         * @return {?}
         */
            function (down) {
                var _this = this;
                if (down === void 0) {
                    down = false;
                }
                if ((!down && !this._years[0].enabled) ||
                    (down && !this._years[this._years.length - 1].enabled)) {
                    return;
                }
                /** @type {?} */
                var selectedMonth = this._dateAdapter.getMonth(this.activeDate);
                /** @type {?} */
                var selectedDay = this._dateAdapter.getDate(this.activeDate);
                /** @type {?} */
                var selectedHours = this._dateAdapter.getHours(this.activeDate);
                /** @type {?} */
                var selectedMinutes = this._dateAdapter.getMinutes(this.activeDate);
                /** @type {?} */
                var scroll = 0;
                for (var y = 1; y <= YEAR_SIZE / 2; y++) {
                    /** @type {?} */
                    var year = this._years[this._years.length - 1].value;
                    /** @type {?} */
                    var date = this._dateAdapter.createDate(year + 1, selectedMonth, selectedDay, selectedHours, selectedMinutes);
                    this._years.push({
                        value: year + 1,
                        enabled: !this.dateFilter || this.dateFilter(date, 'minute')
                    });
                    year = this._years[0].value;
                    date = this._dateAdapter.createDate(year - 1, selectedMonth, selectedDay, selectedHours, selectedMinutes);
                    this._years.unshift({
                        value: year - 1,
                        enabled: !this.dateFilter || this.dateFilter(date, 'minute')
                    });
                    scroll += YEAR_LINE_HEIGHT;
                }
                setTimeout(function () {
                    _this.element.nativeElement.scrollTop += down ? YEAR_LINE_HEIGHT : scroll;
                }, 10);
                this._changeDetectorRef.markForCheck();
            };
        /**
         * @param {?} year
         * @return {?}
         */
        MatYearsView.prototype._yearSelected = /**
         * @param {?} year
         * @return {?}
         */
            function (year) {
                /** @type {?} */
                var selectedMonth = this._dateAdapter.getMonth(this.activeDate);
                /** @type {?} */
                var selectedDay = this._dateAdapter.getDate(this.activeDate);
                /** @type {?} */
                var selectedHours = this._dateAdapter.getHours(this.activeDate);
                /** @type {?} */
                var selectedMinutes = this._dateAdapter.getMinutes(this.activeDate);
                this.selectedChange.emit(this._dateAdapter.createDate(year, selectedMonth, selectedDay, selectedHours, selectedMinutes));
            };
        /**
         * @return {?}
         */
        MatYearsView.prototype._calculatePoints = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var el = this.element.nativeElement;
                return {
                    height: el.offsetHeight,
                    scrolled: el.scrollTop,
                    total: el.scrollHeight
                };
            };
        /**
         * @param {?} position
         * @param {?} lastPosition
         * @return {?}
         */
        MatYearsView.prototype._handleScroll = /**
         * @param {?} position
         * @param {?} lastPosition
         * @return {?}
         */
            function (position, lastPosition) {
                if (position.scrolled === 0 && lastPosition.scrolled > 0) {
                    this._populateYears(false);
                }
                else if (position.height + position.scrolled === position.total) {
                    this._populateYears(true);
                }
                lastPosition.scrolled = position.scrolled;
            };
        /** Handles keydown events on the calendar body when calendar is in multi-year view. */
        /**
         * Handles keydown events on the calendar body when calendar is in multi-year view.
         * @param {?} event
         * @return {?}
         */
        MatYearsView.prototype._handleCalendarBodyKeydown = /**
         * Handles keydown events on the calendar body when calendar is in multi-year view.
         * @param {?} event
         * @return {?}
         */
            function (event) {
                // TODO handle @angular/cdk/keycode
                switch (event.keyCode) {
                    case keycodes.UP_ARROW:
                        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);
                        break;
                    case keycodes.DOWN_ARROW:
                        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);
                        break;
                    case keycodes.ENTER:
                        this._yearSelected(this._dateAdapter.getYear(this._activeDate));
                        break;
                    default:
                        // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                        return;
                }
                this._focusActiveCell();
                // Prevent unexpected default actions such as form submission.
                event.preventDefault();
            };
        /**
         * @return {?}
         */
        MatYearsView.prototype._focusActiveCell = /**
         * @return {?}
         */
            function () { };
        /**
         * @param obj The object to check.
         * @returns The given object if it is both a date instance and valid, otherwise null.
         */
        /**
         * @param {?} obj The object to check.
         * @return {?} The given object if it is both a date instance and valid, otherwise null.
         */
        MatYearsView.prototype._getValidDateOrNull = /**
         * @param {?} obj The object to check.
         * @return {?} The given object if it is both a date instance and valid, otherwise null.
         */
            function (obj) {
                return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;
            };
        MatYearsView.decorators = [
            { type: i0.Component, args: [{
                        selector: 'mat-years-view',
                        template: "<div class=\"mat-calendar-years\" (keydown)=\"_handleCalendarBodyKeydown($event)\">\n  <span *ngFor=\"let year of _years\"\n  [class]=\"'mat-calendar-years-item mat-calendar-years-item-diff' + abs(year.value - _selectedYear)\"\n  [class.mat-calendar-years-item-active]=\"year.value === _selectedYear\"\n  [class.mat-calendar-years-item-disabled]=\"!year.enabled\"\n  (click)=\"year.enabled ? _yearSelected(year.value) : null\">\n    {{ year.value }}\n  </span>\n</div>\n",
                        exportAs: 'matYearsView',
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false
                    },] },
        ];
        MatYearsView.ctorParameters = function () {
            return [
                { type: i0.ChangeDetectorRef },
                { type: i0.ElementRef },
                { type: DateAdapter, decorators: [{ type: i0.Optional }] },
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [MAT_DATE_FORMATS,] }] }
            ];
        };
        MatYearsView.propDecorators = {
            activeDate: [{ type: i0.Input }],
            selected: [{ type: i0.Input }],
            minDate: [{ type: i0.Input }],
            maxDate: [{ type: i0.Input }],
            dateFilter: [{ type: i0.Input }],
            selectedChange: [{ type: i0.Output }]
        };
        return MatYearsView;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * A calendar that is used as part of the datepicker.
     * \@docs-private
     * @template D
     */
    var MatCalendar = /** @class */ (function () {
        function MatCalendar(_intl, _dateAdapter, _dateFormats, _changeDetectorRef) {
            var _this = this;
            this._intl = _intl;
            this._dateAdapter = _dateAdapter;
            this._dateFormats = _dateFormats;
            this._changeDetectorRef = _changeDetectorRef;
            /**
             * Used for scheduling that focus should be moved to the active cell on the next tick.
             * We need to schedule it, rather than do it immediately, because we have to wait
             * for Angular to re-evaluate the view children.
             */
            this._moveFocusOnNextTick = false;
            /** The type of value handled by the calendar. */
            this.type = 'date';
            /** Which view the calendar should be started in. */
            this.startView = 'month';
            /** Clock interval */
            this.clockStep = 1;
            /** Clock hour format */
            this.twelveHour = false;
            /** Emits when the currently selected date changes. */
            this.selectedChange = new i0.EventEmitter();
            /** Emits when any date is selected. */
            this._userSelection = new i0.EventEmitter();
            /** Date filter for the month and year views. */
            this._dateFilterForViews = function (date, unit) {
                if (unit === void 0) {
                    unit = 'minute';
                }
                return (!!date &&
                    (!_this.dateFilter || _this.dateFilter(date)) &&
                    (!_this.minDate || _this._dateAdapter.compareDate(date, _this.minDate, unit) >= 0) &&
                    (!_this.maxDate || _this._dateAdapter.compareDate(date, _this.maxDate, unit) <= 0));
            };
            /**
             * Emits whenever there is a state change that the header may need to respond to.
             */
            this.stateChanges = new rxjs.Subject();
            /** Whether the calendar is in hour view. */
            this._hourView = true;
            if (!this._dateAdapter) {
                throw createMissingDateImplError('DateAdapter');
            }
            if (!this._dateFormats) {
                throw createMissingDateImplError('MAT_DATE_FORMATS');
            }
            this._intlChanges = _intl.changes.subscribe(function () {
                _changeDetectorRef.markForCheck();
                _this.stateChanges.next();
            });
        }
        Object.defineProperty(MatCalendar.prototype, "startAt", {
            /** A date representing the period (month or year) to start the calendar in. */
            get: /**
             * A date representing the period (month or year) to start the calendar in.
             * @return {?}
             */ function () {
                return this._startAt;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatCalendar.prototype, "selected", {
            /** The currently selected date. */
            get: /**
             * The currently selected date.
             * @return {?}
             */ function () {
                return this._selected;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                if (this._selected) {
                    this.activeDate = this._selected;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatCalendar.prototype, "minDate", {
            /** The minimum selectable date. */
            get: /**
             * The minimum selectable date.
             * @return {?}
             */ function () {
                return this._minDate;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatCalendar.prototype, "maxDate", {
            /** The maximum selectable date. */
            get: /**
             * The maximum selectable date.
             * @return {?}
             */ function () {
                return this._maxDate;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatCalendar.prototype, "activeDate", {
            /**
             * The current active date. This determines which time period is shown and which date is
             * highlighted when using keyboard navigation.
             */
            get: /**
             * The current active date. This determines which time period is shown and which date is
             * highlighted when using keyboard navigation.
             * @return {?}
             */ function () {
                return this._clampedActiveDate;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                /** @type {?} */
                var oldActiveDate = this._clampedActiveDate;
                this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);
                this._isAm = this._dateAdapter.getHours(this._clampedActiveDate) < 12;
                /** @type {?} */
                var unit = this.view === 'year' ? 'year' : 'month';
                /** @type {?} */
                var diff = this._dateAdapter.compareDate(oldActiveDate, this._clampedActiveDate, unit);
                if (diff) {
                    this._animationDir = diff > 0 ? 'left' : 'right';
                }
                // update the labels
                /** @type {?} */
                var day = this._dateAdapter.getDayOfWeek(this.activeDate);
                /** @type {?} */
                var hours = this._dateAdapter.getHours(this.activeDate);
                if (this.twelveHour) {
                    hours = hours === 0 ? 12 : hours > 12 ? hours - 12 : hours;
                }
                /** @type {?} */
                var minutes = this._dateAdapter.getMinutes(this.activeDate);
                switch (this.view) {
                    case 'year':
                        this._periodButtonText = this._dateAdapter.getYearName(this.activeDate);
                        break;
                    default:
                        this._periodButtonText = this._dateAdapter.format(this.activeDate, this._dateFormats.display.monthYearLabel);
                }
                this._yearButtonText = this._dateAdapter.getYear(this.activeDate).toString();
                this._monthdayButtonText = this._dateAdapter.format(this.activeDate, this._dateFormats.display.monthDayLabel);
                this._dayButtonText = this._dateAdapter.getDayOfWeekNames('short')[day];
                this._hourButtonText = hours.toString();
                this._minuteButtonText = ('00' + minutes).slice(-2);
                this.stateChanges.next();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatCalendar.prototype, "currentView", {
            /** Whether the calendar is in month view. */
            get: /**
             * Whether the calendar is in month view.
             * @return {?}
             */ function () {
                return this._currentView;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._currentView = value;
                this._moveFocusOnNextTick = true;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MatCalendar.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.activeDate = this.startAt || this._dateAdapter.today();
                this.changeView(this.startView, false);
            };
        /**
         * @return {?}
         */
        MatCalendar.prototype.ngAfterViewChecked = /**
         * @return {?}
         */
            function () {
                if (this._moveFocusOnNextTick) {
                    this._moveFocusOnNextTick = false;
                    this.focusActiveCell();
                }
            };
        /**
         * @return {?}
         */
        MatCalendar.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this._intlChanges.unsubscribe();
                this.stateChanges.complete();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        MatCalendar.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                this._hasTime = this.type.indexOf('time') >= 0;
                /** @type {?} */
                var change = changes.selected || changes.minDate || changes.maxDate || changes.dateFilter;
                if (change && !change.firstChange) {
                    /** @type {?} */
                    var view = this._getCurrentViewComponent();
                    if (view) {
                        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are
                        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.
                        this._changeDetectorRef.detectChanges();
                        view._init();
                    }
                }
                this.stateChanges.next();
            };
        /**
         * @param {?} view
         * @param {?=} focus
         * @return {?}
         */
        MatCalendar.prototype.changeView = /**
         * @param {?} view
         * @param {?=} focus
         * @return {?}
         */
            function (view, focus) {
                if (focus === void 0) {
                    focus = true;
                }
                switch (view) {
                    case 'year':
                        this._periodButtonText = this._dateAdapter.getYearName(this.activeDate);
                        this._periodButtonLabel = this._intl.switchToYearsViewLabel;
                        this._nextButtonLabel = this._intl.nextYearLabel;
                        this._prevButtonLabel = this._intl.prevYearLabel;
                        break;
                    case 'month':
                        this._periodButtonText = this._dateAdapter.format(this.activeDate, this._dateFormats.display.monthYearLabel);
                        this._periodButtonLabel = this._intl.switchToYearViewLabel;
                        this._nextButtonLabel = this._intl.nextMonthLabel;
                        this._prevButtonLabel = this._intl.prevMonthLabel;
                }
                this.view = view;
                if (focus) {
                    this._moveFocusOnNextTick = true;
                }
            };
        /**
         * @return {?}
         */
        MatCalendar.prototype.focusActiveCell = /**
         * @return {?}
         */
            function () {
                this._getCurrentViewComponent()._focusActiveCell();
            };
        /**
         * @return {?}
         */
        MatCalendar.prototype._submitClicked = /**
         * @return {?}
         */
            function () {
                this.selectedChange.emit(this.activeDate);
                this._userSelection.emit();
            };
        /**
         * @return {?}
         */
        MatCalendar.prototype._cancelClicked = /**
         * @return {?}
         */
            function () {
                this._userSelection.emit();
            };
        /** Handles date selection in the clock view. */
        /**
         * Handles date selection in the clock view.
         * @param {?} date
         * @return {?}
         */
        MatCalendar.prototype._timeChanged = /**
         * Handles date selection in the clock view.
         * @param {?} date
         * @return {?}
         */
            function (date) {
                this.selected = date;
            };
        /**
         * @param {?} date
         * @return {?}
         */
        MatCalendar.prototype._timeSelected = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                // if (this.autoOk && this.type === 'time') {
                //   this.selectedChange.emit(date);
                //   this._userSelection.emit();
                // }
                this.selected = date;
            };
        /** Handles date selection in the month view. */
        /**
         * Handles date selection in the month view.
         * @param {?} date
         * @return {?}
         */
        MatCalendar.prototype._dateSelected = /**
         * Handles date selection in the month view.
         * @param {?} date
         * @return {?}
         */
            function (date) {
                this.selected = date;
                if (this._hasTime) {
                    this.changeView('clock');
                }
            };
        /** Handles month selection in the year view. */
        /**
         * Handles month selection in the year view.
         * @param {?} month
         * @return {?}
         */
        MatCalendar.prototype._monthSelected = /**
         * Handles month selection in the year view.
         * @param {?} month
         * @return {?}
         */
            function (month) {
                this.selected = month;
                this.changeView('month');
            };
        /**
         * @param {?} year
         * @return {?}
         */
        MatCalendar.prototype._yearSelected = /**
         * @param {?} year
         * @return {?}
         */
            function (year) {
                this.selected = year;
                this.changeView('year');
            };
        /** Handles user clicks on the period label. */
        /**
         * Handles user clicks on the period label.
         * @return {?}
         */
        MatCalendar.prototype._currentPeriodClicked = /**
         * Handles user clicks on the period label.
         * @return {?}
         */
            function () {
                this.changeView(this.view === 'month' ? 'year' : 'years');
            };
        /** Handles user clicks on the previous button. */
        /**
         * Handles user clicks on the previous button.
         * @return {?}
         */
        MatCalendar.prototype._previousClicked = /**
         * Handles user clicks on the previous button.
         * @return {?}
         */
            function () {
                this._navCalendar(-1);
            };
        /** Handles user clicks on the next button. */
        /**
         * Handles user clicks on the next button.
         * @return {?}
         */
        MatCalendar.prototype._nextClicked = /**
         * Handles user clicks on the next button.
         * @return {?}
         */
            function () {
                this._navCalendar(1);
            };
        /** Handles user clicks on the time labels. */
        /**
         * Handles user clicks on the time labels.
         * @return {?}
         */
        MatCalendar.prototype._showHourView = /**
         * Handles user clicks on the time labels.
         * @return {?}
         */
            function () {
                if (this._hasTime) {
                    this._hourView = true;
                    this.changeView('clock');
                }
            };
        /**
         * @return {?}
         */
        MatCalendar.prototype._showMinuteView = /**
         * @return {?}
         */
            function () {
                this._hourView = false;
                this.changeView('clock');
            };
        /**
         * @param {?} am
         * @return {?}
         */
        MatCalendar.prototype._toggleAmPm = /**
         * @param {?} am
         * @return {?}
         */
            function (am) {
                if (this._isAm !== am) {
                    /** @type {?} */
                    var date = this._dateAdapter.addCalendarHours(this.activeDate, this._isAm ? 12 : -12);
                    if (this._dateFilterForViews(date, 'minute')) {
                        this.selected = date;
                    }
                }
            };
        /** Whether the previous period button is enabled. */
        /**
         * Whether the previous period button is enabled.
         * @return {?}
         */
        MatCalendar.prototype._previousEnabled = /**
         * Whether the previous period button is enabled.
         * @return {?}
         */
            function () {
                if (!this.minDate) {
                    return true;
                }
                return !this.minDate || !this._isSameView(this.activeDate, this.minDate);
            };
        /** Whether the next period button is enabled. */
        /**
         * Whether the next period button is enabled.
         * @return {?}
         */
        MatCalendar.prototype._nextEnabled = /**
         * Whether the next period button is enabled.
         * @return {?}
         */
            function () {
                return !this.maxDate || !this._isSameView(this.activeDate, this.maxDate);
            };
        /** Handles calendar diffs. */
        /**
         * Handles calendar diffs.
         * @param {?} diff
         * @return {?}
         */
        MatCalendar.prototype._navCalendar = /**
         * Handles calendar diffs.
         * @param {?} diff
         * @return {?}
         */
            function (diff) {
                switch (this.view) {
                    case 'year':
                        this.activeDate = this._dateAdapter.addCalendarYears(this.activeDate, diff);
                        break;
                    case 'month':
                        this.activeDate = this._dateAdapter.addCalendarMonths(this.activeDate, diff);
                        break;
                    case 'clock':
                        this.activeDate = this._hourView
                            ? this._dateAdapter.addCalendarHours(this.activeDate, diff)
                            : this._dateAdapter.addCalendarMinutes(this.activeDate, diff);
                        break;
                }
            };
        /** Whether the two dates represent the same view in the current view mode (month or year). */
        /**
         * Whether the two dates represent the same view in the current view mode (month or year).
         * @param {?} date1
         * @param {?} date2
         * @return {?}
         */
        MatCalendar.prototype._isSameView = /**
         * Whether the two dates represent the same view in the current view mode (month or year).
         * @param {?} date1
         * @param {?} date2
         * @return {?}
         */
            function (date1, date2) {
                switch (this.view) {
                    case 'year':
                        return this._dateAdapter.getYear(date1) === this._dateAdapter.getYear(date2);
                    case 'month':
                        /** @type {?} */
                        var monthYear = this._dateFormats.display.monthYearLabel;
                        return (this._dateAdapter.format(date1, monthYear) === this._dateAdapter.format(date2, monthYear));
                    case 'clock':
                    default:
                        /** @type {?} */
                        var hourMinute = this._dateFormats.display.timeLabel;
                        return (this._dateAdapter.format(date1, hourMinute) ===
                            this._dateAdapter.format(date2, hourMinute));
                }
            };
        /**
         * @param obj The object to check.
         * @returns The given object if it is both a date instance and valid, otherwise null.
         */
        /**
         * @param {?} obj The object to check.
         * @return {?} The given object if it is both a date instance and valid, otherwise null.
         */
        MatCalendar.prototype._getValidDateOrNull = /**
         * @param {?} obj The object to check.
         * @return {?} The given object if it is both a date instance and valid, otherwise null.
         */
            function (obj) {
                return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;
            };
        /** Returns the component instance that corresponds to the current calendar view. */
        /**
         * Returns the component instance that corresponds to the current calendar view.
         * @return {?}
         */
        MatCalendar.prototype._getCurrentViewComponent = /**
         * Returns the component instance that corresponds to the current calendar view.
         * @return {?}
         */
            function () {
                return this.clockView || this.monthView || this.yearView || this.yearsView;
            };
        MatCalendar.decorators = [
            { type: i0.Component, args: [{
                        selector: 'mat-calendar',
                        template: "<div [class]=\"'mat-calendar-header mat-calendar-type-' + type\">\n\n  <div class=\"mat-calendar-header-date\">\n    <button class=\"mat-calendar-header-date-year mat-calendar-control\"\n    [class.mat-calendar-control-active]=\"view == 'years'\"\n    [@controlActive]=\"view == 'years' ? 'active' : ''\"\n    [attr.aria-label]=\"_intl.switchToYearViewLabel\"\n    (click)=\"changeView('years')\">\n      {{ _yearButtonText }}\n    </button>\n\n    <button class=\"mat-calendar-header-date-month mat-calendar-control\"\n    [class.mat-calendar-control-active]=\"view == 'month' || view == 'year'\"\n    [@controlActive]=\"view == 'month' || view == 'year' ? 'active' : ''\"\n    [attr.aria-label]=\"_intl.switchToMonthViewLabel\"\n    (click)=\"changeView('month')\">\n      <span class=\"mat-calendar-header-date-dayname\">{{ _dayButtonText }}, </span>\n      <span class=\"mat-calendar-header-date-monthday\">{{ _monthdayButtonText }}</span>\n    </button>\n  </div>\n\n  <div class=\"mat-calendar-header-time\">\n    <div class=\"mat-calendar-header-time-hour\">\n      <button class=\"mat-calendar-control\"\n      [class.mat-calendar-control-active]=\"view == 'clock' && _hourView\"\n      [@controlActive]=\"view == 'clock' && _hourView ? 'active' : ''\"\n      [attr.aria-label]=\"_intl.switchToHourViewLabel\"\n      (click)=\"_showHourView()\">\n        {{ _hourButtonText }}\n      </button>\n      <span>:</span>\n      <button class=\"mat-calendar-control\"\n      [class.mat-calendar-control-active]=\"view == 'clock' && !_hourView\"\n      [@controlActive]=\"view == 'clock' && !_hourView ? 'active' : ''\"\n      [attr.aria-label]=\"_intl.switchToMinuteViewLabel\"\n      (click)=\"_showMinuteView()\">\n        {{ _minuteButtonText }}\n      </button>\n    </div>\n    <div class=\"mat-calendar-header-time-ampm\" *ngIf=\"twelveHour\">\n      <button class=\"mat-calendar-control\"\n      [class.mat-calendar-control-active]=\"_isAm\"\n      [@controlActive]=\"_isAm ? 'active' : ''\"\n      [attr.aria-label]=\"_intl.setToAMLabel\"\n      (click)=\"_toggleAmPm(true)\">\n        AM\n      </button>\n      <button class=\"mat-calendar-control\"\n      [class.mat-calendar-control-active]=\"!_isAm\"\n      [@controlActive]=\"!_isAm ? 'active' : ''\"\n      [attr.aria-label]=\"_intl.setToPMLabel\"\n      (click)=\"_toggleAmPm(false)\">\n        PM\n      </button>\n    </div>\n  </div>\n</div>\n\n<div [class]=\"'mat-calendar-content mat-calendar-view-' + view\">\n\n  <div class=\"mat-calendar-heading\" *ngIf=\"view === 'month' || view === 'year'\">\n    <button mat-icon-button class=\"mat-calendar-previous-button\"\n      (click)=\"_previousClicked()\" [attr.disabled]=\"!_previousEnabled() ? '' : null\"\n      [attr.aria-label]=\"_prevButtonLabel\">\n    </button>\n\n    <button class=\"mat-calendar-heading-period mat-calendar-control mat-calendar-control-active\"\n    [@slideCalendar]=\"_animationDir\" (@slideCalendar.done)=\"_animationDir = ''\"\n    (click)=\"_currentPeriodClicked()\"\n    [attr.aria-label]=\"_periodButtonLabel\">\n      <strong>{{ _periodButtonText }}</strong>\n    </button>\n\n    <button mat-icon-button class=\"mat-calendar-next-button\"\n      (click)=\"_nextClicked()\" [attr.disabled]=\"!_nextEnabled() ? '' : null\"\n      [attr.aria-label]=\"_nextButtonLabel\">\n    </button>\n  </div>\n\n  <div class=\"mat-calendar-main\" [ngSwitch]=\"view\" cdkMonitorSubtreeFocus tabindex=\"-1\">\n\n    <mat-clock-view\n      *ngSwitchCase=\"'clock'\"\n      [(activeDate)]=\"activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"_dateFilterForViews\"\n      [clockStep]=\"clockStep\"\n      [twelveHour]=\"twelveHour\"\n      [hourView]=\"_hourView\"\n      (selectedTime)=\"_timeSelected($event)\"\n      (selectedChange)=\"_timeChanged($event)\"\n      (changeView)=\"_hourView = !_hourView\">\n    </mat-clock-view>\n\n    <mat-month-view\n      *ngSwitchCase=\"'month'\"\n      [(activeDate)]=\"activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"_dateFilterForViews\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      [animationDir]=\"_animationDir\"\n      (selectedChange)=\"_dateSelected($event)\"\n      (_userSelection)=\"_showHourView()\">\n    </mat-month-view>\n\n    <mat-year-view\n      *ngSwitchCase=\"'year'\"\n      [(activeDate)]=\"activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"_dateFilterForViews\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      [animationDir]=\"_animationDir\"\n      (selectedChange)=\"_monthSelected($event)\">\n    </mat-year-view>\n\n    <mat-years-view\n      *ngSwitchCase=\"'years'\"\n      [(activeDate)]=\"activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"_dateFilterForViews\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      (selectedChange)=\"_yearSelected($event)\">\n    </mat-years-view>\n  </div>\n\n  <div class=\"mat-calendar-footer\">\n    <button mat-button\n    (click)=\"_cancelClicked()\"\n    [attr.aria-label]=\"_intl.buttonCancelLabel\">\n      {{ _intl.buttonCancelText }}\n    </button>\n\n    <button mat-button\n    (click)=\"_submitClicked()\"\n    [attr.aria-label]=\"_intl.buttonSubmitLabel\">\n      {{ _intl.buttonSubmitText }}\n    </button>\n  </div>\n</div>\n",
                        // styleUrls: ['calendar.css'],
                        host: {
                            class: 'mat-calendar'
                        },
                        animations: [matDatepickerAnimations.controlActive, matDatepickerAnimations.slideCalendar],
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false
                    },] },
        ];
        MatCalendar.ctorParameters = function () {
            return [
                { type: MatDatepickerIntl },
                { type: DateAdapter, decorators: [{ type: i0.Optional }] },
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [MAT_DATE_FORMATS,] }] },
                { type: i0.ChangeDetectorRef }
            ];
        };
        MatCalendar.propDecorators = {
            startAt: [{ type: i0.Input }],
            type: [{ type: i0.Input }],
            startView: [{ type: i0.Input }],
            selected: [{ type: i0.Input }],
            minDate: [{ type: i0.Input }],
            maxDate: [{ type: i0.Input }],
            dateFilter: [{ type: i0.Input }],
            clockStep: [{ type: i0.Input }],
            twelveHour: [{ type: i0.Input }],
            selectedChange: [{ type: i0.Output }],
            _userSelection: [{ type: i0.Output }],
            clockView: [{ type: i0.ViewChild, args: [MatClockView,] }],
            monthView: [{ type: i0.ViewChild, args: [MatMonthView,] }],
            yearView: [{ type: i0.ViewChild, args: [MatYearView,] }],
            yearsView: [{ type: i0.ViewChild, args: [MatYearsView,] }]
        };
        return MatCalendar;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Used to generate a unique ID for each datepicker instance.
     * @type {?}
     */
    var datepickerUid = 0;
    /**
     * Injection token that determines the scroll handling while the calendar is open.
     * @type {?}
     */
    var MAT_DATEPICKER_SCROLL_STRATEGY = new i0.InjectionToken('mat-datepicker-scroll-strategy');
    /**
     * \@docs-private
     * @param {?} overlay
     * @return {?}
     */
    function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay$$1) {
        return function () { return overlay$$1.scrollStrategies.reposition(); };
    }
    /**
     * \@docs-private
     * @type {?}
     */
    var MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {
        provide: MAT_DATEPICKER_SCROLL_STRATEGY,
        deps: [overlay.Overlay],
        useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY
    };
    /**
     * Component used as the content for the datepicker dialog and popup. We use this instead of using
     * MatCalendar directly as the content so we can control the initial focus. This also gives us a
     * place to put additional features of the popup that are not part of the calendar itself in the
     * future. (e.g. confirmation buttons).
     * \@docs-private
     * @template D
     */
    var MatDatepickerContent = /** @class */ (function () {
        /**
         * Component used as the content for the datepicker dialog and popup. We use this instead of using
         * MatCalendar directly as the content so we can control the initial focus. This also gives us a
         * place to put additional features of the popup that are not part of the calendar itself in the
         * future. (e.g. confirmation buttons).
         * @docs-private
         */
        function MatDatepickerContent() {
        }
        /**
         * @return {?}
         */
        MatDatepickerContent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this._calendar.focusActiveCell();
            };
        /**
         * Handles keydown event on datepicker content.
         * @param event The event.
         */
        /**
         * Handles keydown event on datepicker content.
         * @param {?} event The event.
         * @return {?}
         */
        MatDatepickerContent.prototype._handleKeydown = /**
         * Handles keydown event on datepicker content.
         * @param {?} event The event.
         * @return {?}
         */
            function (event) {
                if (event.keyCode === keycodes.ESCAPE) {
                    this.datepicker.close();
                    event.preventDefault();
                    event.stopPropagation();
                }
            };
        MatDatepickerContent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'mat-datepicker-content',
                        template: "<mat-calendar cdkTrapFocus\n    [id]=\"datepicker.id\"\n    [ngClass]=\"datepicker.panelClass\"\n    [type]=\"datepicker.type\"\n    [startAt]=\"datepicker.startAt\"\n    [startView]=\"datepicker.startView\"\n    [clockStep]=\"datepicker.clockStep\"\n    [twelveHour]=\"datepicker.twelveHour\"\n    [minDate]=\"datepicker._minDate\"\n    [maxDate]=\"datepicker._maxDate\"\n    [dateFilter]=\"datepicker._dateFilter\"\n    [selected]=\"datepicker._selected\"\n    (selectedChange)=\"datepicker.select($event)\"\n    (_userSelection)=\"datepicker.close()\">\n</mat-calendar>\n",
                        // styleUrls: ['datepicker-content.scss'],
                        host: {
                            class: 'mat-datepicker-content',
                            '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',
                            '(keydown)': '_handleKeydown($event)'
                        },
                        animations: [matDatepickerAnimations.transformPanel, matDatepickerAnimations.fadeInCalendar],
                        exportAs: 'matDatepickerContent',
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false
                    },] },
        ];
        MatDatepickerContent.propDecorators = {
            _calendar: [{ type: i0.ViewChild, args: [MatCalendar,] }]
        };
        return MatDatepickerContent;
    }());
    // TODO(mmalerba): We use a component instead of a directive here so the user can use implicit
    // template reference variables (e.g. #d vs #d="matDatepicker"). We can change this to a directive
    // if angular adds support for `exportAs: '$implicit'` on directives.
    /**
     * Component responsible for managing the datepicker popup/dialog.
     * @template D
     */
    var MatDatepicker = /** @class */ (function () {
        function MatDatepicker(_dialog, _overlay, _ngZone, _viewContainerRef, _scrollStrategy, _dateAdapter, _dir, _document) {
            this._dialog = _dialog;
            this._overlay = _overlay;
            this._ngZone = _ngZone;
            this._viewContainerRef = _viewContainerRef;
            this._scrollStrategy = _scrollStrategy;
            this._dateAdapter = _dateAdapter;
            this._dir = _dir;
            this._document = _document;
            /** The type of value handled by the calendar. */
            this.type = 'date';
            /** Which view the calendar should be started in. */
            this.startView = 'month';
            /** Clock interval */
            this.clockStep = 1;
            /** Clock hour format */
            this.twelveHour = true;
            this._touchUi = true;
            /** Emits when the datepicker has been opened. */
            this.openedStream = new i0.EventEmitter();
            /** Emits when the datepicker has been closed. */
            this.closedStream = new i0.EventEmitter();
            this._opened = false;
            /** The id for the datepicker calendar. */
            this.id = "mat-datepicker-" + datepickerUid++;
            this._validSelected = null;
            /** The element that was focused before the datepicker was opened. */
            this._focusedElementBeforeOpen = null;
            /** Subscription to value changes in the associated input element. */
            this._inputSubscription = rxjs.Subscription.EMPTY;
            /** Emits when the datepicker is disabled. */
            this._disabledChange = new rxjs.Subject();
            /** Emits new selected date when selected date changes. */
            this._selectedChanged = new rxjs.Subject();
            if (!this._dateAdapter) {
                throw createMissingDateImplError('DateAdapter');
            }
        }
        Object.defineProperty(MatDatepicker.prototype, "startAt", {
            /** The date to open the calendar to initially. */
            get: /**
             * The date to open the calendar to initially.
             * @return {?}
             */ function () {
                // If an explicit startAt is set we start there, otherwise we start at whatever the currently
                // selected value is.
                return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatDatepicker.prototype, "touchUi", {
            /**
             * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather
             * than a popup and elements have more padding to allow for bigger touch targets.
             */
            get: /**
             * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather
             * than a popup and elements have more padding to allow for bigger touch targets.
             * @return {?}
             */ function () {
                return this._touchUi;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._touchUi = coercion.coerceBooleanProperty(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatDatepicker.prototype, "disabled", {
            /** Whether the datepicker pop-up should be disabled. */
            get: /**
             * Whether the datepicker pop-up should be disabled.
             * @return {?}
             */ function () {
                return this._disabled === undefined && this._datepickerInput
                    ? this._datepickerInput.disabled
                    : !!this._disabled;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                /** @type {?} */
                var newValue = coercion.coerceBooleanProperty(value);
                if (newValue !== this._disabled) {
                    this._disabled = newValue;
                    this._disabledChange.next(newValue);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatDatepicker.prototype, "matDatepicker", {
            /** Whether the datepicker is connected to a date type one */
            set: /**
             * Whether the datepicker is connected to a date type one
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value) {
                    this._datepicker = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatDatepicker.prototype, "opened", {
            /** Whether the calendar is open. */
            get: /**
             * Whether the calendar is open.
             * @return {?}
             */ function () {
                return this._opened;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                value ? this.open() : this.close();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatDatepicker.prototype, "_selected", {
            /** The currently selected date. */
            get: /**
             * The currently selected date.
             * @return {?}
             */ function () {
                return this._validSelected;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value) {
                    /** @type {?} */
                    var valid = this._dateAdapter.clampDate(value, this._minDate, this._maxDate);
                    // round the minutes
                    /** @type {?} */
                    var minutes = this._dateAdapter.getMinutes(valid);
                    minutes = Math.round(minutes / this.clockStep) * this.clockStep;
                    this._dateAdapter.setMinutes(valid, minutes);
                    this._dateAdapter.setSeconds(valid, 0);
                    this._validSelected = valid;
                }
                else {
                    this._validSelected = null;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatDatepicker.prototype, "_minDate", {
            /** The minimum selectable date. */
            get: /**
             * The minimum selectable date.
             * @return {?}
             */ function () {
                return this._datepickerInput && this._datepickerInput.min;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatDatepicker.prototype, "_maxDate", {
            /** The maximum selectable date. */
            get: /**
             * The maximum selectable date.
             * @return {?}
             */ function () {
                return this._datepickerInput && this._datepickerInput.max;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatDatepicker.prototype, "_dateFilter", {
            get: /**
             * @return {?}
             */ function () {
                return this._datepickerInput && this._datepickerInput._dateFilter;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MatDatepicker.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // prevent inconsistent type and view
                switch (this.type) {
                    case 'date':
                        this.startView = this.startView !== 'clock' ? this.startView : 'month';
                        break;
                    case 'time':
                        this.startView = 'clock';
                        break;
                    default:
                        this.startView = this.startView;
                }
                if (this._datepicker) {
                    this._datepicker._selectedChanged.subscribe(function (date) {
                        /** @type {?} */
                        var value = _this._dateAdapter.createDate(_this._dateAdapter.getYear(date), _this._dateAdapter.getMonth(date), _this._dateAdapter.getDate(date), _this._selected ? _this._dateAdapter.getHours(_this._selected) : 0, _this._selected ? _this._dateAdapter.getMinutes(_this._selected) : 0);
                        // update the corresponding changes
                        _this.select(value);
                    });
                }
                // refresh the input
                this._datepickerInput.value = this._selected;
            };
        /**
         * @return {?}
         */
        MatDatepicker.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.close();
                this._inputSubscription.unsubscribe();
                this._selectedChanged.complete();
                this._disabledChange.complete();
                if (this._popupRef) {
                    this._popupRef.dispose();
                    this._popupComponentRef = null;
                }
            };
        /** Selects the given date */
        /**
         * Selects the given date
         * @param {?} date
         * @return {?}
         */
        MatDatepicker.prototype.select = /**
         * Selects the given date
         * @param {?} date
         * @return {?}
         */
            function (date) {
                /** @type {?} */
                var oldValue = this._selected;
                this._selected = date;
                /** @type {?} */
                var unit = this.type.indexOf('time') >= 0 ? 'minute' : 'day';
                if (!this._dateAdapter.sameDate(oldValue, this._selected, unit)) {
                    this._selectedChanged.next(date);
                }
            };
        /**
         * Register an input with this datepicker.
         * @param input The datepicker input to register with this datepicker.
         */
        /**
         * Register an input with this datepicker.
         * @param {?} input The datepicker input to register with this datepicker.
         * @return {?}
         */
        MatDatepicker.prototype._registerInput = /**
         * Register an input with this datepicker.
         * @param {?} input The datepicker input to register with this datepicker.
         * @return {?}
         */
            function (input$$1) {
                var _this = this;
                if (this._datepickerInput) {
                    throw Error('A MatDatepicker can only be associated with a single input.');
                }
                this._datepickerInput = input$$1;
                this._inputSubscription = this._datepickerInput._valueChange.subscribe(function (value) {
                    return (_this._selected =
                        value && _this._dateAdapter.isDateInstance(value) ? _this._dateAdapter.clone(value) : null);
                });
            };
        /** Open the calendar. */
        /**
         * Open the calendar.
         * @return {?}
         */
        MatDatepicker.prototype.open = /**
         * Open the calendar.
         * @return {?}
         */
            function () {
                if (this._opened || this.disabled) {
                    return;
                }
                if (!this._datepickerInput) {
                    throw Error('Attempted to open an MatDatepicker with no associated input.');
                }
                if (this._document) {
                    this._focusedElementBeforeOpen = this._document.activeElement;
                }
                this.touchUi ? this._openAsDialog() : this._openAsPopup();
                this._opened = true;
                this.openedStream.emit();
            };
        /**
         * @param {?=} value
         * @return {?}
         */
        MatDatepicker.prototype.reset = /**
         * @param {?=} value
         * @return {?}
         */
            function (value) {
                this._datepickerInput.reset(value);
            };
        /** Close the calendar. */
        /**
         * Close the calendar.
         * @return {?}
         */
        MatDatepicker.prototype.close = /**
         * Close the calendar.
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this._opened) {
                    return;
                }
                if (this._popupRef && this._popupRef.hasAttached()) {
                    this._popupRef.detach();
                }
                if (this._dialogRef) {
                    this._dialogRef.close();
                    this._dialogRef = null;
                }
                if (this._calendarPortal && this._calendarPortal.isAttached) {
                    this._calendarPortal.detach();
                }
                /** @type {?} */
                var completeClose = function () {
                    // The `_opened` could've been reset already if
                    // we got two events in quick succession.
                    if (_this._opened) {
                        _this._opened = false;
                        _this.closedStream.emit();
                        _this._focusedElementBeforeOpen = null;
                    }
                };
                if (this._focusedElementBeforeOpen &&
                    typeof this._focusedElementBeforeOpen.focus === 'function') {
                    // Because IE moves focus asynchronously, we can't count on it being restored before we've
                    // marked the datepicker as closed. If the event fires out of sequence and the element that
                    // we're refocusing opens the datepicker on focus, the user could be stuck with not being
                    // able to close the calendar at all. We work around it by making the logic, that marks
                    // the datepicker as closed, async as well.
                    this._focusedElementBeforeOpen.focus();
                    setTimeout(completeClose);
                }
                else {
                    completeClose();
                }
            };
        /** Open the calendar as a dialog. */
        /**
         * Open the calendar as a dialog.
         * @return {?}
         */
        MatDatepicker.prototype._openAsDialog = /**
         * Open the calendar as a dialog.
         * @return {?}
         */
            function () {
                var _this = this;
                // Usually this would be handled by `open` which ensures that we can only have one overlay
                // open at a time, however since we reset the variables in async handlers some overlays
                // may slip through if the user opens and closes multiple times in quick succession (e.g.
                // by holding down the enter key).
                if (this._dialogRef) {
                    this._dialogRef.close();
                }
                this._dialogRef = this._dialog.open(MatDatepickerContent, {
                    direction: this._dir ? this._dir.value : 'ltr',
                    viewContainerRef: this._viewContainerRef,
                    panelClass: 'mat-datepicker-dialog'
                });
                this._dialogRef.afterClosed().subscribe(function () { return _this.close(); });
                this._dialogRef.componentInstance.datepicker = this;
            };
        /** Open the calendar as a popup. */
        /**
         * Open the calendar as a popup.
         * @return {?}
         */
        MatDatepicker.prototype._openAsPopup = /**
         * Open the calendar as a popup.
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this._calendarPortal) {
                    this._calendarPortal = new portal.ComponentPortal(MatDatepickerContent, this._viewContainerRef);
                }
                if (!this._popupRef) {
                    this._createPopup();
                }
                if (!this._popupRef.hasAttached()) {
                    this._popupComponentRef = this._popupRef.attach(this._calendarPortal);
                    this._popupComponentRef.instance.datepicker = this;
                    // Update the position once the calendar has rendered.
                    this._ngZone.onStable
                        .asObservable()
                        .pipe(operators.take(1))
                        .subscribe(function () {
                        _this._popupRef.updatePosition();
                    });
                }
            };
        /** Create the popup. */
        /**
         * Create the popup.
         * @return {?}
         */
        MatDatepicker.prototype._createPopup = /**
         * Create the popup.
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var overlayConfig = new overlay.OverlayConfig({
                    positionStrategy: this._createPopupPositionStrategy(),
                    hasBackdrop: true,
                    backdropClass: 'mat-overlay-transparent-backdrop',
                    direction: this._dir,
                    scrollStrategy: this._scrollStrategy(),
                    panelClass: 'mat-datepicker-popup'
                });
                this._popupRef = this._overlay.create(overlayConfig);
                this._popupRef.overlayElement.setAttribute('role', 'dialog');
                rxjs.merge(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(operators.filter(function (event) {
                    // Closing on alt + up is only valid when there's an input associated with the datepicker.
                    return (event.keyCode === keycodes.ESCAPE ||
                        (_this._datepickerInput && event.altKey && event.keyCode === keycodes.UP_ARROW));
                }))).subscribe(function () { return _this.close(); });
            };
        /** Create the popup PositionStrategy. */
        /**
         * Create the popup PositionStrategy.
         * @return {?}
         */
        MatDatepicker.prototype._createPopupPositionStrategy = /**
         * Create the popup PositionStrategy.
         * @return {?}
         */
            function () {
                return this._overlay
                    .position()
                    .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())
                    .withTransformOriginOn('.mat-datepicker-content')
                    .withFlexibleDimensions(false)
                    .withViewportMargin(8)
                    .withPush(false)
                    .withPositions([
                    {
                        originX: 'start',
                        originY: 'bottom',
                        overlayX: 'start',
                        overlayY: 'top'
                    },
                    {
                        originX: 'start',
                        originY: 'top',
                        overlayX: 'start',
                        overlayY: 'bottom'
                    },
                    {
                        originX: 'end',
                        originY: 'bottom',
                        overlayX: 'end',
                        overlayY: 'top'
                    },
                    {
                        originX: 'end',
                        originY: 'top',
                        overlayX: 'end',
                        overlayY: 'bottom'
                    }
                ]);
            };
        /**
         * @param obj The object to check.
         * @returns The given object if it is both a date instance and valid, otherwise null.
         */
        /**
         * @param {?} obj The object to check.
         * @return {?} The given object if it is both a date instance and valid, otherwise null.
         */
        MatDatepicker.prototype._getValidDateOrNull = /**
         * @param {?} obj The object to check.
         * @return {?} The given object if it is both a date instance and valid, otherwise null.
         */
            function (obj) {
                return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;
            };
        MatDatepicker.decorators = [
            { type: i0.Component, args: [{
                        selector: 'mat-datepicker',
                        template: '',
                        exportAs: 'matDatepicker',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        preserveWhitespaces: false
                    },] },
        ];
        MatDatepicker.ctorParameters = function () {
            return [
                { type: dialog.MatDialog },
                { type: overlay.Overlay },
                { type: i0.NgZone },
                { type: i0.ViewContainerRef },
                { type: undefined, decorators: [{ type: i0.Inject, args: [MAT_DATEPICKER_SCROLL_STRATEGY,] }] },
                { type: DateAdapter, decorators: [{ type: i0.Optional }] },
                { type: bidi.Directionality, decorators: [{ type: i0.Optional }] },
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [common.DOCUMENT,] }] }
            ];
        };
        MatDatepicker.propDecorators = {
            startAt: [{ type: i0.Input }],
            type: [{ type: i0.Input }],
            startView: [{ type: i0.Input }],
            clockStep: [{ type: i0.Input }],
            twelveHour: [{ type: i0.Input }],
            touchUi: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }],
            matDatepicker: [{ type: i0.Input }],
            panelClass: [{ type: i0.Input }],
            openedStream: [{ type: i0.Output, args: ['opened',] }],
            closedStream: [{ type: i0.Output, args: ['closed',] }],
            opened: [{ type: i0.Input }]
        };
        return MatDatepicker;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MAT_DATEPICKER_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return MatDatepickerInput; }),
        multi: true
    };
    /** @type {?} */
    var MAT_DATEPICKER_VALIDATORS = {
        provide: forms.NG_VALIDATORS,
        useExisting: i0.forwardRef(function () { return MatDatepickerInput; }),
        multi: true
    };
    /**
     * An event used for datepicker input and change events. We don't always have access to a native
     * input or change event because the event may have been triggered by the user clicking on the
     * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.
     * @template D
     */
    var /**
     * An event used for datepicker input and change events. We don't always have access to a native
     * input or change event because the event may have been triggered by the user clicking on the
     * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.
     * @template D
     */ MatDatepickerInputEvent = /** @class */ (function () {
        function MatDatepickerInputEvent(target, targetElement) {
            this.target = target;
            this.targetElement = targetElement;
            this.value = this.target.value;
        }
        return MatDatepickerInputEvent;
    }());
    /**
     * Directive used to connect an input to a MatDatepicker.
     * @template D
     */
    var MatDatepickerInput = /** @class */ (function () {
        function MatDatepickerInput(_elementRef, _dateAdapter, _dateFormats, _formField) {
            var _this = this;
            this._elementRef = _elementRef;
            this._dateAdapter = _dateAdapter;
            this._dateFormats = _dateFormats;
            this._formField = _formField;
            /** Emits when a `change` event is fired on this `<input>`. */
            this.dateChange = new i0.EventEmitter();
            /** Emits when an `input` event is fired on this `<input>`. */
            this.dateInput = new i0.EventEmitter();
            /** Emits when the value changes (either due to user input or programmatic change). */
            this._valueChange = new i0.EventEmitter();
            /** Emits when the disabled state has changed */
            this._disabledChange = new i0.EventEmitter();
            this._onTouched = function () { };
            this._cvaOnChange = function () { };
            this._validatorOnChange = function () { };
            this._datepickerSubscription = rxjs.Subscription.EMPTY;
            this._localeSubscription = rxjs.Subscription.EMPTY;
            /** The form control validator for whether the input parses. */
            this._parseValidator = function () {
                return _this._lastValueValid
                    ? null
                    : { matDatepickerParse: { text: _this._elementRef.nativeElement.value } };
            };
            /** The form control validator for the min date. */
            this._minValidator = function (control) {
                /** @type {?} */
                var controlValue = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value));
                return !_this.min || !controlValue || _this._dateAdapter.compareDate(_this.min, controlValue) <= 0
                    ? null
                    : { matDatepickerMin: { min: _this.min, actual: controlValue } };
            };
            /** The form control validator for the max date. */
            this._maxValidator = function (control) {
                /** @type {?} */
                var controlValue = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value));
                return !_this.max || !controlValue || _this._dateAdapter.compareDate(_this.max, controlValue) >= 0
                    ? null
                    : { matDatepickerMax: { max: _this.max, actual: controlValue } };
            };
            /** The form control validator for the date filter. */
            this._filterValidator = function (control) {
                /** @type {?} */
                var controlValue = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value));
                return !_this._dateFilter || !controlValue || _this._dateFilter(controlValue)
                    ? null
                    : { matDatepickerFilter: true };
            };
            /** The combined form control validator for this input. */
            this._validator = forms.Validators.compose([
                this._parseValidator,
                this._minValidator,
                this._maxValidator,
                this._filterValidator
            ]);
            /** Whether the last value set on the input was valid. */
            this._lastValueValid = false;
            if (!this._dateAdapter) {
                throw createMissingDateImplError('DateAdapter');
            }
            if (!this._dateFormats) {
                throw createMissingDateImplError('MAT_DATE_FORMATS');
            }
        }
        Object.defineProperty(MatDatepickerInput.prototype, "matDatepicker", {
            /** The datepicker that this input is associated with. */
            set: /**
             * The datepicker that this input is associated with.
             * @param {?} value
             * @return {?}
             */ function (value) {
                var _this = this;
                if (!value) {
                    return;
                }
                this._datepicker = value;
                this._datepicker._registerInput(this);
                this._datepickerSubscription.unsubscribe();
                this._datepickerSubscription = this._datepicker._selectedChanged.subscribe(function (selected) {
                    _this.value = selected;
                    _this._cvaOnChange(selected);
                    _this._onTouched();
                    _this.dateInput.emit(new MatDatepickerInputEvent(_this, _this._elementRef.nativeElement));
                    _this.dateChange.emit(new MatDatepickerInputEvent(_this, _this._elementRef.nativeElement));
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatDatepickerInput.prototype, "matDatepickerFilter", {
            /** Function that can be used to filter out dates within the datepicker. */
            set: /**
             * Function that can be used to filter out dates within the datepicker.
             * @param {?} filter
             * @return {?}
             */ function (filter) {
                this._dateFilter = filter;
                this._validatorOnChange();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatDatepickerInput.prototype, "value", {
            /** The value of the input. */
            get: /**
             * The value of the input.
             * @return {?}
             */ function () {
                return this._value;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                value = this._dateAdapter.deserialize(value);
                this._lastValueValid = !value || this._dateAdapter.isValid(value);
                value = this._getValidDateOrNull(value);
                /** @type {?} */
                var oldDate = this.value;
                this._value = value;
                this._formatValue(value);
                if (!this._dateAdapter.sameDate(oldDate, value)) {
                    this._valueChange.emit(value);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatDatepickerInput.prototype, "min", {
            /** The minimum valid date. */
            get: /**
             * The minimum valid date.
             * @return {?}
             */ function () {
                return this._min;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                this._validatorOnChange();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatDatepickerInput.prototype, "max", {
            /** The maximum valid date. */
            get: /**
             * The maximum valid date.
             * @return {?}
             */ function () {
                return this._max;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                this._validatorOnChange();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatDatepickerInput.prototype, "disabled", {
            /** Whether the datepicker-input is disabled. */
            get: /**
             * Whether the datepicker-input is disabled.
             * @return {?}
             */ function () {
                return !!this._disabled;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                /** @type {?} */
                var newValue = coercion.coerceBooleanProperty(value);
                /** @type {?} */
                var element = this._elementRef.nativeElement;
                if (this._disabled !== newValue) {
                    this._disabled = newValue;
                    this._disabledChange.emit(newValue);
                }
                // We need to null check the `blur` method, because it's undefined during SSR.
                if (newValue && element.blur) {
                    // Normally, native input elements automatically blur if they turn disabled. This behavior
                    // is problematic, because it would mean that it triggers another change detection cycle,
                    // which then causes a changed after checked error if the input element was focused before.
                    element.blur();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MatDatepickerInput.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // Update the displayed date when the locale changes.
                this._localeSubscription = this._dateAdapter.localeChanges.subscribe(function () {
                    _this.value = _this.value;
                });
            };
        /**
         * @return {?}
         */
        MatDatepickerInput.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this._datepickerSubscription.unsubscribe();
                this._localeSubscription.unsubscribe();
                this._valueChange.complete();
                this._disabledChange.complete();
            };
        /**
         * @param {?=} value
         * @return {?}
         */
        MatDatepickerInput.prototype.reset = /**
         * @param {?=} value
         * @return {?}
         */
            function (value) {
                this.value = value !== undefined ? value : this._firstValue;
                this._cvaOnChange(this._value);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        MatDatepickerInput.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this._validatorOnChange = fn;
            };
        /**
         * @param {?} c
         * @return {?}
         */
        MatDatepickerInput.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return this._validator ? this._validator(c) : null;
            };
        /**
         * @deprecated
         * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead
         */
        /**
         * @deprecated
         * \@breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead
         * @return {?}
         */
        MatDatepickerInput.prototype.getPopupConnectionElementRef = /**
         * @deprecated
         * \@breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead
         * @return {?}
         */
            function () {
                return this.getConnectedOverlayOrigin();
            };
        /**
         * Gets the element that the datepicker popup should be connected to.
         * @return The element to connect the popup to.
         */
        /**
         * Gets the element that the datepicker popup should be connected to.
         * @return {?} The element to connect the popup to.
         */
        MatDatepickerInput.prototype.getConnectedOverlayOrigin = /**
         * Gets the element that the datepicker popup should be connected to.
         * @return {?} The element to connect the popup to.
         */
            function () {
                return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;
            };
        // Implemented as part of ControlValueAccessor
        // Implemented as part of ControlValueAccessor
        /**
         * @param {?} value
         * @return {?}
         */
        MatDatepickerInput.prototype.writeValue =
            // Implemented as part of ControlValueAccessor
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (this._firstValue === undefined) {
                    this._firstValue = value;
                }
                this.value = value;
            };
        // Implemented as part of ControlValueAccessor
        // Implemented as part of ControlValueAccessor
        /**
         * @param {?} fn
         * @return {?}
         */
        MatDatepickerInput.prototype.registerOnChange =
            // Implemented as part of ControlValueAccessor
            /**
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this._cvaOnChange = fn;
            };
        // Implemented as part of ControlValueAccessor
        // Implemented as part of ControlValueAccessor
        /**
         * @param {?} fn
         * @return {?}
         */
        MatDatepickerInput.prototype.registerOnTouched =
            // Implemented as part of ControlValueAccessor
            /**
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this._onTouched = fn;
            };
        // Implemented as part of ControlValueAccessor
        // Implemented as part of ControlValueAccessor
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        MatDatepickerInput.prototype.setDisabledState =
            // Implemented as part of ControlValueAccessor
            /**
             * @param {?} isDisabled
             * @return {?}
             */
            function (isDisabled) {
                this.disabled = isDisabled;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        MatDatepickerInput.prototype._onKeydown = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var isAltDownArrow = event.altKey && event.keyCode === keycodes.DOWN_ARROW;
                if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {
                    this._datepicker.open();
                    event.preventDefault();
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        MatDatepickerInput.prototype._onInput = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var type = this._datepicker.type;
                /** @type {?} */
                var date = this._dateAdapter.parse(value, this._dateFormats.parse[type]);
                this._lastValueValid = (!value && !date) || this._dateAdapter.isValid(date);
                date = this._getValidDateOrNull(date);
                if (!this._dateAdapter.sameDate(date, this._value)) {
                    this._value = date;
                    this._valueChange.emit(date);
                    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));
                }
                // update on every (input) change
                this._cvaOnChange(date);
            };
        /**
         * @return {?}
         */
        MatDatepickerInput.prototype._onChange = /**
         * @return {?}
         */
            function () {
                this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));
            };
        /** Handles blur events on the input. */
        /**
         * Handles blur events on the input.
         * @return {?}
         */
        MatDatepickerInput.prototype._onBlur = /**
         * Handles blur events on the input.
         * @return {?}
         */
            function () {
                // Reformat the input only if we have a valid value.
                if (this.value) {
                    this._formatValue(this.value);
                }
                this._onTouched();
            };
        /** Formats a value and sets it on the input element. */
        /**
         * Formats a value and sets it on the input element.
         * @param {?} value
         * @return {?}
         */
        MatDatepickerInput.prototype._formatValue = /**
         * Formats a value and sets it on the input element.
         * @param {?} value
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var type = this._datepicker.type;
                this._elementRef.nativeElement.value = value
                    ? this._dateAdapter.format(value, this._dateFormats.display[type])
                    : '';
            };
        /**
         * @param obj The object to check.
         * @returns The given object if it is both a date instance and valid, otherwise null.
         */
        /**
         * @param {?} obj The object to check.
         * @return {?} The given object if it is both a date instance and valid, otherwise null.
         */
        MatDatepickerInput.prototype._getValidDateOrNull = /**
         * @param {?} obj The object to check.
         * @return {?} The given object if it is both a date instance and valid, otherwise null.
         */
            function (obj) {
                return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;
            };
        MatDatepickerInput.decorators = [
            { type: i0.Directive, args: [{
                        selector: 'input[matDatepicker]',
                        providers: [
                            MAT_DATEPICKER_VALUE_ACCESSOR,
                            MAT_DATEPICKER_VALIDATORS,
                            { provide: input.MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput }
                        ],
                        host: {
                            '[attr.aria-haspopup]': 'true',
                            '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',
                            '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',
                            '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',
                            '[attr.disabled]': 'disabled',
                            '(input)': '_onInput($event.target.value)',
                            '(change)': '_onChange()',
                            '(blur)': '_onBlur()',
                            '(keydown)': '_onKeydown($event)'
                        },
                        exportAs: 'matDatepickerInput'
                    },] },
        ];
        MatDatepickerInput.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: DateAdapter, decorators: [{ type: i0.Optional }] },
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [MAT_DATE_FORMATS,] }] },
                { type: formField.MatFormField, decorators: [{ type: i0.Optional }] }
            ];
        };
        MatDatepickerInput.propDecorators = {
            matDatepicker: [{ type: i0.Input }],
            matDatepickerFilter: [{ type: i0.Input }],
            value: [{ type: i0.Input }],
            min: [{ type: i0.Input }],
            max: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }],
            dateChange: [{ type: i0.Output }],
            dateInput: [{ type: i0.Output }]
        };
        return MatDatepickerInput;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Can be used to override the icon of a `matDatepickerToggle`.
     */
    var MatDatepickerToggleIcon = /** @class */ (function () {
        /** Can be used to override the icon of a `matDatepickerToggle`. */
        function MatDatepickerToggleIcon() {
        }
        MatDatepickerToggleIcon.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[matDatepickerToggleIcon]'
                    },] },
        ];
        return MatDatepickerToggleIcon;
    }());
    /**
     * @template D
     */
    var MatDatepickerToggle = /** @class */ (function () {
        function MatDatepickerToggle(_intl, _changeDetectorRef, defaultTabIndex) {
            this._intl = _intl;
            this._changeDetectorRef = _changeDetectorRef;
            this._stateChanges = rxjs.Subscription.EMPTY;
            /** @type {?} */
            var parsedTabIndex = Number(defaultTabIndex);
            this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;
        }
        Object.defineProperty(MatDatepickerToggle.prototype, "disabled", {
            /** Whether the toggle button is disabled. */
            get: /**
             * Whether the toggle button is disabled.
             * @return {?}
             */ function () {
                return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._disabled = coercion.coerceBooleanProperty(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        MatDatepickerToggle.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes.datepicker) {
                    this._watchStateChanges();
                }
            };
        /**
         * @return {?}
         */
        MatDatepickerToggle.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this._stateChanges.unsubscribe();
            };
        /**
         * @return {?}
         */
        MatDatepickerToggle.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this._watchStateChanges();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        MatDatepickerToggle.prototype._open = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.datepicker && !this.disabled) {
                    this.datepicker.open();
                    event.stopPropagation();
                }
            };
        /**
         * @return {?}
         */
        MatDatepickerToggle.prototype._watchStateChanges = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : rxjs.of();
                /** @type {?} */
                var inputDisabled = this.datepicker && this.datepicker._datepickerInput
                    ? this.datepicker._datepickerInput._disabledChange
                    : rxjs.of();
                /** @type {?} */
                var datepickerToggled = this.datepicker
                    ? rxjs.merge(this.datepicker.openedStream, this.datepicker.closedStream)
                    : rxjs.of();
                this._stateChanges.unsubscribe();
                this._stateChanges = rxjs.merge(this._intl.changes, datepickerDisabled, inputDisabled, datepickerToggled).subscribe(function () { return _this._changeDetectorRef.markForCheck(); });
            };
        MatDatepickerToggle.decorators = [
            { type: i0.Component, args: [{
                        selector: 'mat-datepicker-toggle',
                        template: "<button\n  mat-icon-button\n  type=\"button\"\n  aria-haspopup=\"true\"\n  [attr.aria-label]=\"_intl.openCalendarLabel\"\n  [attr.tabindex]=\"disabled ? -1 : tabIndex\"\n  [disabled]=\"disabled\"\n  (click)=\"_open($event)\">\n\n  <svg\n    *ngIf=\"!_customIcon\"\n    class=\"mat-datepicker-toggle-default-icon\"\n    viewBox=\"0 0 24 24\"\n    width=\"24px\"\n    height=\"24px\"\n    fill=\"currentColor\"\n    focusable=\"false\">\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n    <path d=\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\"/>\n  </svg>\n\n  <ng-content select=\"[matDatepickerToggleIcon]\"></ng-content>\n</button>\n",
                        // styleUrls: ['datepicker-toggle.css'],
                        host: {
                            class: 'mat-datepicker-toggle',
                            // Clear out the native tabindex here since we forward it to the underlying button
                            '[attr.tabindex]': 'null',
                            '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened'
                        },
                        exportAs: 'matDatepickerToggle',
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false
                    },] },
        ];
        MatDatepickerToggle.ctorParameters = function () {
            return [
                { type: MatDatepickerIntl },
                { type: i0.ChangeDetectorRef },
                { type: String, decorators: [{ type: i0.Attribute, args: ['tabindex',] }] }
            ];
        };
        MatDatepickerToggle.propDecorators = {
            datepicker: [{ type: i0.Input, args: ['for',] }],
            tabIndex: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }],
            _customIcon: [{ type: i0.ContentChild, args: [MatDatepickerToggleIcon,] }]
        };
        return MatDatepickerToggle;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var MatDatepickerModule = /** @class */ (function () {
        function MatDatepickerModule() {
        }
        MatDatepickerModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            button.MatButtonModule,
                            dialog.MatDialogModule,
                            icon.MatIconModule,
                            overlay.OverlayModule,
                            a11y.A11yModule
                        ],
                        exports: [
                            MatCalendar,
                            MatCalendarBody,
                            MatDatepicker,
                            MatDatepickerContent,
                            MatDatepickerInput,
                            MatDatepickerToggle,
                            MatDatepickerToggleIcon,
                            MatClockView,
                            MatMonthView,
                            MatYearView,
                            MatYearsView
                        ],
                        declarations: [
                            MatCalendar,
                            MatCalendarBody,
                            MatDatepicker,
                            MatDatepickerContent,
                            MatDatepickerInput,
                            MatDatepickerToggle,
                            MatDatepickerToggleIcon,
                            MatClockView,
                            MatMonthView,
                            MatYearView,
                            MatYearsView
                        ],
                        providers: [MatDatepickerIntl, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER],
                        entryComponents: [MatDatepickerContent]
                    },] },
        ];
        return MatDatepickerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.NativeDateModule = NativeDateModule;
    exports.MatNativeDateModule = MatNativeDateModule;
    exports.MAT_DATE_LOCALE_FACTORY = MAT_DATE_LOCALE_FACTORY;
    exports.MAT_DATE_LOCALE = MAT_DATE_LOCALE;
    exports.MAT_DATE_LOCALE_PROVIDER = MAT_DATE_LOCALE_PROVIDER;
    exports.DateAdapter = DateAdapter;
    exports.MAT_DATE_FORMATS = MAT_DATE_FORMATS;
    exports.NativeDateAdapter = NativeDateAdapter;
    exports.MAT_NATIVE_DATE_FORMATS = MAT_NATIVE_DATE_FORMATS;
    exports.MomentDateModule = MomentDateModule;
    exports.MatMomentDateModule = MatMomentDateModule;
    exports.MomentDateAdapter = MomentDateAdapter;
    exports.MAT_MOMENT_DATE_FORMATS = MAT_MOMENT_DATE_FORMATS;
    exports.MatDatepickerModule = MatDatepickerModule;
    exports.MatCalendar = MatCalendar;
    exports.MatCalendarCell = MatCalendarCell;
    exports.MatCalendarBody = MatCalendarBody;
    exports.CLOCK_RADIUS = CLOCK_RADIUS;
    exports.CLOCK_INNER_RADIUS = CLOCK_INNER_RADIUS;
    exports.CLOCK_OUTER_RADIUS = CLOCK_OUTER_RADIUS;
    exports.CLOCK_TICK_RADIUS = CLOCK_TICK_RADIUS;
    exports.MatClockView = MatClockView;
    exports.MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY = MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY;
    exports.MAT_DATEPICKER_SCROLL_STRATEGY = MAT_DATEPICKER_SCROLL_STRATEGY;
    exports.MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER;
    exports.MatDatepickerContent = MatDatepickerContent;
    exports.MatDatepicker = MatDatepicker;
    exports.matDatepickerAnimations = matDatepickerAnimations;
    exports.MAT_DATEPICKER_VALUE_ACCESSOR = MAT_DATEPICKER_VALUE_ACCESSOR;
    exports.MAT_DATEPICKER_VALIDATORS = MAT_DATEPICKER_VALIDATORS;
    exports.MatDatepickerInputEvent = MatDatepickerInputEvent;
    exports.MatDatepickerInput = MatDatepickerInput;
    exports.MatDatepickerIntl = MatDatepickerIntl;
    exports.MatDatepickerToggleIcon = MatDatepickerToggleIcon;
    exports.MatDatepickerToggle = MatDatepickerToggle;
    exports.MatMonthView = MatMonthView;
    exports.MatYearView = MatYearView;
    exports.MatYearsView = MatYearsView;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,