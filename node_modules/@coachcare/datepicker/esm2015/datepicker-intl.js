/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * @record
 */
export function MatDatepickerIntlCatalog() { }
if (false) {
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.calendarLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.openCalendarLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.prevMonthLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.nextMonthLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.prevYearLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.nextYearLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.setToAMLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.setToPMLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.switchToMinuteViewLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.switchToHourViewLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.switchToMonthViewLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.switchToYearViewLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.switchToYearsViewLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.buttonSubmitText;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.buttonSubmitLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.buttonCancelText;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.buttonCancelLabel;
}
/**
 * Datepicker data that requires internationalization.
 */
export class MatDatepickerIntl {
    /** Datepicker data that requires internationalization. */
    constructor() {
        /**
         * Stream that emits whenever the labels here are changed. Use this to notify
         * components if the labels have changed after initialization.
         */
        this.changes = new Subject();
        /** A label for the calendar popup (used by screen readers). */
        this.calendarLabel = 'Calendar';
        /** A label for the button used to open the calendar popup (used by screen readers). */
        this.openCalendarLabel = 'Open calendar';
        /** A label for the previous month button (used by screen readers). */
        this.prevMonthLabel = 'Previous month';
        /** A label for the next month button (used by screen readers). */
        this.nextMonthLabel = 'Next month';
        /** A label for the previous year button (used by screen readers). */
        this.prevYearLabel = 'Previous year';
        /** A label for the next year button (used by screen readers). */
        this.nextYearLabel = 'Next year';
        /** A label for the 'AM' button (used by screen readers). */
        this.setToAMLabel = 'Set date to AM';
        /** A label for the 'PM' button (used by screen readers). */
        this.setToPMLabel = 'Set date to PM';
        /** A label for the 'switch to minute view' button (used by screen readers). */
        this.switchToMinuteViewLabel = 'Change to minute view';
        /** A label for the 'switch to hour view' button (used by screen readers). */
        this.switchToHourViewLabel = 'Change to hour view';
        /** A label for the 'switch to month view' button (used by screen readers). */
        this.switchToMonthViewLabel = 'Change to month view';
        /** A label for the 'switch to year view' button (used by screen readers). */
        this.switchToYearViewLabel = 'Change to year view';
        /** A label for the 'switch to years view' button (used by screen readers). */
        this.switchToYearsViewLabel = 'Change to years view';
        /** Text for the 'submit' button. */
        this.buttonSubmitText = 'Ok';
        /** A label for the 'submit' button (used by screen readers). */
        this.buttonSubmitLabel = 'Choose the current date';
        /** Text for the 'cancel' button. */
        this.buttonCancelText = 'Cancel';
        /** A label for the 'cancel' button (used by screen readers). */
        this.buttonCancelLabel = 'Cancel the date selection';
    }
}
MatDatepickerIntl.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] },
];
/** @nocollapse */ MatDatepickerIntl.ngInjectableDef = i0.defineInjectable({ factory: function MatDatepickerIntl_Factory() { return new MatDatepickerIntl(); }, token: MatDatepickerIntl, providedIn: "root" });
if (false) {
    /**
     * Stream that emits whenever the labels here are changed. Use this to notify
     * components if the labels have changed after initialization.
     * @type {?}
     */
    MatDatepickerIntl.prototype.changes;
    /**
     * A label for the calendar popup (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.calendarLabel;
    /**
     * A label for the button used to open the calendar popup (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.openCalendarLabel;
    /**
     * A label for the previous month button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.prevMonthLabel;
    /**
     * A label for the next month button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.nextMonthLabel;
    /**
     * A label for the previous year button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.prevYearLabel;
    /**
     * A label for the next year button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.nextYearLabel;
    /**
     * A label for the 'AM' button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.setToAMLabel;
    /**
     * A label for the 'PM' button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.setToPMLabel;
    /**
     * A label for the 'switch to minute view' button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.switchToMinuteViewLabel;
    /**
     * A label for the 'switch to hour view' button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.switchToHourViewLabel;
    /**
     * A label for the 'switch to month view' button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.switchToMonthViewLabel;
    /**
     * A label for the 'switch to year view' button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.switchToYearViewLabel;
    /**
     * A label for the 'switch to years view' button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.switchToYearsViewLabel;
    /**
     * Text for the 'submit' button.
     * @type {?}
     */
    MatDatepickerIntl.prototype.buttonSubmitText;
    /**
     * A label for the 'submit' button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.buttonSubmitLabel;
    /**
     * Text for the 'cancel' button.
     * @type {?}
     */
    MatDatepickerIntl.prototype.buttonCancelText;
    /**
     * A label for the 'cancel' button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.buttonCancelLabel;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci1pbnRsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNvYWNoY2FyZS9kYXRlcGlja2VyLyIsInNvdXJjZXMiOlsiZGF0ZXBpY2tlci1pbnRsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7OztBQUUvQiw4Q0FrQkM7OztJQWpCQyxpREFBc0I7O0lBQ3RCLHFEQUEwQjs7SUFDMUIsa0RBQXVCOztJQUN2QixrREFBdUI7O0lBQ3ZCLGlEQUFzQjs7SUFDdEIsaURBQXNCOztJQUN0QixnREFBcUI7O0lBQ3JCLGdEQUFxQjs7SUFDckIsMkRBQWdDOztJQUNoQyx5REFBOEI7O0lBQzlCLDBEQUErQjs7SUFDL0IseURBQThCOztJQUM5QiwwREFBK0I7O0lBQy9CLG9EQUF5Qjs7SUFDekIscURBQTBCOztJQUMxQixvREFBeUI7O0lBQ3pCLHFEQUEwQjs7Ozs7QUFLNUIsTUFBTTtJQUZOLDBEQUEwRDtJQUMxRDtRQUVFOzs7V0FHRztRQUNNLFlBQU8sR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO1FBRXZDLCtEQUErRDtRQUMvRCxrQkFBYSxHQUFHLFVBQVUsQ0FBQztRQUUzQix1RkFBdUY7UUFDdkYsc0JBQWlCLEdBQUcsZUFBZSxDQUFDO1FBRXBDLHNFQUFzRTtRQUN0RSxtQkFBYyxHQUFHLGdCQUFnQixDQUFDO1FBRWxDLGtFQUFrRTtRQUNsRSxtQkFBYyxHQUFHLFlBQVksQ0FBQztRQUU5QixxRUFBcUU7UUFDckUsa0JBQWEsR0FBRyxlQUFlLENBQUM7UUFFaEMsaUVBQWlFO1FBQ2pFLGtCQUFhLEdBQUcsV0FBVyxDQUFDO1FBRTVCLDREQUE0RDtRQUM1RCxpQkFBWSxHQUFHLGdCQUFnQixDQUFDO1FBRWhDLDREQUE0RDtRQUM1RCxpQkFBWSxHQUFHLGdCQUFnQixDQUFDO1FBRWhDLCtFQUErRTtRQUMvRSw0QkFBdUIsR0FBRyx1QkFBdUIsQ0FBQztRQUVsRCw2RUFBNkU7UUFDN0UsMEJBQXFCLEdBQUcscUJBQXFCLENBQUM7UUFFOUMsOEVBQThFO1FBQzlFLDJCQUFzQixHQUFHLHNCQUFzQixDQUFDO1FBRWhELDZFQUE2RTtRQUM3RSwwQkFBcUIsR0FBRyxxQkFBcUIsQ0FBQztRQUU5Qyw4RUFBOEU7UUFDOUUsMkJBQXNCLEdBQUcsc0JBQXNCLENBQUM7UUFFaEQsb0NBQW9DO1FBQ3BDLHFCQUFnQixHQUFHLElBQUksQ0FBQztRQUV4QixnRUFBZ0U7UUFDaEUsc0JBQWlCLEdBQUcseUJBQXlCLENBQUM7UUFFOUMsb0NBQW9DO1FBQ3BDLHFCQUFnQixHQUFHLFFBQVEsQ0FBQztRQUU1QixnRUFBZ0U7UUFDaEUsc0JBQWlCLEdBQUcsMkJBQTJCLENBQUM7S0FDakQ7OztZQTFEQSxVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7Ozs7Ozs7SUFNaEMsb0NBQXVDOzs7OztJQUd2QywwQ0FBMkI7Ozs7O0lBRzNCLDhDQUFvQzs7Ozs7SUFHcEMsMkNBQWtDOzs7OztJQUdsQywyQ0FBOEI7Ozs7O0lBRzlCLDBDQUFnQzs7Ozs7SUFHaEMsMENBQTRCOzs7OztJQUc1Qix5Q0FBZ0M7Ozs7O0lBR2hDLHlDQUFnQzs7Ozs7SUFHaEMsb0RBQWtEOzs7OztJQUdsRCxrREFBOEM7Ozs7O0lBRzlDLG1EQUFnRDs7Ozs7SUFHaEQsa0RBQThDOzs7OztJQUc5QyxtREFBZ0Q7Ozs7O0lBR2hELDZDQUF3Qjs7Ozs7SUFHeEIsOENBQThDOzs7OztJQUc5Qyw2Q0FBNEI7Ozs7O0lBRzVCLDhDQUFnRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWF0RGF0ZXBpY2tlckludGxDYXRhbG9nIHtcbiAgY2FsZW5kYXJMYWJlbDogc3RyaW5nO1xuICBvcGVuQ2FsZW5kYXJMYWJlbDogc3RyaW5nO1xuICBwcmV2TW9udGhMYWJlbDogc3RyaW5nO1xuICBuZXh0TW9udGhMYWJlbDogc3RyaW5nO1xuICBwcmV2WWVhckxhYmVsOiBzdHJpbmc7XG4gIG5leHRZZWFyTGFiZWw6IHN0cmluZztcbiAgc2V0VG9BTUxhYmVsOiBzdHJpbmc7XG4gIHNldFRvUE1MYWJlbDogc3RyaW5nO1xuICBzd2l0Y2hUb01pbnV0ZVZpZXdMYWJlbDogc3RyaW5nO1xuICBzd2l0Y2hUb0hvdXJWaWV3TGFiZWw6IHN0cmluZztcbiAgc3dpdGNoVG9Nb250aFZpZXdMYWJlbDogc3RyaW5nO1xuICBzd2l0Y2hUb1llYXJWaWV3TGFiZWw6IHN0cmluZztcbiAgc3dpdGNoVG9ZZWFyc1ZpZXdMYWJlbDogc3RyaW5nO1xuICBidXR0b25TdWJtaXRUZXh0OiBzdHJpbmc7XG4gIGJ1dHRvblN1Ym1pdExhYmVsOiBzdHJpbmc7XG4gIGJ1dHRvbkNhbmNlbFRleHQ6IHN0cmluZztcbiAgYnV0dG9uQ2FuY2VsTGFiZWw6IHN0cmluZztcbn1cblxuLyoqIERhdGVwaWNrZXIgZGF0YSB0aGF0IHJlcXVpcmVzIGludGVybmF0aW9uYWxpemF0aW9uLiAqL1xuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBNYXREYXRlcGlja2VySW50bCBpbXBsZW1lbnRzIE1hdERhdGVwaWNrZXJJbnRsQ2F0YWxvZyB7XG4gIC8qKlxuICAgKiBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuZXZlciB0aGUgbGFiZWxzIGhlcmUgYXJlIGNoYW5nZWQuIFVzZSB0aGlzIHRvIG5vdGlmeVxuICAgKiBjb21wb25lbnRzIGlmIHRoZSBsYWJlbHMgaGF2ZSBjaGFuZ2VkIGFmdGVyIGluaXRpYWxpemF0aW9uLlxuICAgKi9cbiAgcmVhZG9ubHkgY2hhbmdlcyA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgLyoqIEEgbGFiZWwgZm9yIHRoZSBjYWxlbmRhciBwb3B1cCAodXNlZCBieSBzY3JlZW4gcmVhZGVycykuICovXG4gIGNhbGVuZGFyTGFiZWwgPSAnQ2FsZW5kYXInO1xuXG4gIC8qKiBBIGxhYmVsIGZvciB0aGUgYnV0dG9uIHVzZWQgdG8gb3BlbiB0aGUgY2FsZW5kYXIgcG9wdXAgKHVzZWQgYnkgc2NyZWVuIHJlYWRlcnMpLiAqL1xuICBvcGVuQ2FsZW5kYXJMYWJlbCA9ICdPcGVuIGNhbGVuZGFyJztcblxuICAvKiogQSBsYWJlbCBmb3IgdGhlIHByZXZpb3VzIG1vbnRoIGJ1dHRvbiAodXNlZCBieSBzY3JlZW4gcmVhZGVycykuICovXG4gIHByZXZNb250aExhYmVsID0gJ1ByZXZpb3VzIG1vbnRoJztcblxuICAvKiogQSBsYWJlbCBmb3IgdGhlIG5leHQgbW9udGggYnV0dG9uICh1c2VkIGJ5IHNjcmVlbiByZWFkZXJzKS4gKi9cbiAgbmV4dE1vbnRoTGFiZWwgPSAnTmV4dCBtb250aCc7XG5cbiAgLyoqIEEgbGFiZWwgZm9yIHRoZSBwcmV2aW91cyB5ZWFyIGJ1dHRvbiAodXNlZCBieSBzY3JlZW4gcmVhZGVycykuICovXG4gIHByZXZZZWFyTGFiZWwgPSAnUHJldmlvdXMgeWVhcic7XG5cbiAgLyoqIEEgbGFiZWwgZm9yIHRoZSBuZXh0IHllYXIgYnV0dG9uICh1c2VkIGJ5IHNjcmVlbiByZWFkZXJzKS4gKi9cbiAgbmV4dFllYXJMYWJlbCA9ICdOZXh0IHllYXInO1xuXG4gIC8qKiBBIGxhYmVsIGZvciB0aGUgJ0FNJyBidXR0b24gKHVzZWQgYnkgc2NyZWVuIHJlYWRlcnMpLiAqL1xuICBzZXRUb0FNTGFiZWwgPSAnU2V0IGRhdGUgdG8gQU0nO1xuXG4gIC8qKiBBIGxhYmVsIGZvciB0aGUgJ1BNJyBidXR0b24gKHVzZWQgYnkgc2NyZWVuIHJlYWRlcnMpLiAqL1xuICBzZXRUb1BNTGFiZWwgPSAnU2V0IGRhdGUgdG8gUE0nO1xuXG4gIC8qKiBBIGxhYmVsIGZvciB0aGUgJ3N3aXRjaCB0byBtaW51dGUgdmlldycgYnV0dG9uICh1c2VkIGJ5IHNjcmVlbiByZWFkZXJzKS4gKi9cbiAgc3dpdGNoVG9NaW51dGVWaWV3TGFiZWwgPSAnQ2hhbmdlIHRvIG1pbnV0ZSB2aWV3JztcblxuICAvKiogQSBsYWJlbCBmb3IgdGhlICdzd2l0Y2ggdG8gaG91ciB2aWV3JyBidXR0b24gKHVzZWQgYnkgc2NyZWVuIHJlYWRlcnMpLiAqL1xuICBzd2l0Y2hUb0hvdXJWaWV3TGFiZWwgPSAnQ2hhbmdlIHRvIGhvdXIgdmlldyc7XG5cbiAgLyoqIEEgbGFiZWwgZm9yIHRoZSAnc3dpdGNoIHRvIG1vbnRoIHZpZXcnIGJ1dHRvbiAodXNlZCBieSBzY3JlZW4gcmVhZGVycykuICovXG4gIHN3aXRjaFRvTW9udGhWaWV3TGFiZWwgPSAnQ2hhbmdlIHRvIG1vbnRoIHZpZXcnO1xuXG4gIC8qKiBBIGxhYmVsIGZvciB0aGUgJ3N3aXRjaCB0byB5ZWFyIHZpZXcnIGJ1dHRvbiAodXNlZCBieSBzY3JlZW4gcmVhZGVycykuICovXG4gIHN3aXRjaFRvWWVhclZpZXdMYWJlbCA9ICdDaGFuZ2UgdG8geWVhciB2aWV3JztcblxuICAvKiogQSBsYWJlbCBmb3IgdGhlICdzd2l0Y2ggdG8geWVhcnMgdmlldycgYnV0dG9uICh1c2VkIGJ5IHNjcmVlbiByZWFkZXJzKS4gKi9cbiAgc3dpdGNoVG9ZZWFyc1ZpZXdMYWJlbCA9ICdDaGFuZ2UgdG8geWVhcnMgdmlldyc7XG5cbiAgLyoqIFRleHQgZm9yIHRoZSAnc3VibWl0JyBidXR0b24uICovXG4gIGJ1dHRvblN1Ym1pdFRleHQgPSAnT2snO1xuXG4gIC8qKiBBIGxhYmVsIGZvciB0aGUgJ3N1Ym1pdCcgYnV0dG9uICh1c2VkIGJ5IHNjcmVlbiByZWFkZXJzKS4gKi9cbiAgYnV0dG9uU3VibWl0TGFiZWwgPSAnQ2hvb3NlIHRoZSBjdXJyZW50IGRhdGUnO1xuXG4gIC8qKiBUZXh0IGZvciB0aGUgJ2NhbmNlbCcgYnV0dG9uLiAqL1xuICBidXR0b25DYW5jZWxUZXh0ID0gJ0NhbmNlbCc7XG5cbiAgLyoqIEEgbGFiZWwgZm9yIHRoZSAnY2FuY2VsJyBidXR0b24gKHVzZWQgYnkgc2NyZWVuIHJlYWRlcnMpLiAqL1xuICBidXR0b25DYW5jZWxMYWJlbCA9ICdDYW5jZWwgdGhlIGRhdGUgc2VsZWN0aW9uJztcbn1cbiJdfQ==