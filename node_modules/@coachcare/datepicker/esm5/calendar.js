/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Inject, Input, Optional, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { Subject } from 'rxjs';
import { MatClockView } from './clock-view';
import { MAT_DATE_FORMATS } from './core/index';
import { DateAdapter } from './core/index';
import { matDatepickerAnimations } from './datepicker-animations';
import { createMissingDateImplError } from './datepicker-errors';
import { MatDatepickerIntl } from './datepicker-intl';
import { MatMonthView } from './month-view';
import { MatYearView } from './year-view';
import { MatYearsView } from './years-view';
/**
 * A calendar that is used as part of the datepicker.
 * \@docs-private
 * @template D
 */
var MatCalendar = /** @class */ (function () {
    function MatCalendar(_intl, _dateAdapter, _dateFormats, _changeDetectorRef) {
        var _this = this;
        this._intl = _intl;
        this._dateAdapter = _dateAdapter;
        this._dateFormats = _dateFormats;
        this._changeDetectorRef = _changeDetectorRef;
        /**
         * Used for scheduling that focus should be moved to the active cell on the next tick.
         * We need to schedule it, rather than do it immediately, because we have to wait
         * for Angular to re-evaluate the view children.
         */
        this._moveFocusOnNextTick = false;
        /** The type of value handled by the calendar. */
        this.type = 'date';
        /** Which view the calendar should be started in. */
        this.startView = 'month';
        /** Clock interval */
        this.clockStep = 1;
        /** Clock hour format */
        this.twelveHour = false;
        /** Emits when the currently selected date changes. */
        this.selectedChange = new EventEmitter();
        /** Emits when any date is selected. */
        this._userSelection = new EventEmitter();
        /** Date filter for the month and year views. */
        this._dateFilterForViews = function (date, unit) {
            if (unit === void 0) { unit = 'minute'; }
            return (!!date &&
                (!_this.dateFilter || _this.dateFilter(date)) &&
                (!_this.minDate || _this._dateAdapter.compareDate(date, _this.minDate, unit) >= 0) &&
                (!_this.maxDate || _this._dateAdapter.compareDate(date, _this.maxDate, unit) <= 0));
        };
        /**
         * Emits whenever there is a state change that the header may need to respond to.
         */
        this.stateChanges = new Subject();
        /** Whether the calendar is in hour view. */
        this._hourView = true;
        if (!this._dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        if (!this._dateFormats) {
            throw createMissingDateImplError('MAT_DATE_FORMATS');
        }
        this._intlChanges = _intl.changes.subscribe(function () {
            _changeDetectorRef.markForCheck();
            _this.stateChanges.next();
        });
    }
    Object.defineProperty(MatCalendar.prototype, "startAt", {
        /** A date representing the period (month or year) to start the calendar in. */
        get: /**
         * A date representing the period (month or year) to start the calendar in.
         * @return {?}
         */
        function () {
            return this._startAt;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatCalendar.prototype, "selected", {
        /** The currently selected date. */
        get: /**
         * The currently selected date.
         * @return {?}
         */
        function () {
            return this._selected;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
            if (this._selected) {
                this.activeDate = this._selected;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatCalendar.prototype, "minDate", {
        /** The minimum selectable date. */
        get: /**
         * The minimum selectable date.
         * @return {?}
         */
        function () {
            return this._minDate;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatCalendar.prototype, "maxDate", {
        /** The maximum selectable date. */
        get: /**
         * The maximum selectable date.
         * @return {?}
         */
        function () {
            return this._maxDate;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatCalendar.prototype, "activeDate", {
        /**
         * The current active date. This determines which time period is shown and which date is
         * highlighted when using keyboard navigation.
         */
        get: /**
         * The current active date. This determines which time period is shown and which date is
         * highlighted when using keyboard navigation.
         * @return {?}
         */
        function () {
            return this._clampedActiveDate;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var oldActiveDate = this._clampedActiveDate;
            this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);
            this._isAm = this._dateAdapter.getHours(this._clampedActiveDate) < 12;
            /** @type {?} */
            var unit = this.view === 'year' ? 'year' : 'month';
            /** @type {?} */
            var diff = this._dateAdapter.compareDate(oldActiveDate, this._clampedActiveDate, unit);
            if (diff) {
                this._animationDir = diff > 0 ? 'left' : 'right';
            }
            // update the labels
            /** @type {?} */
            var day = this._dateAdapter.getDayOfWeek(this.activeDate);
            /** @type {?} */
            var hours = this._dateAdapter.getHours(this.activeDate);
            if (this.twelveHour) {
                hours = hours === 0 ? 12 : hours > 12 ? hours - 12 : hours;
            }
            /** @type {?} */
            var minutes = this._dateAdapter.getMinutes(this.activeDate);
            switch (this.view) {
                case 'year':
                    this._periodButtonText = this._dateAdapter.getYearName(this.activeDate);
                    break;
                default:
                    this._periodButtonText = this._dateAdapter.format(this.activeDate, this._dateFormats.display.monthYearLabel);
            }
            this._yearButtonText = this._dateAdapter.getYear(this.activeDate).toString();
            this._monthdayButtonText = this._dateAdapter.format(this.activeDate, this._dateFormats.display.monthDayLabel);
            this._dayButtonText = this._dateAdapter.getDayOfWeekNames('short')[day];
            this._hourButtonText = hours.toString();
            this._minuteButtonText = ('00' + minutes).slice(-2);
            this.stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatCalendar.prototype, "currentView", {
        /** Whether the calendar is in month view. */
        get: /**
         * Whether the calendar is in month view.
         * @return {?}
         */
        function () {
            return this._currentView;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._currentView = value;
            this._moveFocusOnNextTick = true;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MatCalendar.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.activeDate = this.startAt || this._dateAdapter.today();
        this.changeView(this.startView, false);
    };
    /**
     * @return {?}
     */
    MatCalendar.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        if (this._moveFocusOnNextTick) {
            this._moveFocusOnNextTick = false;
            this.focusActiveCell();
        }
    };
    /**
     * @return {?}
     */
    MatCalendar.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._intlChanges.unsubscribe();
        this.stateChanges.complete();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    MatCalendar.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this._hasTime = this.type.indexOf('time') >= 0;
        /** @type {?} */
        var change = changes.selected || changes.minDate || changes.maxDate || changes.dateFilter;
        if (change && !change.firstChange) {
            /** @type {?} */
            var view = this._getCurrentViewComponent();
            if (view) {
                // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are
                // passed down to the view via data bindings which won't be up-to-date when we call `_init`.
                this._changeDetectorRef.detectChanges();
                view._init();
            }
        }
        this.stateChanges.next();
    };
    /**
     * @param {?} view
     * @param {?=} focus
     * @return {?}
     */
    MatCalendar.prototype.changeView = /**
     * @param {?} view
     * @param {?=} focus
     * @return {?}
     */
    function (view, focus) {
        if (focus === void 0) { focus = true; }
        switch (view) {
            case 'year':
                this._periodButtonText = this._dateAdapter.getYearName(this.activeDate);
                this._periodButtonLabel = this._intl.switchToYearsViewLabel;
                this._nextButtonLabel = this._intl.nextYearLabel;
                this._prevButtonLabel = this._intl.prevYearLabel;
                break;
            case 'month':
                this._periodButtonText = this._dateAdapter.format(this.activeDate, this._dateFormats.display.monthYearLabel);
                this._periodButtonLabel = this._intl.switchToYearViewLabel;
                this._nextButtonLabel = this._intl.nextMonthLabel;
                this._prevButtonLabel = this._intl.prevMonthLabel;
        }
        this.view = view;
        if (focus) {
            this._moveFocusOnNextTick = true;
        }
    };
    /**
     * @return {?}
     */
    MatCalendar.prototype.focusActiveCell = /**
     * @return {?}
     */
    function () {
        this._getCurrentViewComponent()._focusActiveCell();
    };
    /**
     * @return {?}
     */
    MatCalendar.prototype._submitClicked = /**
     * @return {?}
     */
    function () {
        this.selectedChange.emit(this.activeDate);
        this._userSelection.emit();
    };
    /**
     * @return {?}
     */
    MatCalendar.prototype._cancelClicked = /**
     * @return {?}
     */
    function () {
        this._userSelection.emit();
    };
    /** Handles date selection in the clock view. */
    /**
     * Handles date selection in the clock view.
     * @param {?} date
     * @return {?}
     */
    MatCalendar.prototype._timeChanged = /**
     * Handles date selection in the clock view.
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.selected = date;
    };
    /**
     * @param {?} date
     * @return {?}
     */
    MatCalendar.prototype._timeSelected = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        // if (this.autoOk && this.type === 'time') {
        //   this.selectedChange.emit(date);
        //   this._userSelection.emit();
        // }
        this.selected = date;
    };
    /** Handles date selection in the month view. */
    /**
     * Handles date selection in the month view.
     * @param {?} date
     * @return {?}
     */
    MatCalendar.prototype._dateSelected = /**
     * Handles date selection in the month view.
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.selected = date;
        if (this._hasTime) {
            this.changeView('clock');
        }
    };
    /** Handles month selection in the year view. */
    /**
     * Handles month selection in the year view.
     * @param {?} month
     * @return {?}
     */
    MatCalendar.prototype._monthSelected = /**
     * Handles month selection in the year view.
     * @param {?} month
     * @return {?}
     */
    function (month) {
        this.selected = month;
        this.changeView('month');
    };
    /**
     * @param {?} year
     * @return {?}
     */
    MatCalendar.prototype._yearSelected = /**
     * @param {?} year
     * @return {?}
     */
    function (year) {
        this.selected = year;
        this.changeView('year');
    };
    /** Handles user clicks on the period label. */
    /**
     * Handles user clicks on the period label.
     * @return {?}
     */
    MatCalendar.prototype._currentPeriodClicked = /**
     * Handles user clicks on the period label.
     * @return {?}
     */
    function () {
        this.changeView(this.view === 'month' ? 'year' : 'years');
    };
    /** Handles user clicks on the previous button. */
    /**
     * Handles user clicks on the previous button.
     * @return {?}
     */
    MatCalendar.prototype._previousClicked = /**
     * Handles user clicks on the previous button.
     * @return {?}
     */
    function () {
        this._navCalendar(-1);
    };
    /** Handles user clicks on the next button. */
    /**
     * Handles user clicks on the next button.
     * @return {?}
     */
    MatCalendar.prototype._nextClicked = /**
     * Handles user clicks on the next button.
     * @return {?}
     */
    function () {
        this._navCalendar(1);
    };
    /** Handles user clicks on the time labels. */
    /**
     * Handles user clicks on the time labels.
     * @return {?}
     */
    MatCalendar.prototype._showHourView = /**
     * Handles user clicks on the time labels.
     * @return {?}
     */
    function () {
        if (this._hasTime) {
            this._hourView = true;
            this.changeView('clock');
        }
    };
    /**
     * @return {?}
     */
    MatCalendar.prototype._showMinuteView = /**
     * @return {?}
     */
    function () {
        this._hourView = false;
        this.changeView('clock');
    };
    /**
     * @param {?} am
     * @return {?}
     */
    MatCalendar.prototype._toggleAmPm = /**
     * @param {?} am
     * @return {?}
     */
    function (am) {
        if (this._isAm !== am) {
            /** @type {?} */
            var date = this._dateAdapter.addCalendarHours(this.activeDate, this._isAm ? 12 : -12);
            if (this._dateFilterForViews(date, 'minute')) {
                this.selected = date;
            }
        }
    };
    /** Whether the previous period button is enabled. */
    /**
     * Whether the previous period button is enabled.
     * @return {?}
     */
    MatCalendar.prototype._previousEnabled = /**
     * Whether the previous period button is enabled.
     * @return {?}
     */
    function () {
        if (!this.minDate) {
            return true;
        }
        return !this.minDate || !this._isSameView(this.activeDate, this.minDate);
    };
    /** Whether the next period button is enabled. */
    /**
     * Whether the next period button is enabled.
     * @return {?}
     */
    MatCalendar.prototype._nextEnabled = /**
     * Whether the next period button is enabled.
     * @return {?}
     */
    function () {
        return !this.maxDate || !this._isSameView(this.activeDate, this.maxDate);
    };
    /** Handles calendar diffs. */
    /**
     * Handles calendar diffs.
     * @param {?} diff
     * @return {?}
     */
    MatCalendar.prototype._navCalendar = /**
     * Handles calendar diffs.
     * @param {?} diff
     * @return {?}
     */
    function (diff) {
        switch (this.view) {
            case 'year':
                this.activeDate = this._dateAdapter.addCalendarYears(this.activeDate, diff);
                break;
            case 'month':
                this.activeDate = this._dateAdapter.addCalendarMonths(this.activeDate, diff);
                break;
            case 'clock':
                this.activeDate = this._hourView
                    ? this._dateAdapter.addCalendarHours(this.activeDate, diff)
                    : this._dateAdapter.addCalendarMinutes(this.activeDate, diff);
                break;
        }
    };
    /** Whether the two dates represent the same view in the current view mode (month or year). */
    /**
     * Whether the two dates represent the same view in the current view mode (month or year).
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    MatCalendar.prototype._isSameView = /**
     * Whether the two dates represent the same view in the current view mode (month or year).
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    function (date1, date2) {
        switch (this.view) {
            case 'year':
                return this._dateAdapter.getYear(date1) === this._dateAdapter.getYear(date2);
            case 'month':
                /** @type {?} */
                var monthYear = this._dateFormats.display.monthYearLabel;
                return (this._dateAdapter.format(date1, monthYear) === this._dateAdapter.format(date2, monthYear));
            case 'clock':
            default:
                /** @type {?} */
                var hourMinute = this._dateFormats.display.timeLabel;
                return (this._dateAdapter.format(date1, hourMinute) ===
                    this._dateAdapter.format(date2, hourMinute));
        }
    };
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    /**
     * @param {?} obj The object to check.
     * @return {?} The given object if it is both a date instance and valid, otherwise null.
     */
    MatCalendar.prototype._getValidDateOrNull = /**
     * @param {?} obj The object to check.
     * @return {?} The given object if it is both a date instance and valid, otherwise null.
     */
    function (obj) {
        return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;
    };
    /** Returns the component instance that corresponds to the current calendar view. */
    /**
     * Returns the component instance that corresponds to the current calendar view.
     * @return {?}
     */
    MatCalendar.prototype._getCurrentViewComponent = /**
     * Returns the component instance that corresponds to the current calendar view.
     * @return {?}
     */
    function () {
        return this.clockView || this.monthView || this.yearView || this.yearsView;
    };
    MatCalendar.decorators = [
        { type: Component, args: [{
                    selector: 'mat-calendar',
                    template: "<div [class]=\"'mat-calendar-header mat-calendar-type-' + type\">\n\n  <div class=\"mat-calendar-header-date\">\n    <button class=\"mat-calendar-header-date-year mat-calendar-control\"\n    [class.mat-calendar-control-active]=\"view == 'years'\"\n    [@controlActive]=\"view == 'years' ? 'active' : ''\"\n    [attr.aria-label]=\"_intl.switchToYearViewLabel\"\n    (click)=\"changeView('years')\">\n      {{ _yearButtonText }}\n    </button>\n\n    <button class=\"mat-calendar-header-date-month mat-calendar-control\"\n    [class.mat-calendar-control-active]=\"view == 'month' || view == 'year'\"\n    [@controlActive]=\"view == 'month' || view == 'year' ? 'active' : ''\"\n    [attr.aria-label]=\"_intl.switchToMonthViewLabel\"\n    (click)=\"changeView('month')\">\n      <span class=\"mat-calendar-header-date-dayname\">{{ _dayButtonText }}, </span>\n      <span class=\"mat-calendar-header-date-monthday\">{{ _monthdayButtonText }}</span>\n    </button>\n  </div>\n\n  <div class=\"mat-calendar-header-time\">\n    <div class=\"mat-calendar-header-time-hour\">\n      <button class=\"mat-calendar-control\"\n      [class.mat-calendar-control-active]=\"view == 'clock' && _hourView\"\n      [@controlActive]=\"view == 'clock' && _hourView ? 'active' : ''\"\n      [attr.aria-label]=\"_intl.switchToHourViewLabel\"\n      (click)=\"_showHourView()\">\n        {{ _hourButtonText }}\n      </button>\n      <span>:</span>\n      <button class=\"mat-calendar-control\"\n      [class.mat-calendar-control-active]=\"view == 'clock' && !_hourView\"\n      [@controlActive]=\"view == 'clock' && !_hourView ? 'active' : ''\"\n      [attr.aria-label]=\"_intl.switchToMinuteViewLabel\"\n      (click)=\"_showMinuteView()\">\n        {{ _minuteButtonText }}\n      </button>\n    </div>\n    <div class=\"mat-calendar-header-time-ampm\" *ngIf=\"twelveHour\">\n      <button class=\"mat-calendar-control\"\n      [class.mat-calendar-control-active]=\"_isAm\"\n      [@controlActive]=\"_isAm ? 'active' : ''\"\n      [attr.aria-label]=\"_intl.setToAMLabel\"\n      (click)=\"_toggleAmPm(true)\">\n        AM\n      </button>\n      <button class=\"mat-calendar-control\"\n      [class.mat-calendar-control-active]=\"!_isAm\"\n      [@controlActive]=\"!_isAm ? 'active' : ''\"\n      [attr.aria-label]=\"_intl.setToPMLabel\"\n      (click)=\"_toggleAmPm(false)\">\n        PM\n      </button>\n    </div>\n  </div>\n</div>\n\n<div [class]=\"'mat-calendar-content mat-calendar-view-' + view\">\n\n  <div class=\"mat-calendar-heading\" *ngIf=\"view === 'month' || view === 'year'\">\n    <button mat-icon-button class=\"mat-calendar-previous-button\"\n      (click)=\"_previousClicked()\" [attr.disabled]=\"!_previousEnabled() ? '' : null\"\n      [attr.aria-label]=\"_prevButtonLabel\">\n    </button>\n\n    <button class=\"mat-calendar-heading-period mat-calendar-control mat-calendar-control-active\"\n    [@slideCalendar]=\"_animationDir\" (@slideCalendar.done)=\"_animationDir = ''\"\n    (click)=\"_currentPeriodClicked()\"\n    [attr.aria-label]=\"_periodButtonLabel\">\n      <strong>{{ _periodButtonText }}</strong>\n    </button>\n\n    <button mat-icon-button class=\"mat-calendar-next-button\"\n      (click)=\"_nextClicked()\" [attr.disabled]=\"!_nextEnabled() ? '' : null\"\n      [attr.aria-label]=\"_nextButtonLabel\">\n    </button>\n  </div>\n\n  <div class=\"mat-calendar-main\" [ngSwitch]=\"view\" cdkMonitorSubtreeFocus tabindex=\"-1\">\n\n    <mat-clock-view\n      *ngSwitchCase=\"'clock'\"\n      [(activeDate)]=\"activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"_dateFilterForViews\"\n      [clockStep]=\"clockStep\"\n      [twelveHour]=\"twelveHour\"\n      [hourView]=\"_hourView\"\n      (selectedTime)=\"_timeSelected($event)\"\n      (selectedChange)=\"_timeChanged($event)\"\n      (changeView)=\"_hourView = !_hourView\">\n    </mat-clock-view>\n\n    <mat-month-view\n      *ngSwitchCase=\"'month'\"\n      [(activeDate)]=\"activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"_dateFilterForViews\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      [animationDir]=\"_animationDir\"\n      (selectedChange)=\"_dateSelected($event)\"\n      (_userSelection)=\"_showHourView()\">\n    </mat-month-view>\n\n    <mat-year-view\n      *ngSwitchCase=\"'year'\"\n      [(activeDate)]=\"activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"_dateFilterForViews\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      [animationDir]=\"_animationDir\"\n      (selectedChange)=\"_monthSelected($event)\">\n    </mat-year-view>\n\n    <mat-years-view\n      *ngSwitchCase=\"'years'\"\n      [(activeDate)]=\"activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"_dateFilterForViews\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      (selectedChange)=\"_yearSelected($event)\">\n    </mat-years-view>\n  </div>\n\n  <div class=\"mat-calendar-footer\">\n    <button mat-button\n    (click)=\"_cancelClicked()\"\n    [attr.aria-label]=\"_intl.buttonCancelLabel\">\n      {{ _intl.buttonCancelText }}\n    </button>\n\n    <button mat-button\n    (click)=\"_submitClicked()\"\n    [attr.aria-label]=\"_intl.buttonSubmitLabel\">\n      {{ _intl.buttonSubmitText }}\n    </button>\n  </div>\n</div>\n",
                    // styleUrls: ['calendar.css'],
                    host: {
                        class: 'mat-calendar'
                    },
                    animations: [matDatepickerAnimations.controlActive, matDatepickerAnimations.slideCalendar],
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false
                },] },
    ];
    MatCalendar.ctorParameters = function () { return [
        { type: MatDatepickerIntl },
        { type: DateAdapter, decorators: [{ type: Optional }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },
        { type: ChangeDetectorRef }
    ]; };
    MatCalendar.propDecorators = {
        startAt: [{ type: Input }],
        type: [{ type: Input }],
        startView: [{ type: Input }],
        selected: [{ type: Input }],
        minDate: [{ type: Input }],
        maxDate: [{ type: Input }],
        dateFilter: [{ type: Input }],
        clockStep: [{ type: Input }],
        twelveHour: [{ type: Input }],
        selectedChange: [{ type: Output }],
        _userSelection: [{ type: Output }],
        clockView: [{ type: ViewChild, args: [MatClockView,] }],
        monthView: [{ type: ViewChild, args: [MatMonthView,] }],
        yearView: [{ type: ViewChild, args: [MatYearView,] }],
        yearsView: [{ type: ViewChild, args: [MatYearsView,] }]
    };
    return MatCalendar;
}());
export { MatCalendar };
if (false) {
    /** @type {?} */
    MatCalendar.prototype._intlChanges;
    /**
     * Used for scheduling that focus should be moved to the active cell on the next tick.
     * We need to schedule it, rather than do it immediately, because we have to wait
     * for Angular to re-evaluate the view children.
     * @type {?}
     */
    MatCalendar.prototype._moveFocusOnNextTick;
    /** @type {?} */
    MatCalendar.prototype._startAt;
    /**
     * The type of value handled by the calendar.
     * @type {?}
     */
    MatCalendar.prototype.type;
    /**
     * Which view the calendar should be started in.
     * @type {?}
     */
    MatCalendar.prototype.startView;
    /**
     * Current calendar view
     * @type {?}
     */
    MatCalendar.prototype.view;
    /** @type {?} */
    MatCalendar.prototype._selected;
    /** @type {?} */
    MatCalendar.prototype._minDate;
    /** @type {?} */
    MatCalendar.prototype._maxDate;
    /**
     * A function used to filter which dates are selectable.
     * @type {?}
     */
    MatCalendar.prototype.dateFilter;
    /**
     * Clock interval
     * @type {?}
     */
    MatCalendar.prototype.clockStep;
    /**
     * Clock hour format
     * @type {?}
     */
    MatCalendar.prototype.twelveHour;
    /**
     * Emits when the currently selected date changes.
     * @type {?}
     */
    MatCalendar.prototype.selectedChange;
    /**
     * Emits when any date is selected.
     * @type {?}
     */
    MatCalendar.prototype._userSelection;
    /**
     * Reference to the current clock view component.
     * @type {?}
     */
    MatCalendar.prototype.clockView;
    /**
     * Reference to the current month view component.
     * @type {?}
     */
    MatCalendar.prototype.monthView;
    /**
     * Reference to the current year view component.
     * @type {?}
     */
    MatCalendar.prototype.yearView;
    /**
     * Reference to the current years view component.
     * @type {?}
     */
    MatCalendar.prototype.yearsView;
    /**
     * Date filter for the month and year views.
     * @type {?}
     */
    MatCalendar.prototype._dateFilterForViews;
    /** @type {?} */
    MatCalendar.prototype._clampedActiveDate;
    /** @type {?} */
    MatCalendar.prototype._currentView;
    /**
     * Emits whenever there is a state change that the header may need to respond to.
     * @type {?}
     */
    MatCalendar.prototype.stateChanges;
    /**
     * Animations handler
     * @type {?}
     */
    MatCalendar.prototype._animationDir;
    /**
     * Whether the active date is AM or not
     * @type {?}
     */
    MatCalendar.prototype._isAm;
    /**
     * Whether the calendar process the time.
     * @type {?}
     */
    MatCalendar.prototype._hasTime;
    /**
     * Whether the calendar is in hour view.
     * @type {?}
     */
    MatCalendar.prototype._hourView;
    /**
     * The label for the calendar header buttons.
     * @type {?}
     */
    MatCalendar.prototype._yearButtonText;
    /** @type {?} */
    MatCalendar.prototype._dayButtonText;
    /** @type {?} */
    MatCalendar.prototype._monthdayButtonText;
    /** @type {?} */
    MatCalendar.prototype._hourButtonText;
    /** @type {?} */
    MatCalendar.prototype._minuteButtonText;
    /**
     * The label for the current calendar view.
     * @type {?}
     */
    MatCalendar.prototype._periodButtonText;
    /** @type {?} */
    MatCalendar.prototype._periodButtonLabel;
    /**
     * The label for the the previous button.
     * @type {?}
     */
    MatCalendar.prototype._prevButtonLabel;
    /**
     * The label for the the next button.
     * @type {?}
     */
    MatCalendar.prototype._nextButtonLabel;
    /** @type {?} */
    MatCalendar.prototype._intl;
    /** @type {?} */
    MatCalendar.prototype._dateAdapter;
    /** @type {?} */
    MatCalendar.prototype._dateFormats;
    /** @type {?} */
    MatCalendar.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,