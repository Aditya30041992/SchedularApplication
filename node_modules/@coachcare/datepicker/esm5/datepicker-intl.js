/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * @record
 */
export function MatDatepickerIntlCatalog() { }
if (false) {
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.calendarLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.openCalendarLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.prevMonthLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.nextMonthLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.prevYearLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.nextYearLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.setToAMLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.setToPMLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.switchToMinuteViewLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.switchToHourViewLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.switchToMonthViewLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.switchToYearViewLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.switchToYearsViewLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.buttonSubmitText;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.buttonSubmitLabel;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.buttonCancelText;
    /** @type {?} */
    MatDatepickerIntlCatalog.prototype.buttonCancelLabel;
}
/**
 * Datepicker data that requires internationalization.
 */
var MatDatepickerIntl = /** @class */ (function () {
    /** Datepicker data that requires internationalization. */
    function MatDatepickerIntl() {
        /**
         * Stream that emits whenever the labels here are changed. Use this to notify
         * components if the labels have changed after initialization.
         */
        this.changes = new Subject();
        /** A label for the calendar popup (used by screen readers). */
        this.calendarLabel = 'Calendar';
        /** A label for the button used to open the calendar popup (used by screen readers). */
        this.openCalendarLabel = 'Open calendar';
        /** A label for the previous month button (used by screen readers). */
        this.prevMonthLabel = 'Previous month';
        /** A label for the next month button (used by screen readers). */
        this.nextMonthLabel = 'Next month';
        /** A label for the previous year button (used by screen readers). */
        this.prevYearLabel = 'Previous year';
        /** A label for the next year button (used by screen readers). */
        this.nextYearLabel = 'Next year';
        /** A label for the 'AM' button (used by screen readers). */
        this.setToAMLabel = 'Set date to AM';
        /** A label for the 'PM' button (used by screen readers). */
        this.setToPMLabel = 'Set date to PM';
        /** A label for the 'switch to minute view' button (used by screen readers). */
        this.switchToMinuteViewLabel = 'Change to minute view';
        /** A label for the 'switch to hour view' button (used by screen readers). */
        this.switchToHourViewLabel = 'Change to hour view';
        /** A label for the 'switch to month view' button (used by screen readers). */
        this.switchToMonthViewLabel = 'Change to month view';
        /** A label for the 'switch to year view' button (used by screen readers). */
        this.switchToYearViewLabel = 'Change to year view';
        /** A label for the 'switch to years view' button (used by screen readers). */
        this.switchToYearsViewLabel = 'Change to years view';
        /** Text for the 'submit' button. */
        this.buttonSubmitText = 'Ok';
        /** A label for the 'submit' button (used by screen readers). */
        this.buttonSubmitLabel = 'Choose the current date';
        /** Text for the 'cancel' button. */
        this.buttonCancelText = 'Cancel';
        /** A label for the 'cancel' button (used by screen readers). */
        this.buttonCancelLabel = 'Cancel the date selection';
    }
    MatDatepickerIntl.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] },
    ];
    /** @nocollapse */ MatDatepickerIntl.ngInjectableDef = i0.defineInjectable({ factory: function MatDatepickerIntl_Factory() { return new MatDatepickerIntl(); }, token: MatDatepickerIntl, providedIn: "root" });
    return MatDatepickerIntl;
}());
export { MatDatepickerIntl };
if (false) {
    /**
     * Stream that emits whenever the labels here are changed. Use this to notify
     * components if the labels have changed after initialization.
     * @type {?}
     */
    MatDatepickerIntl.prototype.changes;
    /**
     * A label for the calendar popup (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.calendarLabel;
    /**
     * A label for the button used to open the calendar popup (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.openCalendarLabel;
    /**
     * A label for the previous month button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.prevMonthLabel;
    /**
     * A label for the next month button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.nextMonthLabel;
    /**
     * A label for the previous year button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.prevYearLabel;
    /**
     * A label for the next year button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.nextYearLabel;
    /**
     * A label for the 'AM' button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.setToAMLabel;
    /**
     * A label for the 'PM' button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.setToPMLabel;
    /**
     * A label for the 'switch to minute view' button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.switchToMinuteViewLabel;
    /**
     * A label for the 'switch to hour view' button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.switchToHourViewLabel;
    /**
     * A label for the 'switch to month view' button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.switchToMonthViewLabel;
    /**
     * A label for the 'switch to year view' button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.switchToYearViewLabel;
    /**
     * A label for the 'switch to years view' button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.switchToYearsViewLabel;
    /**
     * Text for the 'submit' button.
     * @type {?}
     */
    MatDatepickerIntl.prototype.buttonSubmitText;
    /**
     * A label for the 'submit' button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.buttonSubmitLabel;
    /**
     * Text for the 'cancel' button.
     * @type {?}
     */
    MatDatepickerIntl.prototype.buttonCancelText;
    /**
     * A label for the 'cancel' button (used by screen readers).
     * @type {?}
     */
    MatDatepickerIntl.prototype.buttonCancelLabel;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci1pbnRsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNvYWNoY2FyZS9kYXRlcGlja2VyLyIsInNvdXJjZXMiOlsiZGF0ZXBpY2tlci1pbnRsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7OztBQUUvQiw4Q0FrQkM7OztJQWpCQyxpREFBc0I7O0lBQ3RCLHFEQUEwQjs7SUFDMUIsa0RBQXVCOztJQUN2QixrREFBdUI7O0lBQ3ZCLGlEQUFzQjs7SUFDdEIsaURBQXNCOztJQUN0QixnREFBcUI7O0lBQ3JCLGdEQUFxQjs7SUFDckIsMkRBQWdDOztJQUNoQyx5REFBOEI7O0lBQzlCLDBEQUErQjs7SUFDL0IseURBQThCOztJQUM5QiwwREFBK0I7O0lBQy9CLG9EQUF5Qjs7SUFDekIscURBQTBCOztJQUMxQixvREFBeUI7O0lBQ3pCLHFEQUEwQjs7Ozs7QUFJNUI7SUFEQSwwREFBMEQ7SUFDMUQ7UUFFRTs7O1dBR0c7UUFDTSxZQUFPLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUV2QywrREFBK0Q7UUFDL0Qsa0JBQWEsR0FBRyxVQUFVLENBQUM7UUFFM0IsdUZBQXVGO1FBQ3ZGLHNCQUFpQixHQUFHLGVBQWUsQ0FBQztRQUVwQyxzRUFBc0U7UUFDdEUsbUJBQWMsR0FBRyxnQkFBZ0IsQ0FBQztRQUVsQyxrRUFBa0U7UUFDbEUsbUJBQWMsR0FBRyxZQUFZLENBQUM7UUFFOUIscUVBQXFFO1FBQ3JFLGtCQUFhLEdBQUcsZUFBZSxDQUFDO1FBRWhDLGlFQUFpRTtRQUNqRSxrQkFBYSxHQUFHLFdBQVcsQ0FBQztRQUU1Qiw0REFBNEQ7UUFDNUQsaUJBQVksR0FBRyxnQkFBZ0IsQ0FBQztRQUVoQyw0REFBNEQ7UUFDNUQsaUJBQVksR0FBRyxnQkFBZ0IsQ0FBQztRQUVoQywrRUFBK0U7UUFDL0UsNEJBQXVCLEdBQUcsdUJBQXVCLENBQUM7UUFFbEQsNkVBQTZFO1FBQzdFLDBCQUFxQixHQUFHLHFCQUFxQixDQUFDO1FBRTlDLDhFQUE4RTtRQUM5RSwyQkFBc0IsR0FBRyxzQkFBc0IsQ0FBQztRQUVoRCw2RUFBNkU7UUFDN0UsMEJBQXFCLEdBQUcscUJBQXFCLENBQUM7UUFFOUMsOEVBQThFO1FBQzlFLDJCQUFzQixHQUFHLHNCQUFzQixDQUFDO1FBRWhELG9DQUFvQztRQUNwQyxxQkFBZ0IsR0FBRyxJQUFJLENBQUM7UUFFeEIsZ0VBQWdFO1FBQ2hFLHNCQUFpQixHQUFHLHlCQUF5QixDQUFDO1FBRTlDLG9DQUFvQztRQUNwQyxxQkFBZ0IsR0FBRyxRQUFRLENBQUM7UUFFNUIsZ0VBQWdFO1FBQ2hFLHNCQUFpQixHQUFHLDJCQUEyQixDQUFDO0tBQ2pEOztnQkExREEsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7OzRCQWhDbEM7Q0EwRkMsQUExREQsSUEwREM7U0F6RFksaUJBQWlCOzs7Ozs7O0lBSzVCLG9DQUF1Qzs7Ozs7SUFHdkMsMENBQTJCOzs7OztJQUczQiw4Q0FBb0M7Ozs7O0lBR3BDLDJDQUFrQzs7Ozs7SUFHbEMsMkNBQThCOzs7OztJQUc5QiwwQ0FBZ0M7Ozs7O0lBR2hDLDBDQUE0Qjs7Ozs7SUFHNUIseUNBQWdDOzs7OztJQUdoQyx5Q0FBZ0M7Ozs7O0lBR2hDLG9EQUFrRDs7Ozs7SUFHbEQsa0RBQThDOzs7OztJQUc5QyxtREFBZ0Q7Ozs7O0lBR2hELGtEQUE4Qzs7Ozs7SUFHOUMsbURBQWdEOzs7OztJQUdoRCw2Q0FBd0I7Ozs7O0lBR3hCLDhDQUE4Qzs7Ozs7SUFHOUMsNkNBQTRCOzs7OztJQUc1Qiw4Q0FBZ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1hdERhdGVwaWNrZXJJbnRsQ2F0YWxvZyB7XG4gIGNhbGVuZGFyTGFiZWw6IHN0cmluZztcbiAgb3BlbkNhbGVuZGFyTGFiZWw6IHN0cmluZztcbiAgcHJldk1vbnRoTGFiZWw6IHN0cmluZztcbiAgbmV4dE1vbnRoTGFiZWw6IHN0cmluZztcbiAgcHJldlllYXJMYWJlbDogc3RyaW5nO1xuICBuZXh0WWVhckxhYmVsOiBzdHJpbmc7XG4gIHNldFRvQU1MYWJlbDogc3RyaW5nO1xuICBzZXRUb1BNTGFiZWw6IHN0cmluZztcbiAgc3dpdGNoVG9NaW51dGVWaWV3TGFiZWw6IHN0cmluZztcbiAgc3dpdGNoVG9Ib3VyVmlld0xhYmVsOiBzdHJpbmc7XG4gIHN3aXRjaFRvTW9udGhWaWV3TGFiZWw6IHN0cmluZztcbiAgc3dpdGNoVG9ZZWFyVmlld0xhYmVsOiBzdHJpbmc7XG4gIHN3aXRjaFRvWWVhcnNWaWV3TGFiZWw6IHN0cmluZztcbiAgYnV0dG9uU3VibWl0VGV4dDogc3RyaW5nO1xuICBidXR0b25TdWJtaXRMYWJlbDogc3RyaW5nO1xuICBidXR0b25DYW5jZWxUZXh0OiBzdHJpbmc7XG4gIGJ1dHRvbkNhbmNlbExhYmVsOiBzdHJpbmc7XG59XG5cbi8qKiBEYXRlcGlja2VyIGRhdGEgdGhhdCByZXF1aXJlcyBpbnRlcm5hdGlvbmFsaXphdGlvbi4gKi9cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgTWF0RGF0ZXBpY2tlckludGwgaW1wbGVtZW50cyBNYXREYXRlcGlja2VySW50bENhdGFsb2cge1xuICAvKipcbiAgICogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbmV2ZXIgdGhlIGxhYmVscyBoZXJlIGFyZSBjaGFuZ2VkLiBVc2UgdGhpcyB0byBub3RpZnlcbiAgICogY29tcG9uZW50cyBpZiB0aGUgbGFiZWxzIGhhdmUgY2hhbmdlZCBhZnRlciBpbml0aWFsaXphdGlvbi5cbiAgICovXG4gIHJlYWRvbmx5IGNoYW5nZXMgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIC8qKiBBIGxhYmVsIGZvciB0aGUgY2FsZW5kYXIgcG9wdXAgKHVzZWQgYnkgc2NyZWVuIHJlYWRlcnMpLiAqL1xuICBjYWxlbmRhckxhYmVsID0gJ0NhbGVuZGFyJztcblxuICAvKiogQSBsYWJlbCBmb3IgdGhlIGJ1dHRvbiB1c2VkIHRvIG9wZW4gdGhlIGNhbGVuZGFyIHBvcHVwICh1c2VkIGJ5IHNjcmVlbiByZWFkZXJzKS4gKi9cbiAgb3BlbkNhbGVuZGFyTGFiZWwgPSAnT3BlbiBjYWxlbmRhcic7XG5cbiAgLyoqIEEgbGFiZWwgZm9yIHRoZSBwcmV2aW91cyBtb250aCBidXR0b24gKHVzZWQgYnkgc2NyZWVuIHJlYWRlcnMpLiAqL1xuICBwcmV2TW9udGhMYWJlbCA9ICdQcmV2aW91cyBtb250aCc7XG5cbiAgLyoqIEEgbGFiZWwgZm9yIHRoZSBuZXh0IG1vbnRoIGJ1dHRvbiAodXNlZCBieSBzY3JlZW4gcmVhZGVycykuICovXG4gIG5leHRNb250aExhYmVsID0gJ05leHQgbW9udGgnO1xuXG4gIC8qKiBBIGxhYmVsIGZvciB0aGUgcHJldmlvdXMgeWVhciBidXR0b24gKHVzZWQgYnkgc2NyZWVuIHJlYWRlcnMpLiAqL1xuICBwcmV2WWVhckxhYmVsID0gJ1ByZXZpb3VzIHllYXInO1xuXG4gIC8qKiBBIGxhYmVsIGZvciB0aGUgbmV4dCB5ZWFyIGJ1dHRvbiAodXNlZCBieSBzY3JlZW4gcmVhZGVycykuICovXG4gIG5leHRZZWFyTGFiZWwgPSAnTmV4dCB5ZWFyJztcblxuICAvKiogQSBsYWJlbCBmb3IgdGhlICdBTScgYnV0dG9uICh1c2VkIGJ5IHNjcmVlbiByZWFkZXJzKS4gKi9cbiAgc2V0VG9BTUxhYmVsID0gJ1NldCBkYXRlIHRvIEFNJztcblxuICAvKiogQSBsYWJlbCBmb3IgdGhlICdQTScgYnV0dG9uICh1c2VkIGJ5IHNjcmVlbiByZWFkZXJzKS4gKi9cbiAgc2V0VG9QTUxhYmVsID0gJ1NldCBkYXRlIHRvIFBNJztcblxuICAvKiogQSBsYWJlbCBmb3IgdGhlICdzd2l0Y2ggdG8gbWludXRlIHZpZXcnIGJ1dHRvbiAodXNlZCBieSBzY3JlZW4gcmVhZGVycykuICovXG4gIHN3aXRjaFRvTWludXRlVmlld0xhYmVsID0gJ0NoYW5nZSB0byBtaW51dGUgdmlldyc7XG5cbiAgLyoqIEEgbGFiZWwgZm9yIHRoZSAnc3dpdGNoIHRvIGhvdXIgdmlldycgYnV0dG9uICh1c2VkIGJ5IHNjcmVlbiByZWFkZXJzKS4gKi9cbiAgc3dpdGNoVG9Ib3VyVmlld0xhYmVsID0gJ0NoYW5nZSB0byBob3VyIHZpZXcnO1xuXG4gIC8qKiBBIGxhYmVsIGZvciB0aGUgJ3N3aXRjaCB0byBtb250aCB2aWV3JyBidXR0b24gKHVzZWQgYnkgc2NyZWVuIHJlYWRlcnMpLiAqL1xuICBzd2l0Y2hUb01vbnRoVmlld0xhYmVsID0gJ0NoYW5nZSB0byBtb250aCB2aWV3JztcblxuICAvKiogQSBsYWJlbCBmb3IgdGhlICdzd2l0Y2ggdG8geWVhciB2aWV3JyBidXR0b24gKHVzZWQgYnkgc2NyZWVuIHJlYWRlcnMpLiAqL1xuICBzd2l0Y2hUb1llYXJWaWV3TGFiZWwgPSAnQ2hhbmdlIHRvIHllYXIgdmlldyc7XG5cbiAgLyoqIEEgbGFiZWwgZm9yIHRoZSAnc3dpdGNoIHRvIHllYXJzIHZpZXcnIGJ1dHRvbiAodXNlZCBieSBzY3JlZW4gcmVhZGVycykuICovXG4gIHN3aXRjaFRvWWVhcnNWaWV3TGFiZWwgPSAnQ2hhbmdlIHRvIHllYXJzIHZpZXcnO1xuXG4gIC8qKiBUZXh0IGZvciB0aGUgJ3N1Ym1pdCcgYnV0dG9uLiAqL1xuICBidXR0b25TdWJtaXRUZXh0ID0gJ09rJztcblxuICAvKiogQSBsYWJlbCBmb3IgdGhlICdzdWJtaXQnIGJ1dHRvbiAodXNlZCBieSBzY3JlZW4gcmVhZGVycykuICovXG4gIGJ1dHRvblN1Ym1pdExhYmVsID0gJ0Nob29zZSB0aGUgY3VycmVudCBkYXRlJztcblxuICAvKiogVGV4dCBmb3IgdGhlICdjYW5jZWwnIGJ1dHRvbi4gKi9cbiAgYnV0dG9uQ2FuY2VsVGV4dCA9ICdDYW5jZWwnO1xuXG4gIC8qKiBBIGxhYmVsIGZvciB0aGUgJ2NhbmNlbCcgYnV0dG9uICh1c2VkIGJ5IHNjcmVlbiByZWFkZXJzKS4gKi9cbiAgYnV0dG9uQ2FuY2VsTGFiZWwgPSAnQ2FuY2VsIHRoZSBkYXRlIHNlbGVjdGlvbic7XG59XG4iXX0=