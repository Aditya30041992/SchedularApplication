/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { DOWN_ARROW, ENTER, UP_ARROW } from '@angular/cdk/keycodes';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, Optional, Output, ViewEncapsulation } from '@angular/core';
import { of as obsOf, fromEvent } from 'rxjs';
import { mergeMap, sampleTime } from 'rxjs/operators';
import { MAT_DATE_FORMATS } from './core/index';
import { DateAdapter } from './core/index';
import { createMissingDateImplError } from './datepicker-errors';
/** @type {?} */
var YEAR_LINE_HEIGHT = 35;
/** @type {?} */
var YEAR_SIZE = 40;
/**
 * An internal component used to display a year selector in the datepicker.
 * \@docs-private
 * @template D
 */
var MatYearsView = /** @class */ (function () {
    function MatYearsView(_changeDetectorRef, element, _dateAdapter, _dateFormats) {
        this._changeDetectorRef = _changeDetectorRef;
        this.element = element;
        this._dateAdapter = _dateAdapter;
        this._dateFormats = _dateFormats;
        /** Emits when a new month is selected. */
        this.selectedChange = new EventEmitter();
        /** List of years. */
        this._years = [];
        if (!this._dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        if (!this._dateFormats) {
            throw createMissingDateImplError('MAT_DATE_FORMATS');
        }
    }
    Object.defineProperty(MatYearsView.prototype, "activeDate", {
        /** The date to display in this view (everything other than the year is ignored). */
        get: /**
         * The date to display in this view (everything other than the year is ignored).
         * @return {?}
         */
        function () {
            return this._activeDate;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var oldActiveDate = this._activeDate;
            /** @type {?} */
            var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();
            this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
            if (oldActiveDate &&
                this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {
                this._init();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatYearsView.prototype, "selected", {
        /** The currently selected date. */
        get: /**
         * The currently selected date.
         * @return {?}
         */
        function () {
            return this._selected;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
            this._selectedYear = this._dateAdapter.getYear(this.selected ? this.selected : this.activeDate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatYearsView.prototype, "minDate", {
        /** The minimum selectable date. */
        get: /**
         * The minimum selectable date.
         * @return {?}
         */
        function () {
            return this._minDate;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatYearsView.prototype, "maxDate", {
        /** The maximum selectable date. */
        get: /**
         * The maximum selectable date.
         * @return {?}
         */
        function () {
            return this._maxDate;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MatYearsView.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var lastPosition = { scrolled: 0 };
        this._disposeScroller = fromEvent(this.element.nativeElement, 'scroll')
            .pipe(sampleTime(300), mergeMap(function (ev) { return obsOf(_this._calculatePoints()); }))
            .subscribe(function (pos) { return _this._handleScroll(pos, lastPosition); });
        this._init();
    };
    /**
     * @return {?}
     */
    MatYearsView.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._disposeScroller.unsubscribe();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MatYearsView.prototype.abs = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return Math.abs(value);
    };
    /** Initializes this year view. */
    /**
     * Initializes this year view.
     * @return {?}
     */
    MatYearsView.prototype._init = /**
     * Initializes this year view.
     * @return {?}
     */
    function () {
        var _this = this;
        this._selectedYear = this._dateAdapter.getYear(this.selected ? this.selected : this.activeDate);
        /** @type {?} */
        var date = this._dateAdapter.createDate(this._selectedYear, this._dateAdapter.getMonth(this.activeDate), this._dateAdapter.getDate(this.activeDate), this._dateAdapter.getHours(this.activeDate), this._dateAdapter.getMinutes(this.activeDate));
        this._years = [
            {
                value: this._selectedYear,
                enabled: !this.dateFilter || this.dateFilter(date, 'minute')
            }
        ];
        this._populateYears();
        setTimeout(function () {
            _this.element.nativeElement.scrollTop -=
                _this.element.nativeElement.offsetHeight / 2 - YEAR_LINE_HEIGHT / 2;
        }, 20);
    };
    /**
     * @param {?=} down
     * @return {?}
     */
    MatYearsView.prototype._populateYears = /**
     * @param {?=} down
     * @return {?}
     */
    function (down) {
        var _this = this;
        if (down === void 0) { down = false; }
        if ((!down && !this._years[0].enabled) ||
            (down && !this._years[this._years.length - 1].enabled)) {
            return;
        }
        /** @type {?} */
        var selectedMonth = this._dateAdapter.getMonth(this.activeDate);
        /** @type {?} */
        var selectedDay = this._dateAdapter.getDate(this.activeDate);
        /** @type {?} */
        var selectedHours = this._dateAdapter.getHours(this.activeDate);
        /** @type {?} */
        var selectedMinutes = this._dateAdapter.getMinutes(this.activeDate);
        /** @type {?} */
        var scroll = 0;
        for (var y = 1; y <= YEAR_SIZE / 2; y++) {
            /** @type {?} */
            var year = this._years[this._years.length - 1].value;
            /** @type {?} */
            var date = this._dateAdapter.createDate(year + 1, selectedMonth, selectedDay, selectedHours, selectedMinutes);
            this._years.push({
                value: year + 1,
                enabled: !this.dateFilter || this.dateFilter(date, 'minute')
            });
            year = this._years[0].value;
            date = this._dateAdapter.createDate(year - 1, selectedMonth, selectedDay, selectedHours, selectedMinutes);
            this._years.unshift({
                value: year - 1,
                enabled: !this.dateFilter || this.dateFilter(date, 'minute')
            });
            scroll += YEAR_LINE_HEIGHT;
        }
        setTimeout(function () {
            _this.element.nativeElement.scrollTop += down ? YEAR_LINE_HEIGHT : scroll;
        }, 10);
        this._changeDetectorRef.markForCheck();
    };
    /**
     * @param {?} year
     * @return {?}
     */
    MatYearsView.prototype._yearSelected = /**
     * @param {?} year
     * @return {?}
     */
    function (year) {
        /** @type {?} */
        var selectedMonth = this._dateAdapter.getMonth(this.activeDate);
        /** @type {?} */
        var selectedDay = this._dateAdapter.getDate(this.activeDate);
        /** @type {?} */
        var selectedHours = this._dateAdapter.getHours(this.activeDate);
        /** @type {?} */
        var selectedMinutes = this._dateAdapter.getMinutes(this.activeDate);
        this.selectedChange.emit(this._dateAdapter.createDate(year, selectedMonth, selectedDay, selectedHours, selectedMinutes));
    };
    /**
     * @return {?}
     */
    MatYearsView.prototype._calculatePoints = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var el = this.element.nativeElement;
        return {
            height: el.offsetHeight,
            scrolled: el.scrollTop,
            total: el.scrollHeight
        };
    };
    /**
     * @param {?} position
     * @param {?} lastPosition
     * @return {?}
     */
    MatYearsView.prototype._handleScroll = /**
     * @param {?} position
     * @param {?} lastPosition
     * @return {?}
     */
    function (position, lastPosition) {
        if (position.scrolled === 0 && lastPosition.scrolled > 0) {
            this._populateYears(false);
        }
        else if (position.height + position.scrolled === position.total) {
            this._populateYears(true);
        }
        lastPosition.scrolled = position.scrolled;
    };
    /** Handles keydown events on the calendar body when calendar is in multi-year view. */
    /**
     * Handles keydown events on the calendar body when calendar is in multi-year view.
     * @param {?} event
     * @return {?}
     */
    MatYearsView.prototype._handleCalendarBodyKeydown = /**
     * Handles keydown events on the calendar body when calendar is in multi-year view.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // TODO handle @angular/cdk/keycode
        switch (event.keyCode) {
            case UP_ARROW:
                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);
                break;
            case DOWN_ARROW:
                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);
                break;
            case ENTER:
                this._yearSelected(this._dateAdapter.getYear(this._activeDate));
                break;
            default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
        }
        this._focusActiveCell();
        // Prevent unexpected default actions such as form submission.
        event.preventDefault();
    };
    /**
     * @return {?}
     */
    MatYearsView.prototype._focusActiveCell = /**
     * @return {?}
     */
    function () { };
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    /**
     * @param {?} obj The object to check.
     * @return {?} The given object if it is both a date instance and valid, otherwise null.
     */
    MatYearsView.prototype._getValidDateOrNull = /**
     * @param {?} obj The object to check.
     * @return {?} The given object if it is both a date instance and valid, otherwise null.
     */
    function (obj) {
        return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;
    };
    MatYearsView.decorators = [
        { type: Component, args: [{
                    selector: 'mat-years-view',
                    template: "<div class=\"mat-calendar-years\" (keydown)=\"_handleCalendarBodyKeydown($event)\">\n  <span *ngFor=\"let year of _years\"\n  [class]=\"'mat-calendar-years-item mat-calendar-years-item-diff' + abs(year.value - _selectedYear)\"\n  [class.mat-calendar-years-item-active]=\"year.value === _selectedYear\"\n  [class.mat-calendar-years-item-disabled]=\"!year.enabled\"\n  (click)=\"year.enabled ? _yearSelected(year.value) : null\">\n    {{ year.value }}\n  </span>\n</div>\n",
                    exportAs: 'matYearsView',
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false
                },] },
    ];
    MatYearsView.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: DateAdapter, decorators: [{ type: Optional }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] }
    ]; };
    MatYearsView.propDecorators = {
        activeDate: [{ type: Input }],
        selected: [{ type: Input }],
        minDate: [{ type: Input }],
        maxDate: [{ type: Input }],
        dateFilter: [{ type: Input }],
        selectedChange: [{ type: Output }]
    };
    return MatYearsView;
}());
export { MatYearsView };
if (false) {
    /** @type {?} */
    MatYearsView.prototype._activeDate;
    /** @type {?} */
    MatYearsView.prototype._selected;
    /** @type {?} */
    MatYearsView.prototype._minDate;
    /** @type {?} */
    MatYearsView.prototype._maxDate;
    /**
     * A function used to filter which dates are selectable.
     * @type {?}
     */
    MatYearsView.prototype.dateFilter;
    /**
     * Emits when a new month is selected.
     * @type {?}
     */
    MatYearsView.prototype.selectedChange;
    /**
     * List of years.
     * @type {?}
     */
    MatYearsView.prototype._years;
    /**
     * The selected year.
     * @type {?}
     */
    MatYearsView.prototype._selectedYear;
    /**
     * Scroller subscription.
     * @type {?}
     */
    MatYearsView.prototype._disposeScroller;
    /** @type {?} */
    MatYearsView.prototype._changeDetectorRef;
    /** @type {?} */
    MatYearsView.prototype.element;
    /** @type {?} */
    MatYearsView.prototype._dateAdapter;
    /** @type {?} */
    MatYearsView.prototype._dateFormats;
}
//# sourceMappingURL=data:application/json;base64,