{"version":3,"file":"coachcare-datepicker.js.map","sources":["ng://@coachcare/datepicker/core/date-adapter.ts","ng://@coachcare/datepicker/core/date-formats.ts","ng://@coachcare/datepicker/core/native-date-adapter.ts","ng://@coachcare/datepicker/core/native-date-formats.ts","ng://@coachcare/datepicker/core/index.ts","ng://@coachcare/datepicker/moment-adapter/moment-date-adapter.ts","ng://@coachcare/datepicker/moment-adapter/moment-date-formats.ts","ng://@coachcare/datepicker/moment-adapter/index.ts","ng://@coachcare/datepicker/datepicker-errors.ts","ng://@coachcare/datepicker/clock-view.ts","ng://@coachcare/datepicker/datepicker-animations.ts","ng://@coachcare/datepicker/datepicker-intl.ts","ng://@coachcare/datepicker/calendar-body.ts","ng://@coachcare/datepicker/month-view.ts","ng://@coachcare/datepicker/year-view.ts","ng://@coachcare/datepicker/years-view.ts","ng://@coachcare/datepicker/calendar.ts","ng://@coachcare/datepicker/datepicker.ts","ng://@coachcare/datepicker/datepicker-input.ts","ng://@coachcare/datepicker/datepicker-toggle.ts","ng://@coachcare/datepicker/datepicker-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { inject, InjectionToken, LOCALE_ID } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = { provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID };\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> {\n    return this._localeChanges;\n  }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  abstract getHours(date: D): number;\n\n  abstract setHours(date: D, value: number): void;\n\n  abstract getMinutes(date: D): number;\n\n  abstract setMinutes(date: D, value: number): void;\n\n  abstract setSeconds(date: D, value: number, ms?: number): void;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  abstract getHourNames(): string[];\n\n  abstract getMinuteNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number, hours?: number, minutes?: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  abstract addCalendarHours(date: D, hours: number): D;\n\n  abstract addCalendarMinutes(date: D, minutes: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: any): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || (this.isDateInstance(value) && this.isValid(value))) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @param unit Unit deep of the comparision.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D, unit = 'minute'): number {\n    let f = this.getYear(first).toString();\n    let s = this.getYear(second).toString();\n\n    if (['y', 'year', 'years'].indexOf(unit) >= 0) {\n      return Number(f) - Number(s);\n    } else {\n      f = f.concat(('00' + this.getMonth(first)).slice(-2));\n      s = s.concat(('00' + this.getMonth(second)).slice(-2));\n    }\n\n    if (['M', 'month', 'months'].indexOf(unit) >= 0) {\n      return Number(f) - Number(s);\n    } else {\n      f = f.concat(('00' + this.getDate(first)).slice(-2));\n      s = s.concat(('00' + this.getDate(second)).slice(-2));\n    }\n\n    if (['d', 'day', 'days'].indexOf(unit) >= 0) {\n      return Number(f) - Number(s);\n    } else {\n      f = f.concat(('00' + this.getHours(first)).slice(-2));\n      s = s.concat(('00' + this.getHours(second)).slice(-2));\n    }\n\n    if (['h', 'hour', 'hours'].indexOf(unit) >= 0) {\n      return Number(f) - Number(s);\n    } else {\n      f = f.concat(('00' + this.getMinutes(first)).slice(-2));\n      s = s.concat(('00' + this.getMinutes(second)).slice(-2));\n    }\n\n    return Number(f) - Number(s);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @param unit Unit deep of the comparision.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null, unit = 'minute'): boolean {\n    return first && second ? !this.compareDate(first, second, unit) : first === second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @param unit Unit deep of the comparision.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null, unit = 'minute'): D {\n    if (min && this.compareDate(date, min, unit) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max, unit) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { InjectionToken } from '@angular/core';\n\nexport interface MatDateFormats {\n  parse: {\n    date: any;\n    datetime: any;\n    time: any;\n  };\n  display: {\n    date: any;\n    datetime: any;\n    time: any;\n    dateA11yLabel: any;\n    monthDayLabel: any;\n    monthDayA11yLabel: any;\n    monthYearLabel: any;\n    monthYearA11yLabel: any;\n    timeLabel: any;\n  };\n}\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { Platform } from '@angular/cdk/platform';\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { DateAdapter, MAT_DATE_LOCALE } from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl !== 'undefined';\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  long: [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n  ],\n  short: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n/** The default hour names to use if Intl API is not available. */\nconst DEFAULT_HOUR_NAMES = range(24, String);\n\n/** The default minute names to use if Intl API is not available. */\nconst DEFAULT_MINUTE_NAMES = range(60, String);\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  long: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  short: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX = /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(\n    platform: Platform,\n    @Optional()\n    @Inject(MAT_DATE_LOCALE)\n    matDateLocale: string\n  ) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getHours(date: Date): number {\n    return date.getHours();\n  }\n\n  setHours(date: Date, value: number): void {\n    date.setHours(value);\n  }\n\n  getMinutes(date: Date): number {\n    return date.getMinutes();\n  }\n\n  setMinutes(date: Date, value: number): void {\n    date.setMinutes(value);\n  }\n\n  setSeconds(date: Date, value: number, ms?: number): void {\n    date.setSeconds(value, ms);\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, { month: style, timeZone: 'utc' });\n      return range(12, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });\n      return range(31, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getHourNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, { hour: 'numeric', timeZone: 'utc' });\n      return range(24, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, 0, 0, i))));\n    }\n    return DEFAULT_HOUR_NAMES;\n  }\n\n  getMinuteNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, { minute: 'numeric', timeZone: 'utc' });\n      return range(60, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, 0, 0, 0, i))));\n    }\n    return DEFAULT_MINUTE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, { weekday: style, timeZone: 'utc' });\n      return range(7, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(\n      this.getYear(date),\n      this.getMonth(date),\n      this.getDate(date),\n      this.getHours(date),\n      this.getMinutes(date)\n    );\n  }\n\n  createDate(year: number, month: number, date: number, hours?: number, minutes?: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    const result = this._createDateWithOverflow(year, month, date, hours, minutes);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() !== month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value === 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = { ...displayFormat, timeZone: 'utc' };\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n      this.getYear(date),\n      this.getMonth(date) + months,\n      this.getDate(date),\n      this.getHours(date),\n      this.getMinutes(date)\n    );\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) !== ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n      this.getYear(date),\n      this.getMonth(date),\n      this.getDate(date) + days,\n      this.getHours(date),\n      this.getMinutes(date)\n    );\n  }\n\n  addCalendarHours(date: Date, hours: number): Date {\n    return this._createDateWithOverflow(\n      this.getYear(date),\n      this.getMonth(date),\n      this.getDate(date),\n      this.getHours(date) + hours,\n      this.getMinutes(date)\n    );\n  }\n\n  addCalendarMinutes(date: Date, minutes: number): Date {\n    return this._createDateWithOverflow(\n      this.getYear(date),\n      this.getMonth(date),\n      this.getDate(date),\n      this.getHours(date),\n      this.getMinutes(date) + minutes\n    );\n  }\n\n  toIso8601(date: Date): string {\n    return [date.getUTCFullYear(), this._2digit(date.getUTCMonth() + 1), this._2digit(date.getUTCDate())].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return date && date.getTime ? !isNaN(date.getTime()) : false;\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number, hours?: number, minutes?: number) {\n    const result = new Date(year, month, date, hours, minutes, 0);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(\n      Date.UTC(\n        date.getFullYear(),\n        date.getMonth(),\n        date.getDate(),\n        date.getHours(),\n        date.getMinutes(),\n        date.getSeconds(),\n        date.getMilliseconds()\n      )\n    );\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { MatDateFormats } from './date-formats';\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    date: null,\n    datetime: null,\n    time: null\n  },\n  display: {\n    date: { year: 'numeric', month: 'numeric', day: 'numeric' },\n    datetime: {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hours: 'numeric',\n      minutes: 'numeric'\n    },\n    time: { hours: 'numeric', minutes: 'numeric' },\n    dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },\n    monthDayLabel: { month: 'short', day: 'numeric' },\n    monthDayA11yLabel: { month: 'long', day: 'numeric' },\n    monthYearLabel: { year: 'numeric', month: 'short' },\n    monthYearA11yLabel: { year: 'numeric', month: 'long' },\n    timeLabel: { hours: 'numeric', minutes: 'numeric' }\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { PlatformModule } from '@angular/cdk/platform';\nimport { NgModule } from '@angular/core';\nimport { DateAdapter } from './date-adapter';\nimport { MAT_DATE_FORMATS } from './date-formats';\nimport { NativeDateAdapter } from './native-date-adapter';\nimport { MAT_NATIVE_DATE_FORMATS } from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [{ provide: DateAdapter, useClass: NativeDateAdapter }]\n})\nexport class NativeDateModule {}\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{ provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS }]\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { DateAdapter, MAT_DATE_LOCALE } from '../core/index';\n\n// TODO(mmalerba): See if we can clean this up at some point.\nimport * as momentNs from 'moment-timezone';\nexport type Moment = momentNs.Moment;\nconst moment = momentNs;\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts Moment.js Dates for use with Angular Material. */\n@Injectable()\nexport class MomentDateAdapter extends DateAdapter<Moment> {\n  // Note: all of the methods that accept a `Moment` input parameter immediately call `this.clone`\n  // on it. This is to ensure that we're working with a `Moment` that has the correct locale setting\n  // while avoiding mutating the original object passed to us. Just calling `.locale(...)` on the\n  // input would mutate the object.\n\n  private _localeData: {\n    firstDayOfWeek: number;\n    longMonths: string[];\n    shortMonths: string[];\n    dates: string[];\n    longDaysOfWeek: string[];\n    shortDaysOfWeek: string[];\n    narrowDaysOfWeek: string[];\n  };\n\n  constructor(\n    @Optional()\n    @Inject(MAT_DATE_LOCALE)\n    dateLocale: string\n  ) {\n    super();\n    this.setLocale(dateLocale || moment.locale());\n  }\n\n  setLocale(locale: string) {\n    super.setLocale(locale);\n\n    const momentLocaleData = moment.localeData(locale);\n    this._localeData = {\n      firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\n      longMonths: momentLocaleData.months(),\n      shortMonths: momentLocaleData.monthsShort(),\n      dates: range(31, i => this.createDate(2017, 0, i + 1).format('D')),\n      longDaysOfWeek: momentLocaleData.weekdays(),\n      shortDaysOfWeek: momentLocaleData.weekdaysShort(),\n      narrowDaysOfWeek: momentLocaleData.weekdaysMin()\n    };\n  }\n\n  getYear(date: Moment): number {\n    return this.clone(date).year();\n  }\n\n  getMonth(date: Moment): number {\n    return this.clone(date).month();\n  }\n\n  getDate(date: Moment): number {\n    return this.clone(date).date();\n  }\n\n  getHours(date: Moment): number {\n    return this.clone(date).hours();\n  }\n\n  setHours(date: Moment, value: number): void {\n    date.hours(value);\n  }\n\n  getMinutes(date: Moment): number {\n    return this.clone(date).minutes();\n  }\n\n  setMinutes(date: Moment, value: number): void {\n    date.minutes(value);\n  }\n\n  setSeconds(date: Moment, value: number, ms?: number): void {\n    date.seconds(value);\n    if (ms) {\n      date.milliseconds(ms);\n    }\n  }\n\n  getDayOfWeek(date: Moment): number {\n    return this.clone(date).day();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.\n    return style === 'long' ? this._localeData.longMonths : this._localeData.shortMonths;\n  }\n\n  getDateNames(): string[] {\n    return this._localeData.dates;\n  }\n\n  getHourNames(): string[] {\n    // TODO SUPPORTS_INTL_API\n    return range(24, String);\n  }\n\n  getMinuteNames(): string[] {\n    // TODO SUPPORTS_INTL_API\n    return range(60, String);\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (style === 'long') {\n      return this._localeData.longDaysOfWeek;\n    }\n    if (style === 'short') {\n      return this._localeData.shortDaysOfWeek;\n    }\n    return this._localeData.narrowDaysOfWeek;\n  }\n\n  getYearName(date: Moment): string {\n    return this.clone(date).format('YYYY');\n  }\n\n  getFirstDayOfWeek(): number {\n    return this._localeData.firstDayOfWeek;\n  }\n\n  getNumDaysInMonth(date: Moment): number {\n    return this.clone(date).daysInMonth();\n  }\n\n  clone(date: Moment | null): Moment {\n    const obj = date ? moment(date) : moment();\n    return obj.locale(this.locale);\n  }\n\n  createDate(year: number, month: number, date: number, hours?: number, minutes?: number): Moment {\n    // Moment.js will create an invalid date if any of the components are out of bounds, but we\n    // explicitly check each case so we can throw more descriptive errors.\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    const result = moment({ year, month, date, hours, minutes, seconds: 0 });\n\n    // If the result isn't valid, the date must have been out of bounds for this month.\n    if (!result.isValid()) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result.locale(this.locale);\n  }\n\n  today(): Moment {\n    return moment().locale(this.locale);\n  }\n\n  parse(value: any, parseFormat: string | string[]): Moment | null {\n    if (parseFormat && value && typeof value === 'string') {\n      return moment(value, parseFormat, this.locale, true);\n    }\n    return value ? moment(value).locale(this.locale) : null;\n  }\n\n  format(date: Moment, displayFormat: string): string {\n    date = this.clone(date);\n    if (!this.isValid(date)) {\n      throw Error('MomentDateAdapter: Cannot format invalid date.');\n    }\n    return date.format(displayFormat);\n  }\n\n  addCalendarYears(date: Moment, years: number): Moment {\n    return this.clone(date).add({ years });\n  }\n\n  addCalendarMonths(date: Moment, months: number): Moment {\n    return this.clone(date).add({ months });\n  }\n\n  addCalendarDays(date: Moment, days: number): Moment {\n    return this.clone(date).add({ days });\n  }\n\n  addCalendarHours(date: Moment, hours: number): Moment {\n    return this.clone(date).add({ hours });\n  }\n\n  addCalendarMinutes(date: Moment, minutes: number): Moment {\n    return this.clone(date).add({ minutes });\n  }\n\n  toIso8601(date: Moment): string {\n    return this.clone(date).format();\n  }\n\n  /**\n   * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\n   * string into null. Returns an invalid date for all other values.\n   */\n  deserialize(value: any): Moment | null {\n    let date;\n    if (value instanceof Date) {\n      date = moment(value);\n    }\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      date = moment(value, moment.ISO_8601).locale(this.locale);\n    }\n    if (date && this.isValid(date)) {\n      return date;\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any): boolean {\n    return moment.isMoment(obj) ? obj.isValid(obj) : moment(obj).isValid();\n  }\n\n  isValid(date: any): boolean {\n    return date ? this.clone(date).isValid() : false;\n  }\n\n  invalid(): Moment {\n    return moment.invalid();\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { MatDateFormats } from '../core/index';\n\nexport const MAT_MOMENT_DATE_FORMATS: MatDateFormats = {\n  // accepted manual input formats\n  parse: {\n    date: ['YYYY-MM-DD', 'YYYY/MM/DD', 'll'],\n    datetime: ['YYYY-MM-DD HH:mm', 'YYYY/MM/DD HH:mm', 'll h:mma'],\n    time: ['H:mm', 'HH:mm', 'h:mm a', 'hh:mm a']\n  },\n  // display format\n  display: {\n    date: 'll',\n    datetime: 'll h:mma',\n    time: 'h:mm a',\n    dateA11yLabel: 'LL',\n    monthDayLabel: 'MMM D',\n    monthDayA11yLabel: 'MMMM D',\n    monthYearLabel: 'MMMM YYYY',\n    monthYearA11yLabel: 'MMMM YYYY',\n    timeLabel: 'HH:mm'\n  }\n};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { NgModule } from '@angular/core';\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '../core/index';\nimport { MomentDateAdapter } from './moment-date-adapter';\nimport { MAT_MOMENT_DATE_FORMATS } from './moment-date-formats';\n\nexport * from './moment-date-adapter';\nexport * from './moment-date-formats';\n\n@NgModule({\n  providers: [{ provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE] }]\n})\nexport class MomentDateModule {}\n\n@NgModule({\n  imports: [MomentDateModule],\n  providers: [{ provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS }]\n})\nexport class MatMomentDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n    `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule ` +\n      `or provide a custom implementation.`\n  );\n}\n","import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport { MAT_DATE_FORMATS, MatDateFormats } from './core/index';\nimport { DateAdapter } from './core/index';\nimport { createMissingDateImplError } from './datepicker-errors';\n\nexport const CLOCK_RADIUS = 50;\nexport const CLOCK_INNER_RADIUS = 27.5;\nexport const CLOCK_OUTER_RADIUS = 41.25;\nexport const CLOCK_TICK_RADIUS = 7.0833;\n\nexport type ClockView = 'hour' | 'minute';\n\n/**\n * A clock that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'mat-clock-view',\n  template: `<div class=\"mat-clock\">\n  <div class=\"mat-clock-center\"></div>\n  <div class=\"mat-clock-hand\" [ngStyle]=\"_hand\"></div>\n\n  <div class=\"mat-clock-hours\" [class.active]=\"hourView\">\n    <div *ngFor=\"let item of _hours\"\n      class=\"mat-clock-cell\"\n      [class.mat-clock-cell-selected]=\"_selectedHour == item.value\"\n      [class.mat-clock-cell-disabled]=\"!item.enabled\"\n      [style.top.%]=\"item.top\"\n      [style.left.%]=\"item.left\"\n      [style.fontSize]=\"item.fontSize\">\n      {{ item.displayValue }}\n    </div>\n  </div>\n\n  <div class=\"mat-clock-minutes\" [class.active]=\"!hourView\">\n    <div *ngFor=\"let item of _minutes\"\n      class=\"mat-clock-cell\"\n      [class.mat-clock-cell-selected]=\"_selectedMinute == item.value\"\n      [class.mat-clock-cell-disabled]=\"!item.enabled\"\n      [style.top.%]=\"item.top\"\n      [style.left.%]=\"item.left\">\n      {{ item.displayValue }}\n    </div>\n  </div>\n</div>\n`,\n  exportAs: 'matClockView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    role: 'clock',\n    '(mousedown)': '_handleMousedown($event)'\n  },\n  preserveWhitespaces: false\n})\nexport class MatClockView<D> implements AfterContentInit {\n  /**\n   * The time to display in this clock view. (the rest is ignored)\n   */\n  @Input()\n  get activeDate(): D {\n    return this._activeDate;\n  }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n    if (oldActiveDate && this._dateAdapter.compareDate(oldActiveDate, this._activeDate, 'minute')) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  // The currently selected date.\n  @Input()\n  get selected(): D | null {\n    return this._selected;\n  }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null {\n    return this._minDate;\n  }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null {\n    return this._maxDate;\n  }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  // A function used to filter which dates are selectable.\n  @Input() dateFilter: (date: D, unit?: string) => boolean;\n\n  @Input() clockStep = 1;\n\n  @Input() twelveHour = false;\n\n  // Whether the clock is in hour view.\n  @Input() hourView = true;\n\n  // Emits when the final time was selected.\n  @Output() readonly selectedTime = new EventEmitter<D>();\n\n  // Emits when the currently selected date changes.\n  @Output() readonly selectedChange = new EventEmitter<D>();\n\n  // Emits when the currently selected date changes.\n  @Output() readonly changeView = new EventEmitter<void>();\n\n  // Hours and Minutes representing the clock view.\n  _hours: Array<any> = [];\n  _minutes: Array<any> = [];\n\n  _selectedHour: number | null;\n  _selectedMinute: number | null;\n  _anteMeridian: boolean;\n\n  private mouseMoveListener: any;\n  private mouseUpListener: any;\n\n  get _hand(): any {\n    this._selectedHour = this._dateAdapter.getHours(this.activeDate);\n    this._selectedMinute = this._dateAdapter.getMinutes(this.activeDate);\n    let radius = CLOCK_OUTER_RADIUS;\n    let deg = 0;\n\n    if (this.twelveHour) {\n      this._selectedHour = this._selectedHour < 12 ? this._selectedHour : this._selectedHour - 12;\n      this._selectedHour = this._selectedHour === 0 ? 12 : this._selectedHour;\n    }\n\n    if (this.hourView) {\n      const outer = this._selectedHour > 0 && this._selectedHour < 13;\n      radius = outer ? CLOCK_OUTER_RADIUS : CLOCK_INNER_RADIUS;\n      if (this.twelveHour) {\n        radius = CLOCK_OUTER_RADIUS;\n      }\n      deg = Math.round(this._selectedHour * (360 / (24 / 2)));\n    } else {\n      deg = Math.round(this._selectedMinute * (360 / 60));\n    }\n\n    return {\n      transform: `rotate(${deg}deg)`,\n      height: `${radius}%`,\n      'margin-top': `${50 - radius}%`\n    };\n  }\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _element: ElementRef,\n    @Optional() public _dateAdapter: DateAdapter<D>,\n    @Optional()\n    @Inject(MAT_DATE_FORMATS)\n    private _dateFormats: MatDateFormats\n  ) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this.mouseMoveListener = (event: any) => {\n      this._handleMousemove(event);\n    };\n    this.mouseUpListener = () => {\n      this._handleMouseup();\n    };\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  // Handles mousedown events on the clock body.\n  _handleMousedown(event: any) {\n    this.setTime(event);\n    document.addEventListener('mousemove', this.mouseMoveListener);\n    document.addEventListener('touchmove', this.mouseMoveListener);\n    document.addEventListener('mouseup', this.mouseUpListener);\n    document.addEventListener('touchend', this.mouseUpListener);\n  }\n\n  _handleMousemove(event: any) {\n    event.preventDefault();\n    this.setTime(event);\n  }\n\n  _handleMouseup() {\n    document.removeEventListener('mousemove', this.mouseMoveListener);\n    document.removeEventListener('touchmove', this.mouseMoveListener);\n    document.removeEventListener('mouseup', this.mouseUpListener);\n    document.removeEventListener('touchend', this.mouseUpListener);\n  }\n\n  // Initializes this clock view.\n  _init() {\n    this._hours.length = 0;\n    this._minutes.length = 0;\n\n    const hourNames = this._dateAdapter.getHourNames();\n    const minuteNames = this._dateAdapter.getMinuteNames();\n\n    if (this.twelveHour) {\n      this._anteMeridian = this._dateAdapter.getHours(this.activeDate) < 12;\n\n      for (let i = 0; i < hourNames.length / 2; i++) {\n        const radian = i / 6 * Math.PI;\n        const radius = CLOCK_OUTER_RADIUS;\n        const date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate),\n          this._dateAdapter.getDate(this.activeDate),\n          this._anteMeridian ? i : i + 12\n        );\n        this._hours.push({\n          value: i,\n          displayValue: i === 0 ? '12' : hourNames[i],\n          enabled: !this.dateFilter || this.dateFilter(date, 'hour'),\n          top: CLOCK_RADIUS - Math.cos(radian) * radius - CLOCK_TICK_RADIUS,\n          left: CLOCK_RADIUS + Math.sin(radian) * radius - CLOCK_TICK_RADIUS\n        });\n      }\n    } else {\n      for (let i = 0; i < hourNames.length; i++) {\n        const radian = i / 6 * Math.PI;\n        const outer = i > 0 && i < 13;\n        const radius = outer ? CLOCK_OUTER_RADIUS : CLOCK_INNER_RADIUS;\n        const date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate),\n          this._dateAdapter.getDate(this.activeDate),\n          i\n        );\n        this._hours.push({\n          value: i,\n          displayValue: i === 0 ? '12' : hourNames[i],\n          enabled: !this.dateFilter || this.dateFilter(date, 'hour'),\n          top: CLOCK_RADIUS - Math.cos(radian) * radius - CLOCK_TICK_RADIUS,\n          left: CLOCK_RADIUS + Math.sin(radian) * radius - CLOCK_TICK_RADIUS,\n          fontSize: i > 0 && i < 13 ? '' : '80%'\n        });\n      }\n    }\n\n    for (let i = 0; i < minuteNames.length; i += 5) {\n      const radian = i / 30 * Math.PI;\n      const date = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate),\n        this._dateAdapter.getDate(this.activeDate),\n        this._dateAdapter.getHours(this.activeDate),\n        i\n      );\n      this._minutes.push({\n        value: i,\n        displayValue: i === 0 ? '00' : minuteNames[i],\n        enabled: !this.dateFilter || this.dateFilter(date, 'minute'),\n        top: CLOCK_RADIUS - Math.cos(radian) * CLOCK_OUTER_RADIUS - CLOCK_TICK_RADIUS,\n        left: CLOCK_RADIUS + Math.sin(radian) * CLOCK_OUTER_RADIUS - CLOCK_TICK_RADIUS\n      });\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Set Time\n  private setTime(event: any) {\n    const trigger = this._element.nativeElement;\n    const triggerRect = trigger.getBoundingClientRect();\n    const width = trigger.offsetWidth;\n    const height = trigger.offsetHeight;\n    const pageX = event.pageX !== undefined ? event.pageX : event.touches[0].pageX;\n    const pageY = event.pageY !== undefined ? event.pageY : event.touches[0].pageY;\n    const x = width / 2 - (pageX - triggerRect.left - window.pageXOffset);\n    const y = height / 2 - (pageY - triggerRect.top - window.pageYOffset);\n    const unit = Math.PI / (this.hourView ? 6 : this.clockStep ? 30 / this.clockStep : 30);\n    const z = Math.sqrt(x * x + y * y);\n    const outer = this.hourView && z > (width * (CLOCK_OUTER_RADIUS / 100) + width * (CLOCK_INNER_RADIUS / 100)) / 2;\n\n    let radian = Math.atan2(-x, y);\n    if (radian < 0) {\n      radian = Math.PI * 2 + radian;\n    }\n    let value = Math.round(radian / unit);\n\n    const date = this._dateAdapter.clone(this.activeDate);\n\n    if (this.hourView) {\n      if (value === 12) {\n        value = 0;\n      }\n      value = this.twelveHour\n        ? this._anteMeridian ? value : value + 12\n        : outer ? (value === 0 ? 12 : value) : value === 0 ? 0 : value + 12;\n      this._dateAdapter.setHours(date, value);\n    } else {\n      if (this.clockStep) {\n        value *= this.clockStep;\n      }\n      if (value === 60) {\n        value = 0;\n      }\n      this._dateAdapter.setMinutes(date, value);\n    }\n\n    // validate if the resulting value is disabled and do not take action\n    if (this.dateFilter && !this.dateFilter(date, this.hourView ? 'hour' : 'minute')) {\n      return;\n    }\n\n    this.activeDate = date;\n    if (this.hourView) {\n      this.changeView.emit();\n      this.selectedChange.emit(this.activeDate);\n    } else {\n      this.selectedTime.emit(this.activeDate);\n    }\n  }\n\n  _focusActiveCell() {}\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger, AnimationTriggerMetadata, keyframes } from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly slideCalendar: AnimationTriggerMetadata;\n  readonly controlActive: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /* Month view slide */\n  slideCalendar: trigger('slideCalendar', [\n    transition('* => left', [\n      animate(\n        180,\n        keyframes([\n          style({ transform: 'translateX(50%)', offset: 0.5, opacity: 0 }),\n          style({ transform: 'translateX(-50%)', offset: 0.51, opacity: 0 }),\n          style({ transform: 'translateX(0)', offset: 1, opacity: 1 })\n        ])\n      )\n    ]),\n    transition('* => right', [\n      animate(\n        180,\n        keyframes([\n          style({ transform: 'translateX(-50%)', offset: 0.5, opacity: 0 }),\n          style({ transform: 'translateX(50%)', offset: 0.51, opacity: 0 }),\n          style({ transform: 'translateX(0)', offset: 1, opacity: 1 })\n        ])\n      )\n    ])\n  ]),\n\n  /* Active control */\n  controlActive: trigger('controlActive', [\n    transition('* => active', [\n      animate(\n        '0.4s linear',\n        keyframes([\n          style({ transform: 'scale(0.9)' }),\n          style({ transform: 'scale(1.1)' }),\n          style({ transform: 'scale(1)' })\n        ])\n      )\n    ])\n  ]),\n\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state(\n      'void',\n      style({\n        opacity: 0,\n        transform: 'scale(1, 0.8)'\n      })\n    ),\n    transition(\n      'void => enter',\n      animate(\n        '120ms cubic-bezier(0, 0, 0.2, 1)',\n        style({\n          opacity: 1,\n          transform: 'scale(1, 1)'\n        })\n      )\n    ),\n    transition('* => void', animate('100ms linear', style({ opacity: 0 })))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({ opacity: 0 })),\n    state('enter', style({ opacity: 1 })),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nexport interface MatDatepickerIntlCatalog {\n  calendarLabel: string;\n  openCalendarLabel: string;\n  prevMonthLabel: string;\n  nextMonthLabel: string;\n  prevYearLabel: string;\n  nextYearLabel: string;\n  setToAMLabel: string;\n  setToPMLabel: string;\n  switchToMinuteViewLabel: string;\n  switchToHourViewLabel: string;\n  switchToMonthViewLabel: string;\n  switchToYearViewLabel: string;\n  switchToYearsViewLabel: string;\n  buttonSubmitText: string;\n  buttonSubmitLabel: string;\n  buttonCancelText: string;\n  buttonCancelLabel: string;\n}\n\n/** Datepicker data that requires internationalization. */\n@Injectable({ providedIn: 'root' })\nexport class MatDatepickerIntl implements MatDatepickerIntlCatalog {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel = 'Next year';\n\n  /** A label for the 'AM' button (used by screen readers). */\n  setToAMLabel = 'Set date to AM';\n\n  /** A label for the 'PM' button (used by screen readers). */\n  setToPMLabel = 'Set date to PM';\n\n  /** A label for the 'switch to minute view' button (used by screen readers). */\n  switchToMinuteViewLabel = 'Change to minute view';\n\n  /** A label for the 'switch to hour view' button (used by screen readers). */\n  switchToHourViewLabel = 'Change to hour view';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel = 'Change to month view';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToYearViewLabel = 'Change to year view';\n\n  /** A label for the 'switch to years view' button (used by screen readers). */\n  switchToYearsViewLabel = 'Change to years view';\n\n  /** Text for the 'submit' button. */\n  buttonSubmitText = 'Ok';\n\n  /** A label for the 'submit' button (used by screen readers). */\n  buttonSubmitLabel = 'Choose the current date';\n\n  /** Text for the 'cancel' button. */\n  buttonCancelText = 'Cancel';\n\n  /** A label for the 'cancel' button (used by screen readers). */\n  buttonCancelLabel = 'Cancel the date selection';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport { take } from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(\n    public value: number,\n    public displayValue: string,\n    public ariaLabel: string,\n    public enabled: boolean\n  ) {}\n}\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  selector: '[mat-calendar-body]',\n  template: `<!--\n  If there's not enough space in the first row, create a separate label row. We mark this row as\n  aria-hidden because we don't want it to be read out as one of the weeks in the month.\n-->\n<tr *ngIf=\"label && _firstRowOffset < labelMinRequiredCells\" aria-hidden=\"true\">\n  <td class=\"mat-calendar-body-label\"\n      [attr.colspan]=\"numCols\"\n      [style.paddingTop.%]=\"50 * cellAspectRatio / numCols\"\n      [style.paddingBottom.%]=\"50 * cellAspectRatio / numCols\">\n    {{ label }}\n  </td>\n</tr>\n\n<!-- Create the first row separately so we can include a special spacer cell. -->\n<tr *ngFor=\"let row of rows; let rowIndex = index\" role=\"row\">\n  <!--\n    We mark this cell as aria-hidden so it doesn't get read out as one of the days in the week.\n    The aspect ratio of the table cells is maintained by setting the top and bottom padding as a\n    percentage of the width (a variant of the trick described here:\n    https://www.w3schools.com/howto/howto_css_aspect_ratio.asp).\n  -->\n  <td *ngIf=\"rowIndex === 0 && _firstRowOffset\"\n      aria-hidden=\"true\"\n      class=\"mat-calendar-body-label\"\n      [attr.colspan]=\"_firstRowOffset\"\n      [style.paddingTop.%]=\"50 * cellAspectRatio / numCols\"\n      [style.paddingBottom.%]=\"50 * cellAspectRatio / numCols\">\n    {{ _firstRowOffset >= labelMinRequiredCells ? label : '' }}\n  </td>\n  <td *ngFor=\"let item of row; let colIndex = index\"\n      role=\"gridcell\"\n      class=\"mat-calendar-body-cell\"\n      [tabindex]=\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\"\n      [class.mat-calendar-body-disabled]=\"!item.enabled\"\n      [class.mat-calendar-body-active]=\"_isActiveCell(rowIndex, colIndex)\"\n      [attr.aria-label]=\"item.ariaLabel\"\n      [attr.aria-disabled]=\"!item.enabled || null\"\n      (click)=\"_cellClicked(item)\"\n      [style.width.%]=\"100 / numCols\"\n      [style.paddingTop.%]=\"50 * cellAspectRatio / numCols\"\n      [style.paddingBottom.%]=\"50 * cellAspectRatio / numCols\">\n    <div class=\"mat-calendar-body-cell-background\"\n         [class.mat-calendar-body-selected]=\"selectedValue === item.value\"\n         [class.mat-calendar-body-active]=\"activeValue === item.value\"\n         [class.mat-calendar-body-today]=\"todayValue === item.value\">\n    </div>\n    <span class=\"mat-calendar-body-cell-content\">{{ item.displayValue }}</span>\n  </td>\n</tr>\n`,\n  // styleUrls: ['calendar-body.scss'],\n  host: {\n    class: 'mat-calendar-body',\n    role: 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is active. */\n  @Input() activeValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 0.55;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) {}\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length\n      ? this.numCols - this.rows[0].length\n      : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber === this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable\n        .asObservable()\n        .pipe(take(1))\n        .subscribe(() => {\n          const activeCell: HTMLElement | null = this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n          if (activeCell) {\n            activeCell.focus();\n          }\n        });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild\n} from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { MatCalendarBody, MatCalendarCell } from './calendar-body';\nimport { MAT_DATE_FORMATS, MatDateFormats } from './core/index';\nimport { DateAdapter } from './core/index';\nimport { matDatepickerAnimations } from './datepicker-animations';\nimport { createMissingDateImplError } from './datepicker-errors';\n\nconst DAYS_PER_WEEK = 7;\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'mat-month-view',\n  template: `<table class=\"mat-calendar-table\">\n  <thead class=\"mat-calendar-table-header\">\n    <tr><th *ngFor=\"let day of _weekdays\" [attr.aria-label]=\"day.long\">{{ day.narrow }}</th></tr>\n  </thead>\n  <tbody mat-calendar-body\n    [@slideCalendar]=\"animationDir\"\n    role=\"grid\"\n    [rows]=\"_weeks\"\n    [todayValue]=\"_todayDate\"\n    [activeValue]=\"_activeValue\"\n    [selectedValue]=\"_selectedDate\"\n    [labelMinRequiredCells]=\"3\"\n    [activeCell]=\"_dateAdapter.getDate(activeDate) - 1\"\n    (selectedValueChange)=\"_dateSelected($event)\"\n    (keydown)=\"_handleCalendarBodyKeydown($event)\">\n  </tbody>\n</table>\n`,\n  exportAs: 'matMonthView',\n  animations: [matDatepickerAnimations.slideCalendar],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D {\n    return this._activeDate;\n  }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    this._activeValue = this._getDateInCurrentMonth(this.activeDate);\n\n    if (oldActiveDate && !this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null {\n    return this._selected;\n  }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null {\n    return this._minDate;\n  }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null {\n    return this._maxDate;\n  }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D, unit?: string) => boolean;\n\n  /** Animations handler */\n  @Input() animationDir: string;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /** The active date on the calendar. */\n  _activeValue: number | null;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: { long: string; narrow: string }[];\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional()\n    @Inject(MAT_DATE_FORMATS)\n    private _dateFormats: MatDateFormats,\n    @Optional() public _dateAdapter: DateAdapter<D>,\n    @Optional() private _dir?: Directionality\n  ) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    const weekdays = longWeekdays.map((long, i) => {\n      return { long, narrow: narrowWeekdays[i].slice(0, 1) };\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate !== date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedHours = this._dateAdapter.getHours(this.activeDate);\n      const selectedMinutes = this._dateAdapter.getMinutes(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(\n        selectedYear,\n        selectedMonth,\n        date,\n        selectedHours,\n        selectedMinutes\n      );\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(\n          this._activeDate,\n          1 - this._dateAdapter.getDate(this._activeDate)\n        );\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(\n          this._activeDate,\n          this._dateAdapter.getNumDaysInMonth(this._activeDate) - this._dateAdapter.getDate(this._activeDate)\n        );\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey\n          ? this._dateAdapter.addCalendarYears(this._activeDate, -1)\n          : this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey\n          ? this._dateAdapter.addCalendarYears(this._activeDate, 1)\n          : this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._activeValue = this._getDateInCurrentMonth(this.activeDate);\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel = this._dateAdapter\n      .getMonthNames('short')\n      [this._dateAdapter.getMonth(this.activeDate)].toLocaleUpperCase();\n\n    const firstOfMonth = this._dateAdapter.createDate(\n      this._dateAdapter.getYear(this.activeDate),\n      this._dateAdapter.getMonth(this.activeDate),\n      1\n    );\n    this._firstWeekOffset =\n      (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) - this._dateAdapter.getFirstDayOfWeek()) %\n      DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell === DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate),\n        i + 1\n      );\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1].push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return (\n      !!date &&\n      (!this.dateFilter || this.dateFilter(date, 'day')) &&\n      (!this.minDate || this._dateAdapter.compareDate(date, this.minDate, 'day') >= 0) &&\n      (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate, 'day') <= 0)\n    );\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ? this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.compareDate(d1, d2, 'month') === 0);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { MatCalendarBody, MatCalendarCell } from './calendar-body';\nimport { MAT_DATE_FORMATS, MatDateFormats } from './core/index';\nimport { DateAdapter } from './core/index';\nimport { matDatepickerAnimations } from './datepicker-animations';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'mat-year-view',\n  template: `<table class=\"mat-calendar-table\">\n  <tbody mat-calendar-body\n    [@slideCalendar]=\"animationDir\"\n    role=\"grid\"\n    allowDisabledSelection=\"true\"\n    [rows]=\"_months\"\n    [todayValue]=\"_todayMonth\"\n    [selectedValue]=\"_selectedMonth\"\n    [labelMinRequiredCells]=\"2\"\n    [numCols]=\"4\"\n    [cellAspectRatio]=\"4 / 7\"\n    [activeCell]=\"_dateAdapter.getMonth(activeDate)\"\n    (selectedValueChange)=\"_monthSelected($event)\"\n    (keydown)=\"_handleCalendarBodyKeydown($event)\">\n  </tbody>\n</table>\n`,\n  exportAs: 'matYearView',\n  animations: [matDatepickerAnimations.slideCalendar],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D {\n    return this._activeDate;\n  }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n      this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n    if (\n      oldActiveDate &&\n      this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)\n    ) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null {\n    return this._selected;\n  }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null {\n    return this._minDate;\n  }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null {\n    return this._maxDate;\n  }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D, unit?: string) => boolean;\n\n  /** Animations handler */\n  @Input() animationDir: string;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional()\n    @Inject(MAT_DATE_FORMATS)\n    private _dateFormats: MatDateFormats,\n    @Optional() public _dateAdapter: DateAdapter<D>,\n    @Optional() private _dir?: Directionality\n  ) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(\n      this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1)\n    );\n    const selectedYear = this._dateAdapter.getYear(this.activeDate);\n    const selectedDay = this._dateAdapter.getDate(this.activeDate);\n    const selectedHours = this._dateAdapter.getHours(this.activeDate);\n    const selectedMinutes = this._dateAdapter.getMinutes(this.activeDate);\n    const date = this._dateAdapter.createDate(\n      selectedYear,\n      month,\n      Math.min(selectedDay, daysInMonth),\n      selectedHours,\n      selectedMinutes\n    );\n    this.selectedChange.emit(date);\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    const monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row =>\n      row.map(month => this._createCellForMonth(month, monthNames[month]))\n    );\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) === this._dateAdapter.getYear(this.activeDate)\n      ? this._dateAdapter.getMonth(date)\n      : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    const ariaLabel = this._dateAdapter.format(\n      this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n      this._dateFormats.display.monthYearA11yLabel\n    );\n    return new MatCalendarCell(\n      month,\n      monthName.toLocaleUpperCase(),\n      ariaLabel,\n      this._shouldEnableMonth(month)\n    );\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (\n      month === undefined ||\n      month === null ||\n      this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n      this._isYearAndMonthBeforeMinDate(activeYear, month)\n    ) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (\n      let d = firstOfMonth;\n      this._dateAdapter.getMonth(d) == month;\n      d = this._dateAdapter.addCalendarDays(d, 1)\n    ) {\n      if (this.dateFilter(d, 'day')) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(\n          this._activeDate,\n          this._dateAdapter.getMonth(this._activeDate)\n        );\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(\n          this._activeDate,\n          11 - this._dateAdapter.getMonth(this._activeDate)\n        );\n        break;\n      case PAGE_UP:\n        this.activeDate = this._dateAdapter.addCalendarYears(\n          this._activeDate,\n          event.altKey ? -10 : -1\n        );\n        break;\n      case PAGE_DOWN:\n        this.activeDate = this._dateAdapter.addCalendarYears(\n          this._activeDate,\n          event.altKey ? 10 : 1\n        );\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { DOWN_ARROW, ENTER, UP_ARROW } from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { of as obsOf, fromEvent } from 'rxjs';\nimport { mergeMap, sampleTime } from 'rxjs/operators';\nimport { MAT_DATE_FORMATS, MatDateFormats } from './core/index';\nimport { DateAdapter } from './core/index';\nimport { createMissingDateImplError } from './datepicker-errors';\n\nconst YEAR_LINE_HEIGHT = 35;\nconst YEAR_SIZE = 40;\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'mat-years-view',\n  template: `<div class=\"mat-calendar-years\" (keydown)=\"_handleCalendarBodyKeydown($event)\">\n  <span *ngFor=\"let year of _years\"\n  [class]=\"'mat-calendar-years-item mat-calendar-years-item-diff' + abs(year.value - _selectedYear)\"\n  [class.mat-calendar-years-item-active]=\"year.value === _selectedYear\"\n  [class.mat-calendar-years-item-disabled]=\"!year.enabled\"\n  (click)=\"year.enabled ? _yearSelected(year.value) : null\">\n    {{ year.value }}\n  </span>\n</div>\n`,\n  exportAs: 'matYearsView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false\n})\nexport class MatYearsView<D> implements AfterContentInit, OnDestroy {\n  /** The date to display in this view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D {\n    return this._activeDate;\n  }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n      this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n    if (\n      oldActiveDate &&\n      this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)\n    ) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null {\n    return this._selected;\n  }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._dateAdapter.getYear(this.selected ? this.selected : this.activeDate);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null {\n    return this._minDate;\n  }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null {\n    return this._maxDate;\n  }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D, unit?: string) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange = new EventEmitter<D>();\n\n  /** List of years. */\n  _years: Array<{ value: number; enabled: boolean }> = [];\n\n  /** The selected year. */\n  _selectedYear: number;\n\n  /** Scroller subscription. */\n  _disposeScroller: Subscription;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private element: ElementRef,\n    @Optional() public _dateAdapter: DateAdapter<D>,\n    @Optional()\n    @Inject(MAT_DATE_FORMATS)\n    private _dateFormats: MatDateFormats\n  ) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n  }\n\n  ngAfterContentInit() {\n    const lastPosition = { scrolled: 0 };\n    this._disposeScroller = fromEvent(this.element.nativeElement, 'scroll')\n      .pipe(sampleTime(300), mergeMap((ev: any) => obsOf(this._calculatePoints())))\n      .subscribe((pos: any) => this._handleScroll(pos, lastPosition));\n\n    this._init();\n  }\n\n  ngOnDestroy() {\n    this._disposeScroller.unsubscribe();\n  }\n\n  abs(value: number) {\n    return Math.abs(value);\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedYear = this._dateAdapter.getYear(this.selected ? this.selected : this.activeDate);\n\n    const date = this._dateAdapter.createDate(\n      this._selectedYear,\n      this._dateAdapter.getMonth(this.activeDate),\n      this._dateAdapter.getDate(this.activeDate),\n      this._dateAdapter.getHours(this.activeDate),\n      this._dateAdapter.getMinutes(this.activeDate)\n    );\n    this._years = [\n      {\n        value: this._selectedYear,\n        enabled: !this.dateFilter || this.dateFilter(date, 'minute')\n      }\n    ];\n\n    this._populateYears();\n\n    setTimeout(() => {\n      this.element.nativeElement.scrollTop -=\n        this.element.nativeElement.offsetHeight / 2 - YEAR_LINE_HEIGHT / 2;\n    }, 20);\n  }\n\n  _populateYears(down = false) {\n    if (\n      (!down && !this._years[0].enabled) ||\n      (down && !this._years[this._years.length - 1].enabled)\n    ) {\n      return;\n    }\n\n    const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n    const selectedDay = this._dateAdapter.getDate(this.activeDate);\n    const selectedHours = this._dateAdapter.getHours(this.activeDate);\n    const selectedMinutes = this._dateAdapter.getMinutes(this.activeDate);\n\n    let scroll = 0;\n    for (let y = 1; y <= YEAR_SIZE / 2; y++) {\n      let year = this._years[this._years.length - 1].value;\n      let date = this._dateAdapter.createDate(\n        year + 1,\n        selectedMonth,\n        selectedDay,\n        selectedHours,\n        selectedMinutes\n      );\n      this._years.push({\n        value: year + 1,\n        enabled: !this.dateFilter || this.dateFilter(date, 'minute')\n      });\n\n      year = this._years[0].value;\n      date = this._dateAdapter.createDate(\n        year - 1,\n        selectedMonth,\n        selectedDay,\n        selectedHours,\n        selectedMinutes\n      );\n      this._years.unshift({\n        value: year - 1,\n        enabled: !this.dateFilter || this.dateFilter(date, 'minute')\n      });\n\n      scroll += YEAR_LINE_HEIGHT;\n    }\n\n    setTimeout(() => {\n      this.element.nativeElement.scrollTop += down ? YEAR_LINE_HEIGHT : scroll;\n    }, 10);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _yearSelected(year: number) {\n    const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n    const selectedDay = this._dateAdapter.getDate(this.activeDate);\n    const selectedHours = this._dateAdapter.getHours(this.activeDate);\n    const selectedMinutes = this._dateAdapter.getMinutes(this.activeDate);\n    this.selectedChange.emit(\n      this._dateAdapter.createDate(year, selectedMonth, selectedDay, selectedHours, selectedMinutes)\n    );\n  }\n\n  _calculatePoints() {\n    const el = this.element.nativeElement;\n    return {\n      height: el.offsetHeight,\n      scrolled: el.scrollTop,\n      total: el.scrollHeight\n    };\n  }\n\n  _handleScroll(position, lastPosition) {\n    if (position.scrolled === 0 && lastPosition.scrolled > 0) {\n      this._populateYears(false);\n    } else if (position.height + position.scrolled === position.total) {\n      this._populateYears(true);\n    }\n    lastPosition.scrolled = position.scrolled;\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO handle @angular/cdk/keycode\n    switch (event.keyCode) {\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _focusActiveCell() {}\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { MatClockView } from './clock-view';\nimport { MAT_DATE_FORMATS, MatDateFormats } from './core/index';\nimport { DateAdapter } from './core/index';\nimport { matDatepickerAnimations } from './datepicker-animations';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { MatDatepickerIntl } from './datepicker-intl';\nimport { MatMonthView } from './month-view';\nimport { MatYearView } from './year-view';\nimport { MatYearsView } from './years-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'clock' | 'month' | 'year' | 'years';\n\n/**\n * Possible return types.\n * @docs-private\n */\nexport type MatCalendarType = 'date' | 'datetime' | 'time';\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'mat-calendar',\n  template: `<div [class]=\"'mat-calendar-header mat-calendar-type-' + type\">\n\n  <div class=\"mat-calendar-header-date\">\n    <button class=\"mat-calendar-header-date-year mat-calendar-control\"\n    [class.mat-calendar-control-active]=\"view == 'years'\"\n    [@controlActive]=\"view == 'years' ? 'active' : ''\"\n    [attr.aria-label]=\"_intl.switchToYearViewLabel\"\n    (click)=\"changeView('years')\">\n      {{ _yearButtonText }}\n    </button>\n\n    <button class=\"mat-calendar-header-date-month mat-calendar-control\"\n    [class.mat-calendar-control-active]=\"view == 'month' || view == 'year'\"\n    [@controlActive]=\"view == 'month' || view == 'year' ? 'active' : ''\"\n    [attr.aria-label]=\"_intl.switchToMonthViewLabel\"\n    (click)=\"changeView('month')\">\n      <span class=\"mat-calendar-header-date-dayname\">{{ _dayButtonText }}, </span>\n      <span class=\"mat-calendar-header-date-monthday\">{{ _monthdayButtonText }}</span>\n    </button>\n  </div>\n\n  <div class=\"mat-calendar-header-time\">\n    <div class=\"mat-calendar-header-time-hour\">\n      <button class=\"mat-calendar-control\"\n      [class.mat-calendar-control-active]=\"view == 'clock' && _hourView\"\n      [@controlActive]=\"view == 'clock' && _hourView ? 'active' : ''\"\n      [attr.aria-label]=\"_intl.switchToHourViewLabel\"\n      (click)=\"_showHourView()\">\n        {{ _hourButtonText }}\n      </button>\n      <span>:</span>\n      <button class=\"mat-calendar-control\"\n      [class.mat-calendar-control-active]=\"view == 'clock' && !_hourView\"\n      [@controlActive]=\"view == 'clock' && !_hourView ? 'active' : ''\"\n      [attr.aria-label]=\"_intl.switchToMinuteViewLabel\"\n      (click)=\"_showMinuteView()\">\n        {{ _minuteButtonText }}\n      </button>\n    </div>\n    <div class=\"mat-calendar-header-time-ampm\" *ngIf=\"twelveHour\">\n      <button class=\"mat-calendar-control\"\n      [class.mat-calendar-control-active]=\"_isAm\"\n      [@controlActive]=\"_isAm ? 'active' : ''\"\n      [attr.aria-label]=\"_intl.setToAMLabel\"\n      (click)=\"_toggleAmPm(true)\">\n        AM\n      </button>\n      <button class=\"mat-calendar-control\"\n      [class.mat-calendar-control-active]=\"!_isAm\"\n      [@controlActive]=\"!_isAm ? 'active' : ''\"\n      [attr.aria-label]=\"_intl.setToPMLabel\"\n      (click)=\"_toggleAmPm(false)\">\n        PM\n      </button>\n    </div>\n  </div>\n</div>\n\n<div [class]=\"'mat-calendar-content mat-calendar-view-' + view\">\n\n  <div class=\"mat-calendar-heading\" *ngIf=\"view === 'month' || view === 'year'\">\n    <button mat-icon-button class=\"mat-calendar-previous-button\"\n      (click)=\"_previousClicked()\" [attr.disabled]=\"!_previousEnabled() ? '' : null\"\n      [attr.aria-label]=\"_prevButtonLabel\">\n    </button>\n\n    <button class=\"mat-calendar-heading-period mat-calendar-control mat-calendar-control-active\"\n    [@slideCalendar]=\"_animationDir\" (@slideCalendar.done)=\"_animationDir = ''\"\n    (click)=\"_currentPeriodClicked()\"\n    [attr.aria-label]=\"_periodButtonLabel\">\n      <strong>{{ _periodButtonText }}</strong>\n    </button>\n\n    <button mat-icon-button class=\"mat-calendar-next-button\"\n      (click)=\"_nextClicked()\" [attr.disabled]=\"!_nextEnabled() ? '' : null\"\n      [attr.aria-label]=\"_nextButtonLabel\">\n    </button>\n  </div>\n\n  <div class=\"mat-calendar-main\" [ngSwitch]=\"view\" cdkMonitorSubtreeFocus tabindex=\"-1\">\n\n    <mat-clock-view\n      *ngSwitchCase=\"'clock'\"\n      [(activeDate)]=\"activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"_dateFilterForViews\"\n      [clockStep]=\"clockStep\"\n      [twelveHour]=\"twelveHour\"\n      [hourView]=\"_hourView\"\n      (selectedTime)=\"_timeSelected($event)\"\n      (selectedChange)=\"_timeChanged($event)\"\n      (changeView)=\"_hourView = !_hourView\">\n    </mat-clock-view>\n\n    <mat-month-view\n      *ngSwitchCase=\"'month'\"\n      [(activeDate)]=\"activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"_dateFilterForViews\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      [animationDir]=\"_animationDir\"\n      (selectedChange)=\"_dateSelected($event)\"\n      (_userSelection)=\"_showHourView()\">\n    </mat-month-view>\n\n    <mat-year-view\n      *ngSwitchCase=\"'year'\"\n      [(activeDate)]=\"activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"_dateFilterForViews\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      [animationDir]=\"_animationDir\"\n      (selectedChange)=\"_monthSelected($event)\">\n    </mat-year-view>\n\n    <mat-years-view\n      *ngSwitchCase=\"'years'\"\n      [(activeDate)]=\"activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"_dateFilterForViews\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      (selectedChange)=\"_yearSelected($event)\">\n    </mat-years-view>\n  </div>\n\n  <div class=\"mat-calendar-footer\">\n    <button mat-button\n    (click)=\"_cancelClicked()\"\n    [attr.aria-label]=\"_intl.buttonCancelLabel\">\n      {{ _intl.buttonCancelText }}\n    </button>\n\n    <button mat-button\n    (click)=\"_submitClicked()\"\n    [attr.aria-label]=\"_intl.buttonSubmitLabel\">\n      {{ _intl.buttonSubmitText }}\n    </button>\n  </div>\n</div>\n`,\n  // styleUrls: ['calendar.css'],\n  host: {\n    class: 'mat-calendar'\n  },\n  animations: [matDatepickerAnimations.controlActive, matDatepickerAnimations.slideCalendar],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnChanges, OnDestroy {\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null {\n    return this._startAt;\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The type of value handled by the calendar. */\n  @Input() type: MatCalendarType = 'date';\n\n  /** Which view the calendar should be started in. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** Current calendar view */\n  view: MatCalendarView;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null {\n    return this._selected;\n  }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    if (this._selected) {\n      this.activeDate = this._selected;\n    }\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null {\n    return this._minDate;\n  }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null {\n    return this._maxDate;\n  }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D, unit?: string) => boolean;\n\n  /** Clock interval */\n  @Input() clockStep = 1;\n\n  /** Clock hour format */\n  @Input() twelveHour = false;\n\n  /** Emits when the currently selected date changes. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** Reference to the current clock view component. */\n  @ViewChild(MatClockView) clockView: MatClockView<D>;\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current years view component. */\n  @ViewChild(MatYearsView) yearsView: MatYearsView<D>;\n\n  /** Date filter for the month and year views. */\n  _dateFilterForViews = (date: D, unit = 'minute') => {\n    return (\n      !!date &&\n      (!this.dateFilter || this.dateFilter(date)) &&\n      (!this.minDate || this._dateAdapter.compareDate(date, this.minDate, unit) >= 0) &&\n      (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate, unit) <= 0)\n    );\n  };\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D {\n    return this._clampedActiveDate;\n  }\n  set activeDate(value: D) {\n    const oldActiveDate = this._clampedActiveDate;\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this._isAm = this._dateAdapter.getHours(this._clampedActiveDate) < 12;\n\n    const unit = this.view === 'year' ? 'year' : 'month';\n    const diff = this._dateAdapter.compareDate(oldActiveDate, this._clampedActiveDate, unit);\n    if (diff) {\n      this._animationDir = diff > 0 ? 'left' : 'right';\n    }\n\n    // update the labels\n    const day = this._dateAdapter.getDayOfWeek(this.activeDate);\n    let hours = this._dateAdapter.getHours(this.activeDate);\n    if (this.twelveHour) {\n      hours = hours === 0 ? 12 : hours > 12 ? hours - 12 : hours;\n    }\n    const minutes = this._dateAdapter.getMinutes(this.activeDate);\n\n    switch (this.view) {\n      case 'year':\n        this._periodButtonText = this._dateAdapter.getYearName(this.activeDate);\n        break;\n      default:\n        this._periodButtonText = this._dateAdapter.format(\n          this.activeDate,\n          this._dateFormats.display.monthYearLabel\n        );\n    }\n    this._yearButtonText = this._dateAdapter.getYear(this.activeDate).toString();\n    this._monthdayButtonText = this._dateAdapter.format(\n      this.activeDate,\n      this._dateFormats.display.monthDayLabel\n    );\n    this._dayButtonText = this._dateAdapter.getDayOfWeekNames('short')[day];\n    this._hourButtonText = hours.toString();\n    this._minuteButtonText = ('00' + minutes).slice(-2);\n\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView {\n    return this._currentView;\n  }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  /** Animations handler */\n  _animationDir: string;\n\n  /** Whether the active date is AM or not */\n  _isAm: boolean;\n\n  /** Whether the calendar process the time. */\n  _hasTime: boolean;\n\n  /** Whether the calendar is in hour view. */\n  _hourView: boolean = true;\n\n  /** The label for the calendar header buttons. */\n  _yearButtonText: string;\n\n  _dayButtonText: string;\n\n  _monthdayButtonText: string;\n\n  _hourButtonText: string;\n\n  _minuteButtonText: string;\n\n  /** The label for the current calendar view. */\n  _periodButtonText: string;\n\n  _periodButtonLabel: string;\n\n  /** The label for the the previous button. */\n  _prevButtonLabel: string;\n\n  /** The label for the the next button. */\n  _nextButtonLabel: string;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    @Optional() private _dateAdapter: DateAdapter<D>,\n    @Optional()\n    @Inject(MAT_DATE_FORMATS)\n    private _dateFormats: MatDateFormats,\n    private _changeDetectorRef: ChangeDetectorRef\n  ) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    this.changeView(this.startView, false);\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._hasTime = this.type.indexOf('time') >= 0;\n    const change = changes.selected || changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  changeView(view, focus = true) {\n    switch (view) {\n      case 'year':\n        this._periodButtonText = this._dateAdapter.getYearName(this.activeDate);\n        this._periodButtonLabel = this._intl.switchToYearsViewLabel;\n        this._nextButtonLabel = this._intl.nextYearLabel;\n        this._prevButtonLabel = this._intl.prevYearLabel;\n        break;\n      case 'month':\n        this._periodButtonText = this._dateAdapter.format(\n          this.activeDate,\n          this._dateFormats.display.monthYearLabel\n        );\n        this._periodButtonLabel = this._intl.switchToYearViewLabel;\n        this._nextButtonLabel = this._intl.nextMonthLabel;\n        this._prevButtonLabel = this._intl.prevMonthLabel;\n    }\n\n    this.view = view;\n    if (focus) {\n      this._moveFocusOnNextTick = true;\n    }\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  _submitClicked(): void {\n    this.selectedChange.emit(this.activeDate);\n    this._userSelection.emit();\n  }\n\n  _cancelClicked(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles date selection in the clock view. */\n  _timeChanged(date: D): void {\n    this.selected = date;\n  }\n\n  _timeSelected(date: D): void {\n    // if (this.autoOk && this.type === 'time') {\n    //   this.selectedChange.emit(date);\n    //   this._userSelection.emit();\n    // }\n    this.selected = date;\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    this.selected = date;\n    if (this._hasTime) {\n      this.changeView('clock');\n    }\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelected(month: D): void {\n    this.selected = month;\n    this.changeView('month');\n  }\n\n  _yearSelected(year: D): void {\n    this.selected = year;\n    this.changeView('year');\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this.changeView(this.view === 'month' ? 'year' : 'years');\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._navCalendar(-1);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._navCalendar(1);\n  }\n\n  /** Handles user clicks on the time labels. */\n  _showHourView(): void {\n    if (this._hasTime) {\n      this._hourView = true;\n      this.changeView('clock');\n    }\n  }\n\n  _showMinuteView(): void {\n    this._hourView = false;\n    this.changeView('clock');\n  }\n\n  _toggleAmPm(am): void {\n    if (this._isAm !== am) {\n      const date = this._dateAdapter.addCalendarHours(this.activeDate, this._isAm ? 12 : -12);\n      if (this._dateFilterForViews(date, 'minute')) {\n        this.selected = date;\n      }\n    }\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this.activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this.activeDate, this.maxDate);\n  }\n\n  /** Handles calendar diffs. */\n  _navCalendar(diff): void {\n    switch (this.view) {\n      case 'year':\n        this.activeDate = this._dateAdapter.addCalendarYears(this.activeDate, diff);\n        break;\n      case 'month':\n        this.activeDate = this._dateAdapter.addCalendarMonths(this.activeDate, diff);\n        break;\n      case 'clock':\n        this.activeDate = this._hourView\n          ? this._dateAdapter.addCalendarHours(this.activeDate, diff)\n          : this._dateAdapter.addCalendarMinutes(this.activeDate, diff);\n        break;\n    }\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    switch (this.view) {\n      case 'year':\n        return this._dateAdapter.getYear(date1) === this._dateAdapter.getYear(date2);\n      case 'month':\n        const monthYear = this._dateFormats.display.monthYearLabel;\n        return (\n          this._dateAdapter.format(date1, monthYear) === this._dateAdapter.format(date2, monthYear)\n        );\n      case 'clock':\n      default:\n        const hourMinute = this._dateFormats.display.timeLabel;\n        return (\n          this._dateAdapter.format(date1, hourMinute) ===\n          this._dateAdapter.format(date2, hourMinute)\n        );\n    }\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.clockView || this.monthView || this.yearView || this.yearsView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, UP_ARROW } from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy\n} from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { take, filter } from 'rxjs/operators';\nimport { merge, Subject, Subscription } from 'rxjs';\nimport { MatCalendar, MatCalendarType, MatCalendarView } from './calendar';\nimport { DateAdapter } from './core/index';\nimport { matDatepickerAnimations } from './datepicker-animations';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { MatDatepickerInput } from './datepicker-input';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY = new InjectionToken<() => ScrollStrategy>(\n  'mat-datepicker-scroll-strategy'\n);\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY\n};\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  selector: 'mat-datepicker-content',\n  template: `<mat-calendar cdkTrapFocus\n    [id]=\"datepicker.id\"\n    [ngClass]=\"datepicker.panelClass\"\n    [type]=\"datepicker.type\"\n    [startAt]=\"datepicker.startAt\"\n    [startView]=\"datepicker.startView\"\n    [clockStep]=\"datepicker.clockStep\"\n    [twelveHour]=\"datepicker.twelveHour\"\n    [minDate]=\"datepicker._minDate\"\n    [maxDate]=\"datepicker._maxDate\"\n    [dateFilter]=\"datepicker._dateFilter\"\n    [selected]=\"datepicker._selected\"\n    (selectedChange)=\"datepicker.select($event)\"\n    (_userSelection)=\"datepicker.close()\">\n</mat-calendar>\n`,\n  // styleUrls: ['datepicker-content.scss'],\n  host: {\n    class: 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '(keydown)': '_handleKeydown($event)'\n  },\n  animations: [matDatepickerAnimations.transformPanel, matDatepickerAnimations.fadeInCalendar],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false\n})\nexport class MatDatepickerContent<D> implements AfterViewInit {\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n\n  /**\n   * Handles keydown event on datepicker content.\n   * @param event The event.\n   */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE) {\n      this.datepicker.close();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n}\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false\n})\nexport class MatDatepicker<D> implements OnInit, OnDestroy {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The type of value handled by the calendar. */\n  @Input() type: MatCalendarType = 'date';\n\n  /** Which view the calendar should be started in. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** Clock interval */\n  @Input() clockStep = 1;\n\n  /** Clock hour format */\n  @Input() twelveHour = true;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean {\n    return this._touchUi;\n  }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = true;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput\n      ? this._datepickerInput.disabled\n      : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Whether the datepicker is connected to a date type one */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n    }\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean {\n    return this._opened;\n  }\n  set opened(value: boolean) {\n    value ? this.open() : this.close();\n  }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null {\n    return this._validSelected;\n  }\n  set _selected(value: D | null) {\n    if (value) {\n      const valid = this._dateAdapter.clampDate(value, this._minDate, this._maxDate);\n      // round the minutes\n      let minutes = this._dateAdapter.getMinutes(valid);\n      minutes = Math.round(minutes / this.clockStep) * this.clockStep;\n      this._dateAdapter.setMinutes(valid, minutes);\n      this._dateAdapter.setSeconds(valid, 0);\n      this._validSelected = valid;\n    } else {\n      this._validSelected = null;\n    }\n  }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null, unit?: string) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(\n    private _dialog: MatDialog,\n    private _overlay: Overlay,\n    private _ngZone: NgZone,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() public _dateAdapter: DateAdapter<D>,\n    @Optional() private _dir: Directionality,\n    @Optional()\n    @Inject(DOCUMENT)\n    private _document: any\n  ) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnInit() {\n    // prevent inconsistent type and view\n    switch (this.type) {\n      case 'date':\n        this.startView = this.startView !== 'clock' ? this.startView : 'month';\n        break;\n      case 'time':\n        this.startView = 'clock';\n        break;\n      default:\n        this.startView = this.startView;\n    }\n\n    if (this._datepicker) {\n      this._datepicker._selectedChanged.subscribe((date: D) => {\n        const value = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(date),\n          this._dateAdapter.getMonth(date),\n          this._dateAdapter.getDate(date),\n          this._selected ? this._dateAdapter.getHours(this._selected) : 0,\n          this._selected ? this._dateAdapter.getMinutes(this._selected) : 0\n        );\n        // update the corresponding changes\n        this.select(value);\n      });\n    }\n\n    // refresh the input\n    this._datepickerInput.value = this._selected;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._selectedChanged.complete();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    const oldValue = this._selected;\n    this._selected = date;\n    const unit = this.type.indexOf('time') >= 0 ? 'minute' : 'day';\n    if (!this._dateAdapter.sameDate(oldValue, this._selected, unit)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription = this._datepickerInput._valueChange.subscribe(\n      (value: D | null) =>\n        (this._selected =\n          value && this._dateAdapter.isDateInstance(value) ? this._dateAdapter.clone(value) : null)\n    );\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  reset(value?: D | null) {\n    this._datepickerInput.reset(value);\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (\n      this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function'\n    ) {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog'\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(\n        MatDatepickerContent,\n        this._viewContainerRef\n      );\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable\n        .asObservable()\n        .pipe(take(1))\n        .subscribe(() => {\n          this._popupRef.updatePosition();\n        });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup'\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(\n        filter(event => {\n          // Closing on alt + up is only valid when there's an input associated with the datepicker.\n          return (\n            event.keyCode === ESCAPE ||\n            (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW)\n          );\n        })\n      )\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay\n      .position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOWN_ARROW } from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport { MAT_INPUT_VALUE_ACCESSOR } from '@angular/material/input';\nimport { MatFormField } from '@angular/material/form-field';\nimport { Subscription } from 'rxjs';\nimport { DateAdapter } from './core/index';\nimport { MAT_DATE_FORMATS, MatDateFormats } from './core/index';\nimport { MatDatepicker } from './datepicker';\nimport { createMissingDateImplError } from './datepicker-errors';\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement\n  ) {\n    this.value = this.target.value;\n  }\n}\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput }\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[attr.disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)'\n  },\n  exportAs: 'matDatepickerInput'\n})\nexport class MatDatepickerInput<D>\n  implements AfterContentInit, ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(filter: (date: D | null, unit?: string) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null, unit?: string) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null {\n    return this._value;\n  }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n  private _firstValue: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null {\n    return this._min;\n  }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null {\n    return this._max;\n  }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid\n      ? null\n      : { matDatepickerParse: { text: this._elementRef.nativeElement.value } };\n  };\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this.min || !controlValue || this._dateAdapter.compareDate(this.min, controlValue) <= 0\n      ? null\n      : { matDatepickerMin: { min: this.min, actual: controlValue } };\n  };\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this.max || !controlValue || this._dateAdapter.compareDate(this.max, controlValue) >= 0\n      ? null\n      : { matDatepickerMax: { max: this.max, actual: controlValue } };\n  };\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue)\n      ? null\n      : { matDatepickerFilter: true };\n  };\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null = Validators.compose([\n    this._parseValidator,\n    this._minValidator,\n    this._maxValidator,\n    this._filterValidator\n  ]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLInputElement>,\n    @Optional() public _dateAdapter: DateAdapter<D>,\n    @Optional()\n    @Inject(MAT_DATE_FORMATS)\n    private _dateFormats: MatDateFormats,\n    @Optional() private _formField: MatFormField\n  ) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n  }\n\n  ngAfterContentInit() {\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = this._dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  reset(value?: D | null): void {\n    this.value = value !== undefined ? value : this._firstValue;\n    this._cvaOnChange(this._value);\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: D): void {\n    if (this._firstValue === undefined) {\n      this._firstValue = value;\n    }\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    const type = this._datepicker.type;\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse[type]);\n    this._lastValueValid = (!value && !date) || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n    // update on every (input) change\n    this._cvaOnChange(date);\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    const type = this._datepicker.type;\n    this._elementRef.nativeElement.value = value\n      ? this._dateAdapter.format(value, this._dateFormats.display[type])\n      : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport { merge, of as obsOf, Subscription } from 'rxjs';\nimport { MatDatepicker } from './datepicker';\nimport { MatDatepickerIntl } from './datepicker-intl';\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n@Component({\n  selector: 'mat-datepicker-toggle',\n  template: `<button\n  mat-icon-button\n  type=\"button\"\n  aria-haspopup=\"true\"\n  [attr.aria-label]=\"_intl.openCalendarLabel\"\n  [attr.tabindex]=\"disabled ? -1 : tabIndex\"\n  [disabled]=\"disabled\"\n  (click)=\"_open($event)\">\n\n  <svg\n    *ngIf=\"!_customIcon\"\n    class=\"mat-datepicker-toggle-default-icon\"\n    viewBox=\"0 0 24 24\"\n    width=\"24px\"\n    height=\"24px\"\n    fill=\"currentColor\"\n    focusable=\"false\">\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n    <path d=\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\"/>\n  </svg>\n\n  <ng-content select=\"[matDatepickerToggleIcon]\"></ng-content>\n</button>\n`,\n  // styleUrls: ['datepicker-toggle.css'],\n  host: {\n    class: 'mat-datepicker-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened'\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string\n  ) {\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : obsOf();\n\n    const inputDisabled =\n      this.datepicker && this.datepicker._datepickerInput\n        ? this.datepicker._datepickerInput._disabledChange\n        : obsOf();\n\n    const datepickerToggled = this.datepicker\n      ? merge(this.datepicker.openedStream, this.datepicker.closedStream)\n      : obsOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatCalendar } from './calendar';\nimport { MatCalendarBody } from './calendar-body';\nimport { MatClockView } from './clock-view';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent\n} from './datepicker';\nimport { MatDatepickerInput } from './datepicker-input';\nimport { MatDatepickerIntl } from './datepicker-intl';\nimport { MatDatepickerToggle, MatDatepickerToggleIcon } from './datepicker-toggle';\nimport { MatMonthView } from './month-view';\nimport { MatYearView } from './year-view';\nimport { MatYearsView } from './years-view';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    OverlayModule,\n    A11yModule\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatClockView,\n    MatMonthView,\n    MatYearView,\n    MatYearsView\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatClockView,\n    MatMonthView,\n    MatYearView,\n    MatYearsView\n  ],\n  providers: [MatDatepickerIntl, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  entryComponents: [MatDatepickerContent]\n})\nexport class MatDatepickerModule {}\n"],"names":["style","range","trigger","obsOf","filter"],"mappings":"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"}
